/* Spotify JS-SDK - v1.8.0-9e27ad5 */
(function () {
    function r(e, n, t) {
        function o(i, f) {
            if (!n[i]) {
                if (!e[i]) {
                    var c = "function" == typeof require && require;
                    if (!f && c) return c(i, !0);
                    if (u) return u(i, !0);
                    var a = new Error("Cannot find module '" + i + "'");
                    throw ((a.code = "MODULE_NOT_FOUND"), a);
                }
                var p = (n[i] = { exports: {} });
                e[i][0].call(
                    p.exports,
                    function (r) {
                        var n = e[i][1][r];
                        return o(n || r);
                    },
                    p,
                    p.exports,
                    r,
                    e,
                    n,
                    t
                );
            }
            return n[i].exports;
        }
        for (var u = "function" == typeof require && require, i = 0; i < t.length; i++) o(t[i]);
        return o;
    }
    return r;
})()(
    {
        1: [
            function (require, module, exports) {
                "use strict";
                function defer() {
                    var e = function () {},
                        r = function () {};
                    return {
                        promise: new Promise(function (o, t) {
                            (e = o), (r = t);
                        }),
                        resolve: e,
                        reject: r,
                    };
                }
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.defer = void 0), (exports.defer = defer);
            },
            {},
        ],
        2: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.Backoff = void 0);
                var counter_1 = require("./counter"),
                    defer_1 = require("./_internal/defer");
                function backoffDestroyed() {
                    return Promise.reject(new Error("Backoff already consumed"));
                }
                var backoffDefaults = {
                        backoffInitial: !1,
                        baseTime: 200,
                        ceiling: 0,
                        curve: "linear",
                        maxDuration: 1 / 0,
                        maxRetries: 1 / 0,
                        maxTime: 1 / 0,
                        retryPredicate: function () {
                            return !0;
                        },
                    },
                    Backoff = (function () {
                        function t(t, e) {
                            (this._resolver = defer_1.defer()), (this._ts = 0), (this._callCount = 0), (this._tickInterval = 0), (this._isRunning = !1);
                            var i = e || {};
                            (this._fn = t),
                                (this._maxDuration = i.maxDuration || backoffDefaults.maxDuration),
                                (this._maxRetries = "maxRetries" in i ? i.maxRetries : backoffDefaults.maxRetries),
                                (this._maxTime = i.maxTime || backoffDefaults.maxTime),
                                (this._retryPredicate = i.retryPredicate || backoffDefaults.retryPredicate),
                                (this._backoffInitial = !!i.backoffInitial),
                                (this._counter = new counter_1.Counter({ curve: i.curve, baseTime: i.baseTime, ceiling: i.ceiling })),
                                this._backoffInitial && (this._maxRetries += 1);
                        }
                        return (
                            (t.init = function (e, i) {
                                return void 0 === i && (i = {}), new t(e, i).start();
                            }),
                            (t.prototype._destroy = function () {
                                (this._fn = backoffDestroyed), (this._resolver = defer_1.defer());
                            }),
                            (t.prototype._failure = function (t) {
                                var e = this;
                                if (t && "retryAfter" in t) this._retryAfter(t);
                                else {
                                    var i = this._counter.getTime(this._callCount);
                                    this._shouldRetry(i, t)
                                        ? (this._callCount++,
                                          (this._tickInterval = setTimeout(function () {
                                              return e._tick();
                                          }, i)))
                                        : (this._resolver.reject(t), this._destroy());
                                }
                            }),
                            (t.prototype._retryAfter = function (t) {
                                var e = this;
                                this._callCount++,
                                    (this._tickInterval = setTimeout(function () {
                                        return e._tick();
                                    }, t.retryAfter));
                            }),
                            (t.prototype._success = function () {
                                for (var t, e = [], i = 0; i < arguments.length; i++) e[i] = arguments[i];
                                (t = this._resolver).resolve.apply(t, e), this._destroy();
                            }),
                            (t.prototype._shouldRetry = function (t, e) {
                                var i = Date.now() - this._ts + t;
                                return this._callCount < this._maxRetries && t < this._maxTime && i < this._maxDuration && this._retryPredicate(e);
                            }),
                            (t.prototype._tick = function () {
                                var t = this;
                                this._fn()
                                    .then(function () {
                                        for (var e = [], i = 0; i < arguments.length; i++) e[i] = arguments[i];
                                        return t._success.apply(t, e);
                                    })
                                    .catch(function (e) {
                                        return t._failure(e);
                                    });
                            }),
                            (t.prototype.getResolver = function () {
                                return this._resolver.promise;
                            }),
                            (t.prototype.start = function (t) {
                                var e = this;
                                return (
                                    !this._fn && t && (this._fn = t),
                                    this._isRunning ||
                                        ((this._ts = Date.now()),
                                        (this._isRunning = !0),
                                        this._backoffInitial
                                            ? ((this._callCount = 1),
                                              (this._tickInterval = setTimeout(function () {
                                                  return e._tick();
                                              }, this._counter.getTime(0))))
                                            : this._tick()),
                                    this._resolver.promise
                                );
                            }),
                            (t.prototype.stop = function () {
                                clearTimeout(this._tickInterval), (this._isRunning = !1), this._destroy();
                            }),
                            (t.prototype.getRetryCount = function () {
                                return this._callCount;
                            }),
                            t
                        );
                    })();
                exports.Backoff = Backoff;
            },
            { "./_internal/defer": 1, "./counter": 3 },
        ],
        3: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.Counter = void 0);
                var MAX_SAFE_BACKOFF = 4294967296;
                function jitter(e) {
                    var t = e / 5;
                    return Math.floor(e - t / 2 + Math.random() * t);
                }
                var counterDefaults = { baseTime: 200, ceiling: 0, curve: "linear", jitter: !0 },
                    Counter = (function () {
                        function e(e) {
                            void 0 === e && (e = {}),
                                (this._curve = e.curve || counterDefaults.curve),
                                (this._baseTime = e.baseTime || counterDefaults.baseTime),
                                (this._ceiling = e.ceiling || counterDefaults.ceiling),
                                (this._jitter = "jitter" in e ? !!e.jitter : counterDefaults.jitter);
                        }
                        return (
                            (e.prototype.getTime = function (e) {
                                var t;
                                switch (this._curve) {
                                    case "static":
                                        t = 1;
                                        break;
                                    case "logarithmic":
                                        t = Math.log(e);
                                        break;
                                    case "exponential":
                                        t = Math.pow(Math.E, e);
                                        break;
                                    case "linear":
                                    default:
                                        t = e + 1;
                                }
                                var i = Math.min(MAX_SAFE_BACKOFF, Math.floor(t * this._baseTime));
                                return this._ceiling && (i = Math.min(i, this._ceiling)), this._jitter ? jitter(i) : i;
                            }),
                            e
                        );
                    })();
                exports.Counter = Counter;
            },
            {},
        ],
        4: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 });
                var tslib_1 = require("tslib");
                tslib_1.__exportStar(require("./backoff"), exports);
            },
            { "./backoff": 2, tslib: 190 },
        ],
        5: [
            function (require, module, exports) {
                "use strict";
                function defer() {
                    var e, r;
                    return {
                        promise: new Promise(function (t, o) {
                            (e = t), (r = o);
                        }),
                        resolve: e,
                        reject: r,
                    };
                }
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.defer = defer);
            },
            {},
        ],
        6: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 });
                var defer_1 = require("./_internal/defer"),
                    defaults = { threshold: 1e3, timestamp: 0, blockInitial: !1 },
                    Debouncer = (function () {
                        function e(e, t) {
                            void 0 === t && (t = {}),
                                (this._cancelFn = null),
                                (this._deferredTimer = 0),
                                (this._fn = e),
                                (this._cancelFn = t.cancel || null),
                                (this._threshold = t.threshold || defaults.threshold),
                                (this._ts = t.initialTimetamp || defaults.timestamp),
                                (this._blockInital = t.blockInitial || defaults.blockInitial);
                        }
                        return (
                            (e.prototype._deferFn = function (e) {
                                this._fn.apply(this._fn, e);
                            }),
                            (e.prototype._deferPromise = function (e, t) {
                                this._fn.apply(this._fn, e).then(function (e) {
                                    t.resolve(e);
                                });
                            }),
                            (e.prototype.sync = function () {
                                for (var e = [], t = 0; t < arguments.length; t++) e[t] = arguments[t];
                                var i = Date.now() - this._ts;
                                if (((this._ts = Date.now()), i < this._threshold))
                                    return this._cancelFn && this._deferredTimer && this._cancelFn(), clearTimeout(this._deferredTimer), void (this._deferredTimer = setTimeout(this._deferFn.bind(this, e), this._threshold));
                                !0 !== this._blockInital ? this._fn.apply(this._fn, e) : this.sync.apply(this, e);
                            }),
                            (e.prototype.async = function () {
                                for (var e = [], t = 0; t < arguments.length; t++) e[t] = arguments[t];
                                var i = Date.now() - this._ts;
                                if (((this._ts = Date.now()), i < this._threshold)) {
                                    this._cancelFn && this._deferredTimer && this._cancelFn(), clearTimeout(this._deferredTimer);
                                    var s = defer_1.defer();
                                    return (this._deferredTimer = setTimeout(this._deferPromise.bind(this, e, s), this._threshold)), s.promise;
                                }
                                return !0 === this._blockInital ? this.async.apply(this, e) : this._fn.apply(this._fn, e);
                            }),
                            (e.prototype.setCancel = function (e) {
                                this._cancelFn = e;
                            }),
                            e
                        );
                    })();
                exports.Debouncer = Debouncer;
            },
            { "./_internal/defer": 5 },
        ],
        7: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.DummyLogger = void 0);
                var DummyLogger = (function () {
                    function t() {
                        (this.tag = ""), (this.description = "");
                    }
                    return (
                        (t.prototype.matchesTag = function () {
                            return !1;
                        }),
                        (t.prototype.setLevel = function () {}),
                        (t.prototype.enable = function () {}),
                        (t.prototype.disable = function () {}),
                        (t.prototype.log = function () {}),
                        (t.prototype.debug = function () {}),
                        (t.prototype.info = function () {}),
                        (t.prototype.warn = function () {}),
                        (t.prototype.error = function () {}),
                        t
                    );
                })();
                exports.DummyLogger = DummyLogger;
            },
            {},
        ],
        8: [
            function (require, module, exports) {
                (function (process) {
                    (function () {
                        "use strict";
                        Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.DebugLogger = void 0);
                        var tslib_1 = require("tslib"),
                            log_level_1 = require("./enums/log_level"),
                            dummy_logger_1 = require("./_internal/dummy_logger"),
                            ConsoleLogger = (function () {
                                function e(e, l, o) {
                                    void 0 === l && (l = ""),
                                        void 0 === o &&
                                            (o = function () {
                                                return !1;
                                            }),
                                        (this._tagParts = []),
                                        (this._tagText = ""),
                                        (this._enabled = !0),
                                        (this._level = log_level_1.LogLevel.NONE),
                                        (this.tag = ""),
                                        (this.description = ""),
                                        (this._predicate = function () {
                                            return !1;
                                        }),
                                        (this.tag = e),
                                        (this.description = l),
                                        (this._predicate = o),
                                        (this._tagParts = e.split(".")),
                                        (this._tagText = "[" + e + "]");
                                }
                                return (
                                    (e.prototype._print = function (e, l, o) {
                                        if (this._enabled || this._level & l) {
                                            var t = { args: o, type: e, tag: this.tag };
                                            this._predicate(t) || console[e].apply(console, tslib_1.__spreadArrays([this._tagText], o));
                                        }
                                    }),
                                    (e.prototype.matchesTag = function (e) {
                                        var l = Array.isArray(e) ? e : e.split("."),
                                            o = this._tagParts;
                                        if (l.length > o.length) return !1;
                                        for (var t = 0, r = l.length; t < r; t++) if (("*" !== l[t] || !o[t]) && l[t] !== o[t]) return !1;
                                        return !0;
                                    }),
                                    (e.prototype.setLevel = function (e) {
                                        var l = 0;
                                        switch (e) {
                                            case "error":
                                                l = log_level_1.LogLevel.ERROR;
                                                break;
                                            case "warn":
                                                l = log_level_1.LogLevel.WARN | log_level_1.LogLevel.ERROR;
                                                break;
                                            case "info":
                                                l = log_level_1.LogLevel.INFO | log_level_1.LogLevel.WARN | log_level_1.LogLevel.ERROR;
                                                break;
                                            case "debug":
                                                l = log_level_1.LogLevel.DEBUG | log_level_1.LogLevel.INFO | log_level_1.LogLevel.WARN | log_level_1.LogLevel.ERROR;
                                                break;
                                            case "log":
                                            default:
                                                l = log_level_1.LogLevel.LOG | log_level_1.LogLevel.DEBUG | log_level_1.LogLevel.INFO | log_level_1.LogLevel.WARN | log_level_1.LogLevel.ERROR;
                                        }
                                        this._level = l;
                                    }),
                                    (e.prototype.enable = function () {
                                        this._enabled = !0;
                                    }),
                                    (e.prototype.disable = function () {
                                        this._enabled = !1;
                                    }),
                                    (e.prototype.log = function () {
                                        for (var e = [], l = 0; l < arguments.length; l++) e[l] = arguments[l];
                                        this._print("log", log_level_1.LogLevel.LOG, e);
                                    }),
                                    (e.prototype.debug = function () {
                                        for (var e = [], l = 0; l < arguments.length; l++) e[l] = arguments[l];
                                        this._print("debug", log_level_1.LogLevel.DEBUG, e);
                                    }),
                                    (e.prototype.info = function () {
                                        for (var e = [], l = 0; l < arguments.length; l++) e[l] = arguments[l];
                                        this._print("info", log_level_1.LogLevel.INFO, e);
                                    }),
                                    (e.prototype.warn = function () {
                                        for (var e = [], l = 0; l < arguments.length; l++) e[l] = arguments[l];
                                        this._print("warn", log_level_1.LogLevel.WARN, e);
                                    }),
                                    (e.prototype.error = function () {
                                        for (var e = [], l = 0; l < arguments.length; l++) e[l] = arguments[l];
                                        this._print("error", log_level_1.LogLevel.ERROR, e);
                                    }),
                                    e
                                );
                            })();
                        exports.DebugLogger = "true" === process.env.DEBUG ? ConsoleLogger : dummy_logger_1.DummyLogger;
                    }.call(this));
                }.call(this, require("_process")));
            },
            { "./_internal/dummy_logger": 7, "./enums/log_level": 9, _process: 186, tslib: 190 },
        ],
        9: [
            function (require, module, exports) {
                "use strict";
                var LogLevel;
                Object.defineProperty(exports, "__esModule", { value: !0 }),
                    (exports.LogLevel = void 0),
                    (function (e) {
                        (e[(e.NONE = 0)] = "NONE"), (e[(e.LOG = 1)] = "LOG"), (e[(e.DEBUG = 2)] = "DEBUG"), (e[(e.INFO = 4)] = "INFO"), (e[(e.WARN = 8)] = "WARN"), (e[(e.ERROR = 16)] = "ERROR");
                    })((LogLevel = exports.LogLevel || (exports.LogLevel = {})));
            },
            {},
        ],
        10: [
            function (require, module, exports) {
                (function (process, global) {
                    (function () {
                        "use strict";
                        function expose(e, o) {
                            "true" === process.env.DEBUG && (global[e] = o);
                        }
                        Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.expose = void 0), (exports.expose = expose);
                    }.call(this));
                }.call(this, require("_process"), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {}));
            },
            { _process: 186 },
        ],
        11: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.logging = void 0);
                var expose_1 = require("./expose");
                Object.defineProperty(exports, "expose", {
                    enumerable: !0,
                    get: function () {
                        return expose_1.expose;
                    },
                });
                var logging = require("./logging");
                exports.logging = logging;
            },
            { "./expose": 10, "./logging": 12 },
        ],
        12: [
            function (require, module, exports) {
                (function (global) {
                    (function () {
                        "use strict";
                        Object.defineProperty(exports, "__esModule", { value: !0 }),
                            (exports.remove = exports.forTag = exports.disableAll = exports.enableAll = exports.setLevel = exports.disable = exports.enable = exports.list = exports.unintercept = exports.intercept = void 0);
                        var debug_logger_1 = require("./debug_logger"),
                            GLOBAL_LOGGER_REGISTRY_KEY = "__dbgLoggerRegistry",
                            globalRegistry = global[GLOBAL_LOGGER_REGISTRY_KEY];
                        globalRegistry ||
                            ((globalRegistry = { map: {}, list: [], loggingPredicate: function () {} }),
                            Object.defineProperty ? Object.defineProperty(global, GLOBAL_LOGGER_REGISTRY_KEY, { value: globalRegistry }) : (global[GLOBAL_LOGGER_REGISTRY_KEY] = globalRegistry));
                        var loggerMap = globalRegistry.map,
                            loggers = globalRegistry.list;
                        function _checkLog(e) {
                            return !(!globalRegistry.loggingPredicate || !globalRegistry.loggingPredicate(e));
                        }
                        var _level = "log";
                        function intercept(e) {
                            if ("function" != typeof e) throw new TypeError("Logging.intercept requires a function predicate.");
                            globalRegistry.loggingPredicate = e;
                        }
                        function unintercept() {
                            globalRegistry.loggingPredicate = function () {};
                        }
                        function list(e) {
                            var r = Object.keys(loggerMap)
                                .filter(function (e) {
                                    return loggerMap[e];
                                })
                                .sort();
                            return e
                                ? r.map(function (e) {
                                      return { tag: e, description: loggerMap[e].description || "No description." };
                                  })
                                : r.reduce(function (e, r) {
                                      return (e[r] = loggerMap[r].description || "No description"), e;
                                  }, {});
                        }
                        function enable(e) {
                            for (var r = Array.isArray(e) ? e : [e], o = r.length; o--; )
                                for (var g = r[o].toLowerCase(), l = loggers.length; l--; ) {
                                    var t = loggers[l];
                                    t.matchesTag(g) && t.enable();
                                }
                        }
                        function disable(e) {
                            for (var r = Array.isArray(e) ? e : [e], o = r.length; o--; )
                                for (var g = r[o].toLowerCase(), l = loggers.length; l--; ) {
                                    var t = loggers[l];
                                    t.matchesTag(g) && t.disable();
                                }
                        }
                        function setLevel(e) {
                            _level = e;
                            for (var r = loggers.length; r--; ) {
                                var o = loggers[r];
                                o && o.setLevel(e);
                            }
                        }
                        function enableAll() {
                            for (var e = loggers.length; e--; ) loggers[e] && loggers[e].enable();
                        }
                        function disableAll() {
                            for (var e = loggers.length; e--; ) loggers[e] && loggers[e].disable();
                        }
                        function forTag(e, r) {
                            var o, g;
                            if (("string" == typeof e ? ((o = e.toLowerCase()), (g = r)) : ((o = e.tag), (g = e.description)), loggerMap.hasOwnProperty(o) && loggerMap[o])) return loggerMap[o];
                            var l = new debug_logger_1.DebugLogger(o, g, _checkLog);
                            return l.setLevel(_level), (loggerMap[o] = l), loggers.push(l), l;
                        }
                        function remove(e) {
                            var r = e.toLowerCase();
                            if (loggerMap.hasOwnProperty(r) && loggerMap[r]) {
                                var o = loggerMap[r];
                                loggerMap[r] = null;
                                var g = loggers.indexOf(o);
                                -1 !== g && loggers.splice(g, 1);
                            }
                        }
                        (exports.intercept = intercept),
                            (exports.unintercept = unintercept),
                            (exports.list = list),
                            (exports.enable = enable),
                            (exports.disable = disable),
                            (exports.setLevel = setLevel),
                            (exports.enableAll = enableAll),
                            (exports.disableAll = disableAll),
                            (exports.forTag = forTag),
                            (exports.remove = remove);
                    }.call(this));
                }.call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {}));
            },
            { "./debug_logger": 8 },
        ],
        13: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 });
                var DIGITS = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
                    INV_HEX_DIGITS = {},
                    INV_DIGITS = {};
                function mul(r, e, t) {
                    for (var o = 0, n = 0; n < r.length; ++n) {
                        var I = r[n] * e + o;
                        (r[n] = I % t), (o = ~~(I / t));
                    }
                    for (; o; ) r.push(o % t), (o = ~~(o / t));
                }
                function madd(r, e, t, o) {
                    var n,
                        I,
                        f = 0;
                    for (I = 0; I < e.length; ++I) (n = ~~r[I] + e[I] * t + f), (r[I] = n % o), (f = ~~(n / o));
                    for (; f; ) (n = ~~r[I] + f), (r[I] = n % o), (f = ~~(n / o)), ++I;
                }
                function convert(r, e, t) {
                    for (var o = [0], n = [1], I = 0; I < r.length; ++I) madd(o, n, r[I], t), mul(n, e, t);
                    return o;
                }
                function mapr(r, e) {
                    for (var t = [], o = 0; o < r.length; ++o) t.push(e[r[o]]);
                    return t.reverse();
                }
                function pad(r, e) {
                    for (void 0 === e && (e = 0); r.length < e; ) r.push(0);
                    return r;
                }
                function fromBytes(r, e) {
                    return mapr(pad(convert(r.slice(0).reverse(), 256, 62), e), DIGITS).join("");
                }
                function toBytes(r, e) {
                    return pad(convert(mapr(r.split(""), INV_DIGITS), 62, 256), e).reverse();
                }
                function toHex(r, e) {
                    var t = convert(mapr(r.split(""), INV_DIGITS), 62, 16);
                    return mapr(pad(t, e), DIGITS).join("");
                }
                function fromHex(r, e) {
                    var t = convert(mapr(r.split(""), INV_HEX_DIGITS), 16, 62);
                    return mapr(pad(t, e), DIGITS).join("");
                }
                !(function () {
                    for (var r = 0, e = DIGITS.length; r < e; ++r) INV_DIGITS[DIGITS[r]] = r;
                    for (r = 0; r < 16; ++r) INV_HEX_DIGITS["0123456789abcdef"[r]] = r;
                    for (r = 0; r < 16; ++r) INV_HEX_DIGITS["0123456789ABCDEF"[r]] = r;
                })(),
                    (exports.fromBytes = fromBytes),
                    (exports.toBytes = toBytes),
                    (exports.toHex = toHex),
                    (exports.fromHex = fromHex);
            },
            {},
        ],
        14: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 });
                var BASE64_DIGITS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
                    STRING_CHUNK_SIZE = 4096,
                    INVERSE_DATA = (function () {
                        for (var e = [], r = 0; r < 256; ++r) e[r] = 255;
                        for (r = 0; r < BASE64_DIGITS.length; ++r) e[BASE64_DIGITS.charCodeAt(r)] = r;
                        return String.fromCharCode.apply(String, e);
                    })();
                function stringFromCharCode(e) {
                    if (e.length < STRING_CHUNK_SIZE) return String.fromCharCode.apply(String, e);
                    var r = 0,
                        o = [];
                    do {
                        o.push(String.fromCharCode.apply(String, e.slice(r, r + STRING_CHUNK_SIZE))), (r += STRING_CHUNK_SIZE);
                    } while (r < e.length);
                    return o.join("");
                }
                function base64Encode(e) {
                    for (var r = String(e), o = [], t = r.length, a = 0; a < t; ) {
                        var n = 255 & r.charCodeAt(a++);
                        if (a === t) {
                            o.push(BASE64_DIGITS.charAt(n >> 2), BASE64_DIGITS.charAt((3 & n) << 4), "==");
                            break;
                        }
                        var d = r.charCodeAt(a++);
                        if (a === t) {
                            o.push(BASE64_DIGITS.charAt(n >> 2), BASE64_DIGITS.charAt(((3 & n) << 4) | ((240 & d) >> 4)), BASE64_DIGITS.charAt((15 & d) << 2), "=");
                            break;
                        }
                        var S = r.charCodeAt(a++);
                        o.push(BASE64_DIGITS.charAt(n >> 2), BASE64_DIGITS.charAt(((3 & n) << 4) | ((240 & d) >> 4)), BASE64_DIGITS.charAt(((15 & d) << 2) | ((192 & S) >> 6)), BASE64_DIGITS.charAt(63 & S));
                    }
                    return o.join("");
                }
                function base64Decode(e) {
                    for (var r, o, t = String(e), a = [], n = t.length, d = 0; ; ) {
                        do {
                            r = INVERSE_DATA.charCodeAt(255 & t.charCodeAt(d++));
                        } while (255 === r && d < n);
                        do {
                            o = INVERSE_DATA.charCodeAt(255 & t.charCodeAt(d++));
                        } while (255 === o && d < n);
                        if (255 === o) break;
                        a.push(255 & ((r << 2) | (o >> 4)));
                        do {
                            r = INVERSE_DATA.charCodeAt(255 & t.charCodeAt(d++));
                        } while (255 === r && d < n);
                        if (255 === r) break;
                        a.push(255 & ((o << 4) | (r >> 2)));
                        do {
                            o = INVERSE_DATA.charCodeAt(255 & t.charCodeAt(d++));
                        } while (255 === o && d < n);
                        if (255 === o) break;
                        a.push(255 & ((r << 6) | o));
                    }
                    return stringFromCharCode(a);
                }
                var encode = base64Encode;
                exports.encode = encode;
                var decode = base64Decode;
                (exports.decode = decode),
                    "undefined" != typeof window &&
                        window.btoa &&
                        window.atob &&
                        ((exports.encode = encode = function (e) {
                            return window.btoa(e);
                        }),
                        (exports.decode = decode = function (e) {
                            return window.atob(e);
                        }));
            },
            {},
        ],
        15: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 });
                var Base62 = require("./base62");
                exports.Base62 = Base62;
                var Base64 = require("./base64");
                exports.Base64 = Base64;
            },
            { "./base62": 13, "./base64": 14 },
        ],
        16: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.AudioContent = void 0);
                var tslib_1 = require("tslib"),
                    errors_1 = require("../enums/errors"),
                    key_system_1 = require("../enums/key_system"),
                    audio_file_format_1 = require("../enums/audio_file_format"),
                    audio_file_codec_1 = require("../enums/audio_file_codec"),
                    media_format_1 = require("../enums/media_format"),
                    file_1 = require("../error/file"),
                    fragment_1 = require("../error/fragment"),
                    content_1 = require("./content"),
                    defer_1 = require("./defer"),
                    hls_1 = require("./helpers/hls"),
                    DEFAULT_FRONT_PADDING_DURATION = 1024 / 44100,
                    MINIMUM_RESOLVE_THRESHOLD = 1001;
                function isValidPsshField(e, t) {
                    return t.hasOwnProperty(e);
                }
                var AudioContent = (function (e) {
                    function t(t) {
                        var r = e.call(this, t) || this;
                        if (
                            ((r._fetching = []),
                            (r._lastResolveTimestamp = 0),
                            (r._endPaddingDuration = 0),
                            (r._frontPaddingDuration = 0),
                            (r._bypassResolve = !!r._resolvedURL),
                            (r._emitWarning = t.emitWarning || function () {}),
                            (r._mediaType = "audio"),
                            (r._noManifest = !!t.noManifest),
                            (r._preloadedManifest = t.preloadedManifest),
                            (r._resolver = t.resolver),
                            (r._segmentLength = 0),
                            (r._fileFormat = t.fileFormat),
                            r._fileFormat)
                        )
                            r._audioCodec = audio_file_codec_1.AudioFileCodec[r._fileFormat];
                        else
                            switch (r._format) {
                                case media_format_1.MediaFormat.MP3:
                                    r._audioCodec = audio_file_codec_1.AudioFileCodec[audio_file_format_1.AudioFileFormat.MP3_160];
                                    break;
                                case media_format_1.MediaFormat.MP4:
                                case media_format_1.MediaFormat.MP4_DUAL:
                                case media_format_1.MediaFormat.MP4_CBCS:
                                    r._audioCodec = audio_file_codec_1.AudioFileCodec[audio_file_format_1.AudioFileFormat.MP4_128];
                                    break;
                                default:
                                    throw new TypeError("Unknown audio format " + r._format);
                            }
                        return r;
                    }
                    return (
                        tslib_1.__extends(t, e),
                        (t.create = function (e) {
                            return new t(e);
                        }),
                        (t.prototype._calculateFragments = function (e) {
                            var t = e.offset;
                            this._initFragment = { init: !0, cacheBuffer: !this._disableCache, timeStart: 0, timeEnd: 0, audio: { buffer: null, bufferURL: null, byteEnd: t - 1, byteStart: 0, codec: this._audioCodec } };
                            for (var r = e.segments, i = e.timescale, n = r.length, a = new Array(n), o = 0, s = 0, u = 0, f = n; u < f; u++) {
                                var _ = r[u],
                                    l = _[0],
                                    d = _[1],
                                    c = d / i,
                                    m = { byteStart: t, byteEnd: t + (l - 1), codec: this._audioCodec, buffer: null, bufferURL: null },
                                    h = { init: !1, cacheBuffer: !u && !this._disableCache, timeStart: o, timeEnd: o + c, audio: m };
                                (a[u] = h), (t += l), (s += d), (o += c), Math.floor(c) > this._segmentLength && (this._segmentLength = Math.floor(c));
                            }
                            var g = a[a.length - 1].byteEnd;
                            (a[a.length - 1].isLastFragment = !0),
                                (this._fragments = a),
                                (this._duration = s / i),
                                (this._frontPaddingDuration = DEFAULT_FRONT_PADDING_DURATION),
                                (this._endPaddingDuration = (1024 - (g % 1024) + 2048) / i),
                                this._calculateUsableFragments();
                        }),
                        (t.prototype._calculateFragmentsV1 = function (e) {
                            var t = e.offset,
                                r = { codec: this._audioCodec, buffer: null, bufferURL: null, byteStart: 0, byteEnd: t - 1 };
                            this._initFragment = { init: !0, cacheBuffer: !this._disableCache, timeStart: 0, timeEnd: 0, audio: r };
                            for (var i = e.references, n = e.timescale, a = i.length, o = new Array(a), s = 0, u = 0, f = 0, _ = a; f < _; f++) {
                                var l = i[f],
                                    d = l.duration / n,
                                    c = { byteStart: t, byteEnd: t + (l.size - 1), codec: this._audioCodec, buffer: null, bufferURL: null },
                                    m = { init: !1, cacheBuffer: !f && !this._disableCache, timeStart: u, timeEnd: u + d, audio: c };
                                (o[f] = m), (t += l.size), (s += l.duration), (u += d), Math.floor(d) > this._segmentLength && (this._segmentLength = Math.floor(d));
                            }
                            (o[o.length - 1].isLastFragment = !0), (this._fragments = o), (this._duration = s / n), this._calculateUsableFragments();
                        }),
                        (t.prototype._endFetching = function (e) {
                            var t = this._fetching.indexOf(e);
                            -1 !== t && this._fetching.splice(t, 1);
                        }),
                        (t.prototype._getManifest = function (e) {
                            if (this._noManifest) return e && (e.manifestLatency = 0), Promise.resolve(null);
                            if (this._preloadedManifest) return e && (e.manifestLatency = 0), Promise.resolve(this._preloadedManifest);
                            var t = Date.now();
                            return this._resolver.getManifest(this._fileId).then(function (r) {
                                return e && (e.manifestLatency = Date.now() - t), r;
                            });
                        }),
                        (t.prototype._startFetching = function (e) {
                            this._fetching.push(e);
                        }),
                        (t.prototype.getHLSURL = function () {
                            var e = this._resolvedURL,
                                t = this._initFragment;
                            if (!e || !t) throw new file_1.FileError(errors_1.Errors.FILE_NOT_RESOLVED, "Cannot return HLS Manifest URL: File not resolved.");
                            var r = { url: e, byteStart: t.audio.byteStart, byteEnd: t.audio.byteEnd },
                                i = this._usableFragments.map(function (t) {
                                    return { url: e, duration: t.timeEnd - t.timeStart, byteStart: t.audio.byteStart, byteEnd: t.audio.byteEnd };
                                });
                            return hls_1.createProtectedManifestURL({ assetID: this._fileId, targetDuration: 10, map: r, segments: i });
                        }),
                        (t.prototype.clearCachedBuffers = function () {
                            this._headFragment && delete this._headFragment, this._initFragment && (this._initFragment.audio.buffer = null), this._fragments && this._fragments[0] && (this._fragments[0].audio.buffer = null);
                        }),
                        (t.prototype.getPlayableCodecs = function () {
                            return [this._audioCodec];
                        }),
                        (t.prototype.getFirstFragment = function () {
                            return this._usableFragments[0];
                        }),
                        (t.prototype.getHeadFragment = function () {
                            var e = this._initFragment,
                                t = this._fragments[0];
                            return (
                                this._headFragment ||
                                    (this._headFragment = {
                                        init: !0,
                                        cacheBuffer: !0,
                                        timeStart: 0,
                                        timeEnd: 0,
                                        audio: {
                                            byteStart: e.audio.byteStart,
                                            byteEnd: t.audio.byteEnd,
                                            codec: this._audioCodec,
                                            bufferURL: null,
                                            buffer: null,
                                            bandwidth: 0,
                                            sliceInto: [
                                                { fragment: e, start: 0, end: t.audio.byteStart },
                                                { fragment: t, start: t.audio.byteStart, end: void 0 },
                                            ],
                                        },
                                    }),
                                this._headFragment
                            );
                        }),
                        (t.prototype.getFragmentAfterTime = function (e) {
                            if (null === this._usableFragments) return null;
                            if (0 === e || 0.01 === e) return this._usableFragments[1];
                            for (var t = 0, r = this._usableFragments; t < r.length; t++) {
                                var i = r[t];
                                if (i.timeStart > e) return i;
                            }
                            return null;
                        }),
                        (t.prototype.getFragmentForTime = function (e) {
                            if (null === this._usableFragments) return null;
                            if (0 === e || 0.01 === e) return this._usableFragments[0];
                            for (var t = 0, r = this._usableFragments; t < r.length; t++) {
                                var i = r[t];
                                if (i.timeStart <= e && i.timeEnd >= e) return i;
                            }
                            return null;
                        }),
                        (t.prototype.getBufferForFragment = function (e) {
                            var t = this;
                            if (!e) return Promise.reject(new Error("FIXME: error type?"));
                            if (e.audio && e.audio.buffer) return Promise.resolve({ audio: e.audio });
                            if (!this._resolvedURL) return Promise.reject(new file_1.FileError(errors_1.Errors.FILE_NOT_RESOLVED, "Cannot fetch buffer: No resolved URL"));
                            var r = defer_1.defer();
                            this._startFetching(r);
                            var i,
                                n,
                                a,
                                o = e.audio.byteEnd + 1 - e.audio.byteStart,
                                s = e.audio.byteStart + "-" + e.audio.byteEnd,
                                u = e.timeStart + "-" + e.timeEnd,
                                f = this._resolvedURL;
                            return this._transport
                                .request(f, {
                                    method: "GET",
                                    responseType: "arraybuffer",
                                    headers: { Range: "bytes=" + s },
                                    timing: !0,
                                    canceller: r.promise,
                                    retry: {
                                        condition: function (e, t) {
                                            if (0 === e.status) return e.offline;
                                            var r = e.getStatusFamily();
                                            return r === t.CONNECTION_ERROR || r === t.SERVER_ERROR || (!(r !== t.SUCCESS || !e.body) && e.body.byteLength !== o);
                                        },
                                    },
                                })
                                .then(function (_) {
                                    switch ((t._endFetching(r), _.status)) {
                                        case 0:
                                            return _.offline
                                                ? Promise.reject(new fragment_1.FragmentError(errors_1.Errors.FRAGMENT_OFFLINE_REQUEST_FAILED_WITH_ZERO, "Request failed with status 0.", 0, { time_range: u, byte_range: s }))
                                                : ((i = new fragment_1.FragmentError(errors_1.Errors.FRAGMENT_ONLINE_REQUEST_FAILED_WITH_ZERO, "Request failed with status 0.", 0)),
                                                  (a = !1),
                                                  t._resolvedURL !== f ? (a = !0) : t._fallbackURLs.length && t._resolvedURL === f && ((a = !0), (t._resolvedURL = t._fallbackURLs.shift())),
                                                  (i.debug.has_fallback = a),
                                                  a ? (t._emitWarning(i, t.toLogJSON()), t.getBufferForFragment(e)) : Promise.reject(i));
                                        case 200:
                                        case 206:
                                            if (!_.body)
                                                return Promise.reject(new fragment_1.FragmentError(errors_1.Errors.FRAGMENT_REQUEST_EMPTY_RESPONSE, "Empty response for successful buffer.", _.status, { time_range: u, byte_range: s }));
                                            if ((n = _.body).byteLength !== o)
                                                return Promise.reject(
                                                    new fragment_1.FragmentError(errors_1.Errors.FRAGMENT_REQUEST_UNEXPECTED_LENGTH, "Received buffer of unexpected length.", _.status, {
                                                        time_range: u,
                                                        byte_range: s,
                                                        received_length: n.byteLength,
                                                        expected_length: o,
                                                    })
                                                );
                                            if (e.cacheBuffer && n && n.byteLength) {
                                                (e.audio.bufferURL = f), (e.audio.buffer = n);
                                                var l = e.audio.sliceInto;
                                                if (l && l.length)
                                                    for (var d = 0, c = l.length; d < c; d++) {
                                                        var m = l[d];
                                                        m.fragment && m.fragment.cacheBuffer && ((m.fragment.audio.bufferURL = f), (m.fragment.audio.buffer = n.slice(m.start, m.end)));
                                                    }
                                            }
                                            return (
                                                t._abrManager.sample(n.byteLength, _.timing.completed),
                                                Promise.resolve({ audio: { bufferURL: f, byteStart: e.audio.byteStart, byteEnd: e.audio.byteEnd, buffer: n, codec: t._audioCodec, bandwidth: (8e3 * n.byteLength) / _.timing.completed } })
                                            );
                                        case 403:
                                            return t.resolve().then(function () {
                                                return t.getBufferForFragment(e);
                                            });
                                        default:
                                            return (
                                                (a = !1),
                                                t._resolvedURL !== f ? (a = !0) : t._fallbackURLs.length && t._resolvedURL === f && ((a = !0), (t._resolvedURL = t._fallbackURLs.shift())),
                                                a
                                                    ? t.getBufferForFragment(e)
                                                    : Promise.reject(
                                                          new fragment_1.FragmentError(errors_1.Errors.FRAGMENT_REQUEST_FAILED_WITH_STATUS, "Buffer request failed with status " + _.status, _.status, { time_range: u, byte_range: s })
                                                      )
                                            );
                                    }
                                });
                        }),
                        (t.prototype.resolve = function (e) {
                            var t = this;
                            if (this._bypassResolve) return e && (e.resolveLatency = 0), Promise.resolve({ uri: this._resolvedURL, uris: [], protection: this._preloadedManifest || !this._noManifest ? "cenc" : void 0 });
                            clearTimeout(this._lastResolveToken);
                            var r = function () {
                                    return (
                                        (t._lastResolveTimestamp = Date.now()),
                                        t._resolver.getCDNURL(t._fileId, t._fileFormat).then(function (r) {
                                            return e && (e.resolveLatency = Date.now() - t._lastResolveTimestamp), r;
                                        })
                                    );
                                },
                                i = Date.now() - this._lastResolveTimestamp;
                            return (i < MINIMUM_RESOLVE_THRESHOLD
                                ? new Promise(function (e, n) {
                                      t._lastResolveToken = setTimeout(function () {
                                          r().then(e, n);
                                      }, MINIMUM_RESOLVE_THRESHOLD - i);
                                  })
                                : r()
                            )
                                .then(function (e) {
                                    t._resolvedURLs = [];
                                    for (var r = 0, i = e.uris.length; r < i; r++) {
                                        var n = e.uris[r].split("?")[0];
                                        t._resolvedURLs.push(n);
                                    }
                                    return (t._fallbackURLs = e.uris), (t._resolvedURL = t._fallbackURLs.shift()), e;
                                })
                                .catch(function (e) {
                                    return e && (e.track = t.toLogJSON()), Promise.reject(e);
                                });
                        }),
                        (t.prototype.load = function (e) {
                            var t = this;
                            return (
                                void 0 === e && (e = { resolveLatency: 0, manifestLatency: 0 }),
                                this._loaded
                                    ? ((e.resolveLatency = 0), (e.manifestLatency = 0), Promise.resolve(this))
                                    : Promise.all([this.resolve(e), this._getManifest(e)]).then(function (e) {
                                          var r,
                                              i,
                                              n = e[0],
                                              a = e[1];
                                          if (((t._loaded = !0), !n.protection || !a)) return t;
                                          if (t._keySystem === key_system_1.KeySystem.INVALID_SPOTIFY_KEY) return (t._protection = a.protection || "cenc"), (t._psshBox = new Uint8Array(0)), t;
                                          var o = t._keySystemSettings.pssh_field.audio,
                                              s = isValidPsshField(o, a) ? a[o] : null;
                                          if ((!s && "pssh_widevine" === o && "pssh" in a && (s = null !== (r = a.pssh) && void 0 !== r ? r : null), !s))
                                              return ((i = new file_1.FileError(errors_1.Errors.FILE_FORMAT_NOT_SUPPORTED, "KeySystem does not support the file format.")).track = t.toLogJSON()), Promise.reject(i);
                                          if (((t._protection = a.protection || "cenc"), (t._psshBox = t._parsePSSHBox(s)), "segments" in a && a.segments)) t._calculateFragments(a);
                                          else {
                                              if (!("references" in a && a.references)) return ((i = new file_1.FileError(errors_1.Errors.FILE_MALFORMED_SEEKTABLE, "Malformed seektable.")).track = t.toLogJSON()), Promise.reject(i);
                                              t._calculateFragmentsV1(a);
                                          }
                                          return t;
                                      })
                            );
                        }),
                        (t.prototype.abort = function () {
                            this._fetching.forEach(function (e) {
                                "function" == typeof e.resolve && e.resolve(!0);
                            }),
                                (this._fetching = []);
                        }),
                        t
                    );
                })(content_1.Content);
                exports.AudioContent = AudioContent;
            },
            {
                "../enums/audio_file_codec": 42,
                "../enums/audio_file_format": 43,
                "../enums/errors": 44,
                "../enums/key_system": 46,
                "../enums/media_format": 48,
                "../error/file": 57,
                "../error/fragment": 58,
                "./content": 20,
                "./defer": 21,
                "./helpers/hls": 32,
                tslib: 190,
            },
        ],
        17: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.BandwidthEstimator = void 0);
                var moving_average_1 = require("./moving_average"),
                    UNKNOWN_BANDWIDTH_DEFAULT = 4e5,
                    MIN_SAMPLE_THRESHOLD = 16e3,
                    MIN_TOTAL_THRESHOLD = 128e3,
                    BandwidthEstimator = (function () {
                        function t(t) {
                            void 0 === t && (t = UNKNOWN_BANDWIDTH_DEFAULT),
                                (this._totalBytes = 0),
                                (this._overrideBitrate = 0),
                                (this._currentBandwidth = t),
                                (this._short = new moving_average_1.MovingAverage(2)),
                                (this._long = new moving_average_1.MovingAverage(5)),
                                this._init();
                        }
                        return (
                            (t.prototype._init = function () {
                                if ("undefined" != typeof navigator) {
                                    var t = navigator;
                                    t.connection &&
                                        t.connection.downlink &&
                                        ((this._currentBandwidth = 1e6 * t.connection.downlink), (this._onConnectionChange = this._onConnectionChange.bind(this)), t.connection.addEventListener("change", this._onConnectionChange));
                                }
                            }),
                            (t.prototype._onConnectionChange = function (t) {
                                var e = t.target.downlink || 0;
                                this._setBandwidth(e);
                            }),
                            (t.prototype._setBandwidth = function (t) {
                                this._currentBandwidth = 1e6 * t;
                            }),
                            (t.prototype.getBandwidthEstimate = function () {
                                if (this._overrideBitrate) return this._overrideBitrate;
                                if (this._totalBytes < MIN_TOTAL_THRESHOLD) return this._currentBandwidth;
                                var t = this._short.getEstimate(),
                                    e = this._long.getEstimate();
                                return Math.min(t, e);
                            }),
                            (t.prototype.sample = function (t, e) {
                                if (!(t < MIN_SAMPLE_THRESHOLD)) {
                                    var n = e / 1e3,
                                        i = (8 * t) / n;
                                    (this._totalBytes += t), this._short.sample(n, i), this._long.sample(n, i);
                                }
                            }),
                            (t.prototype.overrideBitrate = function (t) {
                                this._overrideBitrate = t <= 0 ? 0 : t;
                            }),
                            t
                        );
                    })();
                exports.BandwidthEstimator = BandwidthEstimator;
            },
            { "./moving_average": 35 },
        ],
        18: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.ContentBuffer = void 0);
                var RequiredBufferedTime,
                    tslib_1 = require("tslib"),
                    emitter_1 = require("@spotify-internal/emitter"),
                    debug_tools_1 = require("@js-sdk/debug-tools"),
                    event_1 = require("../enums/event"),
                    defer_1 = require("./defer"),
                    debugLogger = debug_tools_1.logging.forTag("playback.content_buffer"),
                    STALL_THRESHOLD = 9e3;
                function _secToMS(e) {
                    return Math.ceil(1e3 * e);
                }
                function _getBufferedFor(e, t) {
                    var r = e.sourceBuffers && e.sourceBuffers.length > 0 && e.sourceBuffers[0].buffered;
                    if (r) for (var i = void 0, o = void 0, n = 0; n < r.length; n++) if (((i = r.start(n)), (o = r.end(n)), i <= t && t <= o)) return { start: i, end: o };
                    return null;
                }
                function _ignoreEmittedErrors() {}
                !(function (e) {
                    (e[(e.AUDIO = 10)] = "AUDIO"), (e[(e.VIDEO = 20)] = "VIDEO");
                })(RequiredBufferedTime || (RequiredBufferedTime = {}));
                var ContentBuffer = (function (e) {
                    function t(t, r, i) {
                        void 0 === r && (r = []), void 0 === i && (i = {});
                        var o = e.call(this) || this;
                        return (
                            (o._mediaSource = null),
                            (o._sourceBuffers = {}),
                            (o._appendingFragments = []),
                            (o._updateQueue = []),
                            (o._codecs = []),
                            (o._playId = 0),
                            (o._lastBufferClearTime = Date.now()),
                            (o._codecs = r),
                            (o._tracker = t),
                            (o._disableBufferAbort = !!i.disableBufferAbort),
                            (o._onSourceOpen = o._onSourceOpen.bind(o)),
                            (o._onSourceClose = o._onSourceClose.bind(o)),
                            (o.dequeueUpdates = o.dequeueUpdates.bind(o)),
                            i.noInit || o._init(),
                            o
                        );
                    }
                    return (
                        tslib_1.__extends(t, e),
                        (t.create = function (e, r, i) {
                            return void 0 === r && (r = []), void 0 === i && (i = {}), new t(e, r, i);
                        }),
                        (t.prototype._init = function () {
                            (this._mediaSource = new MediaSource()),
                                this._mediaSource.addEventListener(event_1.Event.MEDIA_SOURCE_OPEN, this._onSourceOpen),
                                this._mediaSource.addEventListener(event_1.Event.MEDIA_SOURCE_CLOSE, this._onSourceClose),
                                (this._sourceBuffers = {});
                        }),
                        (t.prototype._onSourceOpen = function () {
                            debugLogger.info("MediaSource opened.");
                            var e = this._mediaSource;
                            if (e && 0 === e.sourceBuffers.length && "open" === e.readyState) {
                                debugLogger.info("Creating source buffers for codecs", this._codecs);
                                for (var t = 0, r = this._codecs.length; t < r; t++) this._addSourceBuffer(this._codecs[t]);
                            }
                            this.dequeueUpdates(), this.emit(event_1.Event.BUFFER_SOURCE_OPEN, null);
                        }),
                        (t.prototype._onSourceClose = function () {
                            debugLogger.info("MediaSource closed."), this._destroySourceBuffers(), this.emit(event_1.Event.BUFFER_SOURCE_CLOSE, null);
                        }),
                        (t.prototype._removeAppendingFragment = function (e) {
                            if (e) {
                                var t = this._appendingFragments,
                                    r = t.indexOf(e);
                                -1 !== r && t.splice(r, 1);
                            }
                        }),
                        (t.prototype._addSourceBuffer = function (e) {
                            if (this._mediaSource) {
                                var t = this._mediaSource.addSourceBuffer(e);
                                t.addEventListener(event_1.Event.SOURCE_BUFFER_UPDATE_END, this.dequeueUpdates), (this._sourceBuffers[e] = t);
                            }
                        }),
                        (t.prototype._trackBufferingProgress = function (e) {
                            e.audio && e.audio.buffer && this._tracker.trackBytesDownloaded(e.audio.buffer.byteLength), e.video && e.video.buffer && this._tracker.trackBytesDownloaded(e.video.buffer.byteLength);
                        }),
                        (t.prototype._checkStalling = function (e, t, r) {
                            var i = t.video ? t.video.byteStart : t.audio.byteStart;
                            e > STALL_THRESHOLD && this.emit(event_1.Event.BUFFER_STALLED, { byteStart: i, timeStart: _secToMS(t.timeStart), stallAmount: e - STALL_THRESHOLD, didTimeout: r });
                        }),
                        (t.prototype._appendBufferData = function (e, t, r, i) {
                            void 0 === i && (i = Date.now()), this.emit(event_1.Event.BUFFERING_END, null);
                            var o = [];
                            if (e.audio) {
                                var n = defer_1.defer();
                                this.tryUpdate({ playId: r, timestamp: i, fragment: t, type: "append", buffer: e.audio.buffer, codec: e.audio.codec, init: !!t.init, resolve: n.resolve }),
                                    o.push(n.promise),
                                    null !== e.audio.bandwidth && this._tracker.trackBufferURL(e.audio.bufferURL || "", { bandwidth: e.audio.bandwidth || 0 });
                            }
                            if (e.video) {
                                var a = defer_1.defer();
                                this.tryUpdate({ playId: r, timestamp: i, fragment: t, type: "append", buffer: e.video.buffer, codec: e.video.codec, init: !!t.init, resolve: a.resolve }),
                                    o.push(a.promise),
                                    null !== e.video.bandwidth && this._tracker.trackBufferURL(e.video.bufferURL || "", { bandwidth: e.video.bandwidth || 0 });
                            }
                            return Promise.all(o);
                        }),
                        (t.prototype._appendUpdate = function (e) {
                            var t = this,
                                r = this._sourceBuffers[e.codec];
                            if (!r || r.updating) this._updateQueue.push(e);
                            else {
                                this._removeAppendingFragment(e.fragment);
                                try {
                                    r.appendBuffer(e.buffer);
                                } catch (r) {
                                    if (
                                        ("QuotaExceededError" === r.name && this.emitSync(event_1.Event.BUFFER_QUOTA_EXCEEDED, null),
                                        debugLogger.warn("Failed to append buffer", r),
                                        Promise.resolve()
                                            .then(this.dequeueUpdates)
                                            .then(function () {
                                                e.init && t._updateQueue.push(e);
                                            }),
                                        e.init)
                                    )
                                        return;
                                }
                                e.resolve && e.resolve(!0);
                            }
                        }),
                        (t.prototype._abortUpdate = function (e) {
                            "fragment" in e && this._removeAppendingFragment(e.fragment), e.resolve && e.resolve(!1), Promise.resolve().then(this.dequeueUpdates);
                        }),
                        (t.prototype._processUpdate = function (e) {
                            "end" === e.type ? this._endUpdate(e) : "duration" === e.type ? this._durationUpdate(e) : "append" === e.type && this._appendUpdate(e);
                        }),
                        (t.prototype._isUpdating = function () {
                            if (!this._mediaSource) return !1;
                            for (var e = this._mediaSource.sourceBuffers, t = 0, r = e.length; t < r; t++) {
                                var i = e[t];
                                if (i && i.updating) return !0;
                            }
                            return !1;
                        }),
                        (t.prototype._endUpdate = function (e) {
                            this._isUpdating() ? this._updateQueue.push(e) : this._mediaSource && "open" === this._mediaSource.readyState && (this._mediaSource.endOfStream(), e.resolve && e.resolve(!0));
                        }),
                        (t.prototype._durationUpdate = function (e) {
                            this._isUpdating() ? this._updateQueue.push(e) : (this._mediaSource && (this._mediaSource.duration = e.duration), e.resolve && e.resolve(!0));
                        }),
                        (t.prototype._destroySourceBuffers = function () {
                            var e = this._mediaSource;
                            if (e) {
                                var t = e.sourceBuffers;
                                if (t.length)
                                    for (var r = 0, i = t.length; r < i; r++) {
                                        var o = t[r];
                                        o.removeEventListener("updateend", this.dequeueUpdates);
                                        try {
                                            e.removeSourceBuffer(o), debugLogger.info("Removed source buffer");
                                        } catch (e) {
                                            debugLogger.warn("Failed to remove sourcebuffer", e);
                                        }
                                    }
                                this._sourceBuffers = {};
                            }
                        }),
                        (t.prototype._endOfStream = function () {
                            this._mediaSource && "ended" !== this._mediaSource.readyState && this.tryUpdate({ playId: this._playId, timestamp: Date.now(), type: "end" });
                        }),
                        (t.prototype.dequeueUpdates = function () {
                            var e = this._updateQueue.shift();
                            e && this.tryUpdate(e);
                        }),
                        (t.prototype.appendFragment = function (e, t, r) {
                            var i = this;
                            if ((void 0 === r && (r = !1), -1 !== this._appendingFragments.indexOf(t))) return Promise.resolve([]);
                            this._appendingFragments.push(t), this.emit(event_1.Event.BUFFERING_START, null);
                            var o = Date.now(),
                                n = this._playId,
                                a = e.toLogJSON();
                            return e
                                .getBufferForFragment(t)
                                .then(function (e) {
                                    return (
                                        i._trackBufferingProgress(e), n !== i._playId ? (debugLogger.info("Append fragment dropped: playId has changed."), []) : (r || i._checkStalling(Date.now() - o, t, !1), i._appendBufferData(e, t, n, o))
                                    );
                                })
                                .catch(function (e) {
                                    return i._removeAppendingFragment(t), r || i._checkStalling(Date.now() - o, t, !0), i.emit(event_1.Event.BUFFER_APPEND_ERROR, { error: e, canPlayNext: !0, track: a }), Promise.reject(e);
                                });
                        }),
                        (t.prototype.abort = function (e) {
                            if ((void 0 === e && (e = !1), this._disableBufferAbort)) debugLogger.info("Buffer abort skipped; action disabled.");
                            else {
                                if (((this._lastBufferClearTime = Date.now()), this._mediaSource))
                                    for (var t = this._mediaSource.sourceBuffers, r = 0, i = t.length; r < i; r++)
                                        if ("open" === this._mediaSource.readyState) {
                                            var o = t[r];
                                            try {
                                                o.abort();
                                                var n = o.buffered;
                                                if (e && n.length) {
                                                    var a = n.start(0),
                                                        d = n.end(n.length - 1);
                                                    o.remove(a, d), debugLogger.info("Cleared buffer range", a, d);
                                                }
                                            } catch (e) {
                                                debugLogger.warn("ContentBuffer.clear failed.", e);
                                            }
                                        }
                                this._appendingFragments = [];
                            }
                        }),
                        (t.prototype.getMediaSource = function () {
                            return this._mediaSource;
                        }),
                        (t.prototype.tryUpdate = function (e) {
                            if (e) {
                                if (e.playId !== this._playId) return debugLogger.info("Try update dropped: playId has changed"), void this._abortUpdate(e);
                                if (e.timestamp < this._lastBufferClearTime) return debugLogger.info("Try update dropped: update is older than the last clear"), void this._abortUpdate(e);
                                var t = this._mediaSource;
                                t && "open" !== t.readyState && "ended" !== t.readyState ? this._updateQueue.push(e) : this._processUpdate(e);
                            }
                        }),
                        (t.prototype.destroy = function () {
                            var e = this._mediaSource;
                            e &&
                                (debugLogger.info("Source destroyed"),
                                e.removeEventListener("sourceopen", this._onSourceOpen),
                                e.removeEventListener("sourceclose", this._onSourceClose),
                                this._destroySourceBuffers(),
                                (this._mediaSource = null));
                        }),
                        (t.prototype.progress = function (e, t, r) {
                            var i = this._mediaSource;
                            if (i) {
                                var o = "video" === e.getMediaType() ? RequiredBufferedTime.VIDEO : RequiredBufferedTime.AUDIO;
                                if ("open" === i.readyState || "ended" === i.readyState) {
                                    var n = void 0,
                                        a = _getBufferedFor(i, r);
                                    if (a) {
                                        if (r + o > i.duration) return void ("open" === i.readyState && this._endOfStream());
                                        var d = e.getFragmentLength();
                                        Math.ceil(r / d) > Math.floor(a.end / d) && (n = e.getFragmentForTime(r)) && this.appendFragment(e, n, t).catch(_ignoreEmittedErrors);
                                        var u = Math.floor(a.end - r);
                                        if (u > o) return;
                                        var s = Math.min(e.getFragmentLength(), o - u);
                                        if (s < 1) return;
                                        var f = Math.floor(a.end + s);
                                        (n = e.getFragmentForTime(f)) ? this.appendFragment(e, n, t).catch(_ignoreEmittedErrors) : this._endOfStream();
                                    } else if ((n = e.getFragmentForTime(r))) {
                                        if ((this.appendFragment(e, n, t).catch(_ignoreEmittedErrors), n.timeEnd < r + 5)) {
                                            var p = e.getFragmentAfterTime(n.timeStart);
                                            p ? this.appendFragment(e, p, t).catch(_ignoreEmittedErrors) : this._endOfStream();
                                        }
                                    } else this._endOfStream();
                                }
                            }
                        }),
                        (t.prototype.recreate = function (e) {
                            this.abort(), this.destroy(), (this._codecs = e), this._init();
                        }),
                        (t.prototype.setDuration = function (e) {
                            this.tryUpdate({ playId: this._playId, timestamp: Date.now(), type: "duration", duration: e });
                        }),
                        (t.prototype.setPlayId = function (e) {
                            this._playId = e;
                        }),
                        t
                    );
                })(emitter_1.EventEmitter);
                exports.ContentBuffer = ContentBuffer;
            },
            { "../enums/event": 45, "./defer": 21, "@js-sdk/debug-tools": 11, "@spotify-internal/emitter": 71, tslib: 190 },
        ],
        19: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.CDNURLTracker = void 0);
                var linkedlist_1 = require("@spotify-internal/linkedlist"),
                    CDNURLTracker = (function () {
                        function t() {
                            (this._version = "1.0.0"), (this._list = new linkedlist_1.LinkedList()), (this._map = {});
                        }
                        return (
                            (t.prototype.clear = function () {
                                (this._list = new linkedlist_1.LinkedList()), (this._map = {});
                            }),
                            (t.prototype.track = function (t, e) {
                                var i = this._map[t];
                                i || ((i = new linkedlist_1.ListNode({ url: t, segments: 0, bandwidths: [] })), this._list.append(i), (this._map[t] = i));
                                var s = i.value;
                                s && ((s.segments += 1), s.bandwidths.push(e.bandwidth));
                            }),
                            (t.prototype.toJSON = function () {
                                for (var t = [], e = this._list.first; e; ) {
                                    var i = e.value;
                                    if (i) {
                                        for (var s = i.bandwidths, r = 0, n = s.length; n--; ) r += s[n];
                                        t.push({ url: i.url, segments: i.segments, avg_bw: parseFloat((r / s.length).toFixed(7)) }), (e = e.next);
                                    }
                                }
                                return { version: this._version, urls: t };
                            }),
                            t
                        );
                    })();
                exports.CDNURLTracker = CDNURLTracker;
            },
            { "@spotify-internal/linkedlist": 137 },
        ],
        20: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.Content = void 0);
                var encoding_1 = require("@js-sdk/encoding"),
                    errors_1 = require("../enums/errors"),
                    file_1 = require("../error/file"),
                    keysystem_setting_1 = require("./eme/keysystem_setting");
                function _msToSec(t) {
                    return t / 1e3;
                }
                var Content = (function () {
                    function t(t) {
                        (this._fallbackURLs = []),
                            (this._fragments = []),
                            (this._usableFragments = []),
                            (this._loaded = !1),
                            (this._mediaType = "audio"),
                            (this._resolvedURLs = []),
                            (this._segmentLength = 0),
                            (this._duration = 0),
                            (this._stopPosition = null),
                            (this._abrManager = t.abrManager),
                            (this._disableCache = t.disableCache),
                            (this._fileId = t.fileId),
                            (this._format = t.format),
                            (this._isAd = t.isAd || !1),
                            (this._keySystem = t.keySystem),
                            (this._keySystemSettings = keysystem_setting_1.KeySystemSetting[this._keySystem]),
                            (this._licenseEndpoint = t.licenseEndpoint),
                            (this._logData = t.logData || { displayTrack: "", playbackId: "" }),
                            (this._resolver = t.resolver),
                            (this._resolvedURL = t.resolvedURL),
                            (this._transport = t.transport),
                            (this._uri = t.uri);
                    }
                    return (
                        (t.prototype._parsePSSHBox = function (t) {
                            for (var e = encoding_1.Base64.decode(t), r = new Uint8Array(e.length), s = 0, i = e.length; s < i; s++) r[s] = e.charCodeAt(s);
                            return r;
                        }),
                        (t.prototype._parseAssetID = function (t) {
                            for (var e = encoding_1.Base64.decode(t), r = new Array(e.length), s = 0, i = e.length; s < i; s++) {
                                var o = e.charCodeAt(s).toString(16);
                                r[s] = 1 === o.length ? "0" + o : o;
                            }
                            return r.join("");
                        }),
                        (t.prototype._calculateUsableFragments = function () {
                            if (this._stopPosition) {
                                for (var t = [], e = this._fragments, r = _msToSec(this._stopPosition), s = 0, i = e; s < i.length; s++) {
                                    var o = i[s];
                                    if (!(o.timeStart <= r)) break;
                                    t.push(o);
                                }
                                this._usableFragments = t;
                            } else this._usableFragments = this._fragments;
                        }),
                        (t.prototype.getCalculatedDuration = function () {
                            return this._stopPosition ? Math.min(this._duration, _msToSec(this._stopPosition)) : this._duration;
                        }),
                        (t.prototype.setStopPosition = function (t) {
                            (this._stopPosition = t), this._stopPosition ? this._fragments.length && this._calculateUsableFragments() : (this._usableFragments = this._fragments);
                        }),
                        (t.prototype.getFileId = function () {
                            return this._fileId;
                        }),
                        (t.prototype.getFormat = function () {
                            return this._format || "";
                        }),
                        (t.prototype.getFragmentLength = function () {
                            return this._segmentLength;
                        }),
                        (t.prototype.getInitFragment = function () {
                            return this._initFragment;
                        }),
                        (t.prototype.getInitParams = function () {
                            var t = { keySystem: this._keySystem, initDataType: this._protection, initData: this._psshBox, licenseServer: null };
                            return Promise.resolve(t);
                        }),
                        (t.prototype.getKeySystem = function () {
                            return this._keySystem;
                        }),
                        (t.prototype.getLicenseEndpoint = function () {
                            return this._licenseEndpoint;
                        }),
                        (t.prototype.getLogData = function () {
                            return this._logData || {};
                        }),
                        (t.prototype.getMediaType = function () {
                            return this._mediaType;
                        }),
                        (t.prototype.getResolvedURL = function () {
                            return this._resolvedURL;
                        }),
                        (t.prototype.getResolvedURLs = function () {
                            return this._resolvedURLs;
                        }),
                        (t.prototype.getHLSURL = function () {
                            throw new file_1.FileError(errors_1.Errors.FILE_NOT_RESOLVED, "Cannot return HLS Manifest URL: File not resolved.");
                        }),
                        (t.prototype.getURI = function () {
                            return this._uri;
                        }),
                        (t.prototype.isAd = function () {
                            return this._isAd;
                        }),
                        (t.prototype.isProtected = function () {
                            return !!this._protection && !!this._psshBox;
                        }),
                        (t.prototype.setLogData = function (t) {
                            return (this._logData = t), this;
                        }),
                        (t.prototype.toLogJSON = function () {
                            return { uri: this._uri, fileId: this._fileId, format: this._format || "", resolved_url: this._resolvedURL };
                        }),
                        t
                    );
                })();
                exports.Content = Content;
            },
            { "../enums/errors": 44, "../error/file": 57, "./eme/keysystem_setting": 23, "@js-sdk/encoding": 15 },
        ],
        21: [
            function (require, module, exports) {
                "use strict";
                function defer() {
                    var e, r;
                    return {
                        promise: new Promise(function (o, t) {
                            (e = o), (r = t);
                        }),
                        resolve: e,
                        reject: r,
                    };
                }
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.defer = void 0), (exports.defer = defer);
            },
            {},
        ],
        22: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }),
                    (exports.EMEConfigs = void 0),
                    (exports.EMEConfigs = [
                        {
                            label: "video-sw-decode",
                            initDataTypes: ["cenc"],
                            audioCapabilities: [
                                { contentType: 'audio/webm; codecs="opus"', robustness: "SW_SECURE_CRYPTO" },
                                { contentType: 'audio/mp4; codecs="flac"', robustness: "SW_SECURE_CRYPTO" },
                                { contentType: 'audio/mp4; codecs="mp4a.40.2"', robustness: "SW_SECURE_CRYPTO" },
                            ],
                            videoCapabilities: [
                                { contentType: 'video/webm; codecs="vp9"', robustness: "SW_SECURE_DECODE" },
                                { contentType: 'video/webm; codecs="vp8"', robustness: "SW_SECURE_DECODE" },
                                { contentType: 'video/mp4; codecs="avc1.4d401f"', robustness: "SW_SECURE_DECODE" },
                                { contentType: 'video/mp2t; codecs="avc1.4d401f"', robustness: "SW_SECURE_DECODE" },
                            ],
                            distinctiveIdentifier: "optional",
                            persistentState: "optional",
                            sessionTypes: ["temporary"],
                        },
                        {
                            label: "video-sw-crypto",
                            initDataTypes: ["cenc"],
                            audioCapabilities: [
                                { contentType: 'audio/webm; codecs="opus"', robustness: "SW_SECURE_CRYPTO" },
                                { contentType: 'audio/mp4; codecs="flac"', robustness: "SW_SECURE_CRYPTO" },
                                { contentType: 'audio/mp4; codecs="mp4a.40.2"', robustness: "SW_SECURE_CRYPTO" },
                            ],
                            videoCapabilities: [
                                { contentType: 'video/webm; codecs="vp9"', robustness: "SW_SECURE_CRYPTO" },
                                { contentType: 'video/webm; codecs="vp8"', robustness: "SW_SECURE_CRYPTO" },
                                { contentType: 'video/mp4; codecs="avc1.4d401f"', robustness: "SW_SECURE_CRYPTO" },
                                { contentType: 'video/mp2t; codecs="avc1.4d401f"', robustness: "SW_SECURE_CRYPTO" },
                            ],
                            distinctiveIdentifier: "optional",
                            persistentState: "optional",
                            sessionTypes: ["temporary"],
                        },
                        {
                            label: "video-no-robustness",
                            initDataTypes: ["cenc"],
                            audioCapabilities: [
                                { contentType: 'audio/webm; codecs="opus"', robustness: "" },
                                { contentType: 'audio/mp4; codecs="flac"', robustness: "" },
                                { contentType: 'audio/mp4; codecs="mp4a.40.2"', robustness: "" },
                            ],
                            videoCapabilities: [
                                { contentType: 'video/webm; codecs="vp9"', robustness: "" },
                                { contentType: 'video/webm; codecs="vp8"', robustness: "" },
                                { contentType: 'video/mp4; codecs="avc1.4d401f"', robustness: "" },
                                { contentType: 'video/mp2t; codecs="avc1.4d401f"', robustness: "" },
                            ],
                            distinctiveIdentifier: "optional",
                            persistentState: "optional",
                            sessionTypes: ["temporary"],
                        },
                        {
                            label: "audio-flac-sw-crypto",
                            initDataTypes: ["cenc"],
                            audioCapabilities: [
                                { contentType: 'audio/mp4; codecs="flac"', robustness: "SW_SECURE_CRYPTO" },
                                { contentType: 'audio/mp4; codecs="mp4a.40.2"', robustness: "SW_SECURE_CRYPTO" },
                            ],
                            videoCapabilities: [],
                            distinctiveIdentifier: "optional",
                            persistentState: "optional",
                            sessionTypes: ["temporary"],
                        },
                        {
                            label: "audio-flac-no-robustness",
                            initDataTypes: ["cenc"],
                            audioCapabilities: [
                                { contentType: 'audio/mp4; codecs="flac"', robustness: "" },
                                { contentType: 'audio/mp4; codecs="mp4a.40.2"', robustness: "" },
                            ],
                            videoCapabilities: [],
                            distinctiveIdentifier: "optional",
                            persistentState: "optional",
                            sessionTypes: ["temporary"],
                        },
                        {
                            label: "audio-sw-crypto",
                            initDataTypes: ["cenc"],
                            audioCapabilities: [{ contentType: 'audio/mp4; codecs="mp4a.40.2"', robustness: "SW_SECURE_CRYPTO" }],
                            videoCapabilities: [],
                            distinctiveIdentifier: "optional",
                            persistentState: "optional",
                            sessionTypes: ["temporary"],
                        },
                        {
                            label: "audio-no-robustness",
                            initDataTypes: ["cenc"],
                            audioCapabilities: [{ contentType: 'audio/mp4; codecs="mp4a.40.2"', robustness: "" }],
                            videoCapabilities: [],
                            distinctiveIdentifier: "optional",
                            persistentState: "optional",
                            sessionTypes: ["temporary"],
                        },
                    ]);
            },
            {},
        ],
        23: [
            function (require, module, exports) {
                "use strict";
                var _a;
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.KeySystemSetting = void 0);
                var key_system_1 = require("../../enums/key_system");
                exports.KeySystemSetting =
                    (((_a = {})[key_system_1.KeySystem.WIDEVINE] = { commonName: "widevine", licenseServer: "https://@webgate/widevine-license", withCertificate: !0, pssh_field: { audio: "pssh_widevine", video: "encryption_data" } }),
                    (_a[key_system_1.KeySystem.PLAYREADY] = { commonName: "playready", licenseServer: "https://@webgate/playready-license", withCertificate: !1, pssh_field: { audio: "pssh_playready", video: "encryption_data" } }),
                    (_a[key_system_1.KeySystem.PLAYREADY_HARDWARE] = { commonName: "playready", licenseServer: "https://@webgate/playready-license", withCertificate: !1, pssh_field: { audio: "pssh_playready", video: "encryption_data" } }),
                    (_a[key_system_1.KeySystem.FAIRPLAY] = { commonName: "fairplay", licenseServer: "https://@webgate/fairplay-license", withCertificate: !0, pssh_field: { audio: "pssh_fairplay", video: "asset_id" } }),
                    (_a[key_system_1.KeySystem.INVALID_SPOTIFY_KEY] = { commonName: "spotify-invalid", licenseServer: "https://@webgate", withCertificate: !1, pssh_field: { audio: "pssh_invalid", video: "encryption_data" } }),
                    _a);
            },
            { "../../enums/key_system": 46 },
        ],
        24: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.EMEManager = void 0);
                var tslib_1 = require("tslib"),
                    emitter_1 = require("@spotify-internal/emitter"),
                    debug_tools_1 = require("@js-sdk/debug-tools"),
                    event_1 = require("../../enums/event"),
                    errors_1 = require("../../enums/errors"),
                    key_system_1 = require("../../enums/key_system"),
                    eme_1 = require("../../error/eme"),
                    capping_1 = require("../../error/capping"),
                    defer_1 = require("../defer"),
                    polyfills_1 = require("./polyfills"),
                    keysystem_setting_1 = require("./keysystem_setting"),
                    configs_1 = require("./configs"),
                    eme_2 = require("../helpers/eme"),
                    CODEC_EXP = /([^;]+)(?:;\s?codecs="(.*)")?/,
                    debugLogger = debug_tools_1.logging.forTag("playback.eme_manager"),
                    LabelString = { EMPTY: "-no-robustness", SW_CRYPTO: "-sw-crypto", SW_DECODE: "-sw-decode", HW_CRYPTO: "-hw-crypto", HW_DECODE: "-hw-decode", HW_ALL: "-hw-all" },
                    UNAUTHENTICATED_CERT_BASE = "https://spclient.wg.spotify.com";
                function createConfigFilter(e) {
                    var r = ["--ensure-no-match--"];
                    if (e && e.length) for (var t = e.length; t--; ) LabelString.hasOwnProperty(e[t]) && r.push(LabelString[e[t]]);
                    return new RegExp("(" + r.join("|") + ")$");
                }
                function filterMediaCapabilities(e, r) {
                    for (var t, s = [], i = new RegExp('codecs="(' + r.join("|") + ')"'), n = 0, a = e; n < a.length; n++) {
                        var o = a[n];
                        i.test(null !== (t = o.contentType) && void 0 !== t ? t : "") || s.push(o);
                    }
                    return s.length ? s : null;
                }
                function filterMediaCodecs(e, r) {
                    var t,
                        s,
                        i,
                        n,
                        a = r.audio,
                        o = r.video;
                    if (!(null == a ? void 0 : a.length) && !(null == o ? void 0 : o.length)) return e;
                    var _ = e.audioCapabilities,
                        u = e.videoCapabilities;
                    return (null == a ? void 0 : a.length) && (null === (t = e.audioCapabilities) || void 0 === t ? void 0 : t.length) && !(_ = null !== (s = filterMediaCapabilities(e.audioCapabilities, a)) && void 0 !== s ? s : void 0)
                        ? null
                        : (null == o ? void 0 : o.length) && (null === (i = e.videoCapabilities) || void 0 === i ? void 0 : i.length) && !(u = null !== (n = filterMediaCapabilities(e.videoCapabilities, o)) && void 0 !== n ? n : void 0)
                        ? null
                        : tslib_1.__assign(tslib_1.__assign({}, e), { audioCapabilities: _, videoCapabilities: u });
                }
                var EMEManager = (function (e) {
                    function r(r) {
                        var t,
                            s = e.call(this) || this;
                        return (
                            (s._unauthServerCertificateBase = ""),
                            (s._disallowCodecs = {}),
                            (s._keySystemDeferred = defer_1.defer()),
                            (s._configuration = defer_1.defer()),
                            (s._keySystemSettings = null),
                            (s._keySessions = []),
                            (s._configs = []),
                            (s._pendingCertificateRequest = null),
                            (s._certificate = null),
                            (s._transport = r.transport),
                            (s._emeImpl = r.emeImpl),
                            (s._noServerCertificate = !!r.noServerCertificate),
                            (s._precacheServerCertificate = null === (t = r.precacheServerCertificate) || void 0 === t || t),
                            (s._unauthServerCertificateBase = r.unauthServerCertificateBase || UNAUTHENTICATED_CERT_BASE),
                            (s._configFilter = createConfigFilter(r.disallowRobustnessValues || [])),
                            (s._disallowCodecs = r.disallowCodecs),
                            (s._preferredKeySystems = r.preferredKeySystems || [key_system_1.KeySystem.WIDEVINE, key_system_1.KeySystem.PLAYREADY, key_system_1.KeySystem.PLAYREADY_HARDWARE, key_system_1.KeySystem.FAIRPLAY]),
                            s
                        );
                    }
                    return (
                        tslib_1.__extends(r, e),
                        (r.create = function (e) {
                            return new Promise(function (t) {
                                var s = polyfills_1.install();
                                if (!s) throw eme_1.EMEError.fatal(errors_1.Errors.EME_API_NOT_SUPPORTED, "Platform does not support navigator.requestMediaKeySystemAccess");
                                t(new r(tslib_1.__assign(tslib_1.__assign({}, e), { emeImpl: s })).init());
                            });
                        }),
                        (r.prototype._prepareConfiguration = function (e) {
                            var r = e.getConfiguration();
                            debugLogger.info("KeySystem configured as ", r.label), (r.audioCapabilities && r.audioCapabilities.length) || this._appendProbableMediaCapabilities(e.keySystem, r);
                            var t = { keySystem: e.keySystem, keySystemImpl: this._emeImpl, audioFormats: this._parseCapabilities(r.audioCapabilities), videoFormats: this._parseCapabilities(r.videoCapabilities) };
                            return (this._keySystemSettings = keysystem_setting_1.KeySystemSetting[e.keySystem]), this._configuration.resolve(t), t;
                        }),
                        (r.prototype._parseCapabilities = function (e) {
                            if (!e) return [];
                            for (var r = [], t = 0, s = e.length; t < s; t++) {
                                var i = e[t];
                                if (i && i.contentType) {
                                    var n = i.contentType.match(CODEC_EXP);
                                    n && r.push({ contentType: i.contentType, mimeType: n[1], codec: n[2] });
                                }
                            }
                            return r;
                        }),
                        (r.prototype._appendProbableMediaCapabilities = function (e, r) {
                            var t = eme_2.getMediaKeySystemConfiguration(this._configs, function (r) {
                                return (-1 === r.indexOf("webm") || (e !== key_system_1.KeySystem.PLAYREADY && e !== key_system_1.KeySystem.PLAYREADY_HARDWARE)) && !!MediaSource.isTypeSupported(r);
                            });
                            t && ((r.audioCapabilities = t.audioCapabilities), (r.videoCapabilities = t.videoCapabilities));
                        }),
                        (r.prototype._trySetServerCertificate = function (e, r) {
                            var t = this,
                                s = this._certificate;
                            return (s && s.expiry > Date.now() ? Promise.resolve(s) : this._requestServerCertificate(e))
                                .then(function (e) {
                                    return r.setServerCertificate(e.contents);
                                })
                                .then(function () {
                                    return t;
                                })
                                .catch(function (e) {
                                    return debugLogger.warn("Error from setting server certificate", e), t;
                                });
                        }),
                        (r.prototype._cacheServerCertificate = function (e) {
                            var r = this,
                                t = "";
                            switch (e) {
                                case key_system_1.KeySystem.FAIRPLAY:
                                    t = "fairplay";
                                    break;
                                case key_system_1.KeySystem.WIDEVINE:
                                    t = "widevine";
                                    break;
                                default:
                                    return Promise.resolve(this);
                            }
                            return this._requestServerCertificate(this._unauthServerCertificateBase + "/" + t + "-license", !1).then(
                                function () {
                                    return r;
                                },
                                function (e) {
                                    return debugLogger.warn("Cannot precache server certificate", e), r;
                                }
                            );
                        }),
                        (r.prototype._requestServerCertificate = function (e, r) {
                            var t = this;
                            return (
                                void 0 === r && (r = !0),
                                this._pendingCertificateRequest
                                    ? this._pendingCertificateRequest
                                    : this._transport
                                          .request(e + "/v1/application-certificate", {
                                              authorize: r,
                                              responseType: "arraybuffer",
                                              parseResponseHeaders: !0,
                                              retry: {
                                                  condition: function (e, r) {
                                                      return e.getStatusFamily() === r.SERVER_ERROR;
                                                  },
                                              },
                                          })
                                          .then(function (e) {
                                              var r;
                                              if (!e.body) throw new TypeError("Response body is invalid");
                                              t._pendingCertificateRequest = null;
                                              var s = 3600,
                                                  i = null === (r = e.headers) || void 0 === r ? void 0 : r.get("cache-control");
                                              if (i) {
                                                  var n = i.match(/(?:^|,|\s)max-age=(\d+)(?:,|$)/);
                                                  n && n[1] && (s = 1e3 * parseInt(n[1], 10));
                                              }
                                              return (t._certificate = { expiry: Date.now() + (s - 600), contents: e.body }), t._certificate;
                                          })
                            );
                        }),
                        (r.prototype._extractPlayReadyChallenge = function (e, r) {
                            var t = null,
                                s = new Uint16Array(e),
                                i = String.fromCharCode.apply(null, s);
                            if (-1 === i.indexOf("PlayReadyKeyMessage")) return debugLogger.info("Using unextracted PlayReady message."), e;
                            var n = new DOMParser().parseFromString(i, "application/xml"),
                                a = n.getElementsByTagName("Challenge")[0].childNodes[0].nodeValue;
                            if (a)
                                try {
                                    t = atob(a);
                                    var o = n.getElementsByTagName("name"),
                                        _ = n.getElementsByTagName("value");
                                    if (o.length !== _.length) throw new eme_1.EMEError(errors_1.Errors.EME_HEADER_KEY_VALUE_MISMATCH, "Mismatched header <name>/<value> pair in key message");
                                } catch (e) {
                                    this.emit(event_1.Event.EME_LICENSE_REQUEST_ERROR, { playId: r, error: e }), (t = null);
                                }
                            else this.emit(event_1.Event.EME_LICENSE_REQUEST_ERROR, { playId: r, error: new eme_1.EMEError(errors_1.Errors.EME_HEADER_KEY_VALUE_MISMATCH, "Mismatched header <name>/<value> pair in key message") });
                            return t;
                        }),
                        (r.prototype._onMessage = function (e, r) {
                            e.timeMap.generate.end = Date.now();
                            var t = "message" in r ? r.message : null,
                                s = "messageType" in r ? r.messageType : void 0;
                            if ((debugLogger.info("Got EME message event with type", s), t && e.keySystem === key_system_1.KeySystem.PLAYREADY && (t = this._extractPlayReadyChallenge(t, e.playId)), t))
                                if (e.licenseServer) {
                                    e.timeMap.request.start = Date.now();
                                    var i = e.licenseServer;
                                    e.keySystem === key_system_1.KeySystem.FAIRPLAY && (i += "&assetId=hex"),
                                        this._transport
                                            .request(i, {
                                                method: "POST",
                                                payload: t,
                                                responseType: "arraybuffer",
                                                retry: {
                                                    condition: function (e, r) {
                                                        return 400 !== e.status && 402 !== e.status && 403 !== e.status && (!e.body || e.getStatusFamily() !== r.SUCCESS);
                                                    },
                                                },
                                            })
                                            .then(this._handleLicenseResponse.bind(this, e));
                                } else debugLogger.info("Ignoring message event: no licenseServer url");
                            else debugLogger.info("Ignoring message event: no valid request payload");
                        }),
                        (r.prototype._handleLicenseResponse = function (e, r) {
                            var t,
                                s = this,
                                i = function (r) {
                                    (r.playId = e.playId), e.licenseServer && (r.licenseServer = e.licenseServer), s.emit(event_1.Event.EME_LICENSE_REQUEST_ERROR, { playId: e.playId, error: r });
                                };
                            if (((e.timeMap.request.end = Date.now()), 200 !== r.status)) {
                                var n;
                                try {
                                    if (r.body) {
                                        var a = new Uint8Array(r.body),
                                            o = String.fromCharCode.apply(String, a);
                                        n = JSON.parse(o).errorMsg;
                                    }
                                } catch (e) {}
                                402 === r.status
                                    ? this.emit(event_1.Event.EME_LICENSE_REQUEST_CAPPED, { playId: e.playId, error: new capping_1.CappingError(errors_1.Errors.CAPPING_USER_IS_CAPPED, "User is capped.") })
                                    : 400 === r.status && "widevine error" === n
                                    ? (((t = eme_1.EMEError.fatal(errors_1.Errors.EME_LICENSE_REQUEST_WIDEVINE_ERROR, "Widevine license server failed to parse request.")).status = r.status), (t.shouldRefreshEndpoint = !0), i(t))
                                    : (((t = new eme_1.EMEError(errors_1.Errors.EME_LICENSE_REQUEST_FAILED_WITH_STATUS, "License request failed (" + (n || "unknown") + ")")).status = r.status),
                                      (t.shouldRefreshEndpoint = 400 === r.status || 403 === r.status),
                                      i(t));
                            } else {
                                if (!r.body) return ((t = new eme_1.EMEError(errors_1.Errors.EME_LICENSE_REQUEST_EMPTY_RESPONSE, "Empty license response body")).status = r.status), void i(t);
                                try {
                                    (e.timeMap.update.start = Date.now()),
                                        e.keySession.update(r.body).catch(function (e) {
                                            i(new eme_1.EMEError(errors_1.Errors.EME_LICENSE_UPDATE_FAILED, e.message || "License update failed."));
                                        }),
                                        debugLogger.info("KeySession updated.");
                                } catch (e) {
                                    i(new eme_1.EMEError(errors_1.Errors.EME_LICENSE_UPDATE_FAILED, e.message || "License update failed."));
                                }
                            }
                        }),
                        (r.prototype._selectKeySystem = function (e) {
                            for (var r = this._preferredKeySystems, t = 0, s = r.length; t < s; t++) {
                                var i = r[t];
                                if (i in e) return e[i];
                            }
                            return null;
                        }),
                        (r.prototype._testMediaKeys = function (e) {
                            return new Promise(function (r) {
                                r(e.createMediaKeys());
                            }).then(
                                function (r) {
                                    if (!r) return Promise.reject(eme_1.EMEError.fatal(errors_1.Errors.EME_MEDIA_KEYS_NOT_SUPPORTED, "Cannot create MediaKeys from KeySystemAccess"));
                                    e.keySystem === key_system_1.KeySystem.FAIRPLAY && r.setServerCertificate(new ArrayBuffer(0));
                                    try {
                                        if (!r.createSession()) throw new Error("");
                                    } catch (e) {
                                        return Promise.reject(eme_1.EMEError.fatal(errors_1.Errors.EME_MEDIA_KEY_SESSION_NOT_SUPPORTED, e.message || "Cannot create MediaKeySession from KeySystemAccess"));
                                    }
                                    return Promise.resolve(e);
                                },
                                function (e) {
                                    return debugLogger.error(e.name), Promise.reject(eme_1.EMEError.fatal(errors_1.Errors.EME_MEDIA_KEYS_NOT_SUPPORTED, e.message || "Unknown error"));
                                }
                            );
                        }),
                        (r.prototype._saveSession = function (e) {
                            this._keySessions.push(e);
                        }),
                        (r.prototype.destroySessions = function () {
                            for (var e = [], r = this._keySessions, t = 0, s = r.length; t < s; t++)
                                try {
                                    var i = r[t],
                                        n = i.keySession;
                                    if (!n) continue;
                                    i.onMessageListener && n.removeEventListener(event_1.Event.KEY_SESSION_MESSAGE, i.onMessageListener),
                                        i.onKeyStatusChangeListener && n.removeEventListener(event_1.Event.KEY_SESSION_STATUSES_CHANGE, i.onKeyStatusChangeListener);
                                    var a = Promise.resolve(n.close()).catch(function (e) {
                                        debugLogger.warn("Failed to close KeySession", e);
                                    });
                                    e.push(a), (i.keySession = null), (i.onMessageListener = null), (i.onKeyStatusChangeListener = null), debugLogger.info("Closed KeySession");
                                } catch (e) {
                                    debugLogger.warn("Failed to close KeySession", e);
                                }
                            return (this._keySessions = []), Promise.all(e);
                        }),
                        (r.prototype.init = function () {
                            for (var e = this, r = this._keySystemDeferred, t = {}, s = [], i = [], n = 0, a = configs_1.EMEConfigs.length; n < a; n++) {
                                var o = configs_1.EMEConfigs[n];
                                if (!o.label || !this._configFilter.test(o.label)) {
                                    if (this._disallowCodecs) {
                                        var _ = filterMediaCodecs(o, this._disallowCodecs);
                                        if (!_) continue;
                                        o = _;
                                    }
                                    i.push(o);
                                }
                            }
                            for (var u in ((this._configs = i), key_system_1.KeySystem))
                                if (Object.prototype.hasOwnProperty.call(key_system_1.KeySystem, u)) {
                                    var E = u;
                                    s.push(
                                        navigator
                                            .requestMediaKeySystemAccess(key_system_1.KeySystem[E], i)
                                            .then(function (e) {
                                                t[e.keySystem] = e;
                                            })
                                            .catch(function () {})
                                    );
                                }
                            return Promise.all(s)
                                .then(this._selectKeySystem.bind(this, t))
                                .then(function (r) {
                                    return r ? e._testMediaKeys(r) : Promise.reject(new eme_1.EMEError(errors_1.Errors.EME_NO_SUPPORTED_KEYSYSTEM, "No supported keysystem was found."));
                                })
                                .then(function (t) {
                                    return e._prepareConfiguration(t), r.resolve(t), e._precacheServerCertificate ? e._cacheServerCertificate(t.keySystem) : e;
                                })
                                .catch(function (t) {
                                    var s = t.code || errors_1.Errors.EME_NO_SUPPORTED_KEYSYSTEM,
                                        i = t.message || "No supported keysystem";
                                    return (
                                        r.reject(eme_1.EMEError.fatal(s, i)),
                                        r.promise.then(function () {
                                            return e;
                                        })
                                    );
                                });
                        }),
                        (r.prototype.createMediaKeys = function (e) {
                            var r = this;
                            return this._keySystemDeferred.promise
                                .then(function (e) {
                                    return e.createMediaKeys();
                                })
                                .then(function (r) {
                                    return Promise.all([e.setMediaKeys(r), r]);
                                })
                                .then(function (t) {
                                    t[0];
                                    var s = t[1];
                                    if (!e.mediaKeys) throw new eme_1.EMEError(errors_1.Errors.EME_PLAYER_MEDIA_KEYS_SETTING_FAILED, "Failed to set MediaKeys on HTMLMediaElement");
                                    return r._configuration.promise.then(function () {
                                        var e = r._keySystemSettings;
                                        return e && !r._noServerCertificate && e.withCertificate ? r._trySetServerCertificate(e.licenseServer, s) : r;
                                    });
                                });
                        }),
                        (r.prototype.removeMediaKeys = function (e) {
                            var r = this;
                            return Promise.resolve(e.setMediaKeys(null)).then(function () {
                                return r;
                            });
                        }),
                        (r.prototype.getKeySystemInfo = function () {
                            return this._configuration.promise;
                        }),
                        (r.prototype.getKeySystemImpl = function () {
                            return this._emeImpl;
                        }),
                        (r.prototype.createSessionWithParams = function (e) {
                            var r = this;
                            return new Promise(function (t, s) {
                                debugLogger.info("Creating KeySession", e.keySystem);
                                var i = e.mediaKeys.createSession(),
                                    n = { generate: { start: 0, end: 0 }, request: { start: 0, end: 0 }, update: { start: 0, end: 0 } },
                                    a = (r._keySystemSettings && r._keySystemSettings.licenseServer) || void 0,
                                    o = r._onMessage.bind(r, { keySystem: e.keySystem, keySession: i, licenseServer: e.licenseServer || a, playId: e.playId, timeMap: n });
                                i.addEventListener(event_1.Event.KEY_SESSION_MESSAGE, o);
                                var _ = function () {
                                    debugLogger.info("KeyStatus change"),
                                        (n.update.end = Date.now()),
                                        t({ elapsed: { generate: Math.max(n.generate.end - n.generate.start, 0), request: Math.max(n.request.end - n.request.start, 0), update: Math.max(n.update.end - n.update.start, 0) } });
                                };
                                return (
                                    i.addEventListener(event_1.Event.KEY_SESSION_STATUSES_CHANGE, _),
                                    r._saveSession({ keySession: i, onMessageListener: o, onKeyStatusChangeListener: _ }),
                                    debugLogger.info("Generating KeySession request", e.keySystem),
                                    (n.generate.start = Date.now()),
                                    Promise.resolve(i.generateRequest(e.initDataType, e.initData.buffer)).catch(function (e) {
                                        if (e) {
                                            var r;
                                            switch (e.name) {
                                                case "NotSupportedError":
                                                    r = errors_1.Errors.EME_NOT_SUPPORTED_ERROR;
                                                    break;
                                                case "InvalidStateError":
                                                    r = errors_1.Errors.EME_INVALID_STATE_ERROR;
                                                    break;
                                                default:
                                                    r = errors_1.Errors.EME_UNKNOWN_ERROR;
                                            }
                                            s(new eme_1.EMEError(r, e.message || "Unknown error message."));
                                        }
                                    })
                                );
                            });
                        }),
                        r
                    );
                })(emitter_1.EventEmitter);
                exports.EMEManager = EMEManager;
            },
            {
                "../../enums/errors": 44,
                "../../enums/event": 45,
                "../../enums/key_system": 46,
                "../../error/capping": 55,
                "../../error/eme": 56,
                "../defer": 21,
                "../helpers/eme": 31,
                "./configs": 22,
                "./keysystem_setting": 23,
                "./polyfills": 26,
                "@js-sdk/debug-tools": 11,
                "@spotify-internal/emitter": 71,
                tslib: 190,
            },
        ],
        25: [
            function (require, module, exports) {
                "use strict";
                function emitEncrypted(t) {
                    var e = document.createEvent("Event");
                    e.initEvent("encrypted", !1, !1), (e.initDataType = "cenc"), (e.initData = t.initData), (e.fromPolyfill = !0), this.dispatchEvent(e);
                }
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.emitEncrypted = void 0), (exports.emitEncrypted = emitEncrypted);
            },
            {},
        ],
        26: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.install = void 0);
                var debug_tools_1 = require("@js-sdk/debug-tools"),
                    ms_ie_1 = require("./ms_ie"),
                    v0_1b_1 = require("./v0_1b"),
                    safari_1 = require("./safari"),
                    debugLogger = debug_tools_1.logging.forTag("eme_polyfills.tester");
                function install() {
                    return "undefined" != typeof navigator &&
                        (null === navigator || void 0 === navigator ? void 0 : navigator.requestMediaKeySystemAccess) &&
                        "undefined" == typeof WebKitMediaKeys &&
                        "undefined" != typeof MediaKeySystemAccess &&
                        (null === MediaKeySystemAccess || void 0 === MediaKeySystemAccess ? void 0 : MediaKeySystemAccess.prototype.getConfiguration)
                        ? (debugLogger.log("Using native EME implementation."), "native")
                        : "undefined" != typeof HTMLMediaElement && (null === HTMLMediaElement || void 0 === HTMLMediaElement ? void 0 : HTMLMediaElement.prototype.webkitGenerateKeyRequest)
                        ? (debugLogger.log('Detected "webkit" Prefixed EME v0.1b. Polyfilling.'), v0_1b_1.setup("webkit"), "v0.1b-webkit")
                        : "undefined" != typeof HTMLMediaElement && (null === HTMLMediaElement || void 0 === HTMLMediaElement ? void 0 : HTMLMediaElement.prototype.generateKeyRequest)
                        ? (debugLogger.log("Detected Unprefixed EME v0.1b. Polyfilling."), v0_1b_1.setup(), "v0.1b")
                        : "undefined" != typeof MSMediaKeys
                        ? (debugLogger.log("Detected MS IE EME. Polyfilling."), ms_ie_1.setup(), "ms-ie")
                        : "function" == typeof WebKitMediaKeys
                        ? (debugLogger.log("Detected Safari EME. Polyfilling."), safari_1.setup(), "safari")
                        : (debugLogger.warn("Detected no EME APIs."), null);
                }
                exports.install = install;
            },
            { "./ms_ie": 28, "./safari": 29, "./v0_1b": 30, "@js-sdk/debug-tools": 11 },
        ],
        27: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.LicenseRequestEvent = void 0);
                var tslib_1 = require("tslib"),
                    emitter_1 = require("@spotify-internal/emitter"),
                    event_1 = require("../../../enums/event"),
                    LicenseRequestEvent = (function (e) {
                        function t(t) {
                            var s = e.call(this, event_1.Event.KEY_SESSION_MESSAGE, null) || this;
                            return (s.messageType = "license-request"), (s.message = t), s;
                        }
                        return tslib_1.__extends(t, e), t;
                    })(emitter_1.EmittedEvent);
                exports.LicenseRequestEvent = LicenseRequestEvent;
            },
            { "../../../enums/event": 45, "@spotify-internal/emitter": 71, tslib: 190 },
        ],
        28: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.setup = void 0);
                var tslib_1 = require("tslib"),
                    emitter_1 = require("@spotify-internal/emitter"),
                    errors_1 = require("../../../enums/errors"),
                    event_1 = require("../../../enums/event"),
                    eme_1 = require("../../../error/eme"),
                    emit_encrypted_1 = require("./emit_encrypted"),
                    defer_1 = require("../../defer"),
                    license_request_event_1 = require("./license_request_event"),
                    MediaKeySession = (function (e) {
                        function t(t) {
                            var i = e.call(this) || this;
                            return (
                                (i._nativeKeySession = null),
                                (i._lastUpdateDeferred = defer_1.defer()),
                                (i._lastGenerateDeferred = defer_1.defer()),
                                (i.addEventListener = i.addListener),
                                (i.removeEventListener = i.removeListener),
                                (i._nativeMediaKeys = t),
                                (i._onKeyMessage = i._onKeyMessage.bind(i)),
                                (i._onKeyAdded = i._onKeyAdded.bind(i)),
                                (i._onKeyError = i._onKeyError.bind(i)),
                                i
                            );
                        }
                        return (
                            tslib_1.__extends(t, e),
                            (t.prototype._attach = function () {
                                var e = this._nativeKeySession;
                                e && (e.addEventListener(event_1.Event.MS_KEY_ADDED, this._onKeyAdded), e.addEventListener(event_1.Event.MS_KEY_ERROR, this._onKeyError), e.addEventListener(event_1.Event.MS_KEY_MESSAGE, this._onKeyMessage));
                            }),
                            (t.prototype._detach = function () {
                                var e = this._nativeKeySession;
                                e &&
                                    (e.removeEventListener(event_1.Event.MS_KEY_ADDED, this._onKeyAdded),
                                    e.removeEventListener(event_1.Event.MS_KEY_ERROR, this._onKeyError),
                                    e.removeEventListener(event_1.Event.MS_KEY_MESSAGE, this._onKeyMessage));
                            }),
                            (t.prototype._onKeyMessage = function (e) {
                                e.message &&
                                    e.message.buffer &&
                                    (this.emitEvent(new license_request_event_1.LicenseRequestEvent(e.message.buffer)), this._lastGenerateDeferred && (this._lastGenerateDeferred.resolve(!0), (this._lastGenerateDeferred = null)));
                            }),
                            (t.prototype._onKeyAdded = function () {
                                this._lastUpdateDeferred && (this._lastUpdateDeferred.resolve(!0), (this._lastUpdateDeferred = null)),
                                    this._lastGenerateDeferred && (this._lastGenerateDeferred.resolve(!0), (this._lastGenerateDeferred = null)),
                                    this.emit(event_1.Event.KEY_SESSION_STATUSES_CHANGE, null);
                            }),
                            (t.prototype._onKeyError = function () {
                                var e = this._nativeKeySession && this._nativeKeySession.error;
                                this._lastGenerateDeferred && (this._lastGenerateDeferred.reject(e), (this._lastGenerateDeferred = null)),
                                    this._lastUpdateDeferred && (this._lastUpdateDeferred.reject(e), (this._lastUpdateDeferred = null)),
                                    this.emit(event_1.Event.KEY_SESSION_STATUSES_CHANGE, null);
                            }),
                            (t.prototype.generateRequest = function (e, t) {
                                var i = this;
                                return new Promise(function (e, r) {
                                    i._lastGenerateDeferred && ((i._lastGenerateDeferred.resolve = e), (i._lastGenerateDeferred.reject = r)),
                                        (i._nativeKeySession = i._nativeMediaKeys.createSession("audio/mp4", new Uint8Array(t), null)),
                                        i._attach();
                                });
                            }),
                            (t.prototype.update = function (e) {
                                var t = this;
                                return new Promise(function (i, r) {
                                    t._lastGenerateDeferred && ((t._lastGenerateDeferred.resolve = i), (t._lastGenerateDeferred.reject = r)), t._nativeKeySession && t._nativeKeySession.update(new Uint8Array(e));
                                });
                            }),
                            (t.prototype.close = function () {
                                var e = this;
                                return new Promise(function (t) {
                                    e._nativeKeySession && e._nativeKeySession.close(), e._detach(), t(!0);
                                });
                            }),
                            t
                        );
                    })(emitter_1.EventEmitter),
                    MediaKeys = (function () {
                        function e(e) {
                            (this._lastBoundSetter = null), (this.shouldRefreshPerTrack = !0), (this._nativeMediaKeys = new MSMediaKeys(e));
                        }
                        return (
                            (e.prototype.attach = function (e) {
                                var t = this;
                                return new Promise(function (i) {
                                    if (e.readyState >= 1) return e.msSetMediaKeys(t._nativeMediaKeys), void i();
                                    var r = function i() {
                                        e.removeEventListener(event_1.Event.MEDIA_LOADEDMETADATA, i), (t._lastBoundSetter = null), e.msSetMediaKeys(t._nativeMediaKeys);
                                    };
                                    (t._lastBoundSetter = r), e.addEventListener(event_1.Event.MEDIA_LOADEDMETADATA, r), e.addEventListener(event_1.Event.MS_NEEDKEY, emit_encrypted_1.emitEncrypted), i();
                                });
                            }),
                            (e.prototype.detach = function (e) {
                                this._lastBoundSetter &&
                                    (e.removeEventListener(event_1.Event.MS_NEEDKEY, emit_encrypted_1.emitEncrypted), e.removeEventListener(event_1.Event.MEDIA_LOADEDMETADATA, this._lastBoundSetter), (this._lastBoundSetter = null));
                            }),
                            (e.prototype.setServerCertificate = function () {
                                return Promise.reject(new eme_1.EMEError(errors_1.Errors.EME_CANNOT_SET_CERTIFICATE_FOR_PLATFORM, "Cannot set server certificate on this platform."));
                            }),
                            (e.prototype.createSession = function () {
                                return new MediaKeySession(this._nativeMediaKeys);
                            }),
                            e
                        );
                    })();
                function _setMediaKeys(e) {
                    var t = this.mediaKeys;
                    return t && t !== e && t.detach(this), delete this.mediaKeys, (this.mediaKeys = e), e && e.attach(this), Promise.resolve();
                }
                var MediaKeySystemAccess = (function () {
                    function e(e, t) {
                        if (((this._configuration = null), (this.keySystem = e), !this._checkConfig(t))) throw new eme_1.EMEError(errors_1.Errors.EME_NO_SUPPORTED_CONFIGURATION, "No supported configurations");
                    }
                    return (
                        (e.prototype._checkConfig = function (e) {
                            for (var t = this.keySystem, i = 0, r = e.length; i < r; i++) {
                                var n = e[i],
                                    s = { initDataTypes: n.initDataTypes, audioCapabilities: [], videoCapabilities: [], persistentState: "optional", distinctiveIdentifier: "optional", sessionTypes: ["temporary"], label: n.label },
                                    a = void 0,
                                    o = void 0,
                                    _ = void 0,
                                    d = void 0,
                                    u = void 0;
                                if (n.audioCapabilities && n.audioCapabilities.length && s.audioCapabilities)
                                    for (u = !1, a = 0, o = n.audioCapabilities.length; a < o; a++)
                                        (_ = n.audioCapabilities[a]).contentType && (d = _.contentType.split(";")[0]), MSMediaKeys.isTypeSupported(t, d) && (s.audioCapabilities.push(_), (u = !0));
                                if (n.videoCapabilities && n.videoCapabilities.length && s.videoCapabilities)
                                    for (u = !1, a = 0, o = n.videoCapabilities.length; a < o; a++)
                                        (_ = n.videoCapabilities[a]).contentType && (d = _.contentType.split(";")[0]), MSMediaKeys.isTypeSupported(t, d) && (s.videoCapabilities.push(_), (u = !0));
                                if (u) return (this._configuration = s), !0;
                            }
                            return !1;
                        }),
                        (e.prototype.getConfiguration = function () {
                            return this._configuration;
                        }),
                        (e.prototype.createMediaKeys = function () {
                            var e = this;
                            return new Promise(function (t) {
                                t(new MediaKeys(e.keySystem));
                            });
                        }),
                        e
                    );
                })();
                function setup() {
                    navigator.requestMediaKeySystemAccess = function (e, t) {
                        return new Promise(function (i) {
                            i(new MediaKeySystemAccess(e, t));
                        });
                    };
                    var e = HTMLMediaElement.prototype;
                    delete e.mediaKeys, (e.setMediaKeys = _setMediaKeys);
                }
                exports.setup = setup;
            },
            { "../../../enums/errors": 44, "../../../enums/event": 45, "../../../error/eme": 56, "../../defer": 21, "./emit_encrypted": 25, "./license_request_event": 27, "@spotify-internal/emitter": 71, tslib: 190 },
        ],
        29: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.setup = void 0);
                var tslib_1 = require("tslib"),
                    debug_tools_1 = require("@js-sdk/debug-tools"),
                    emitter_1 = require("@spotify-internal/emitter"),
                    errors_1 = require("../../../enums/errors"),
                    event_1 = require("../../../enums/event"),
                    eme_1 = require("../../../error/eme"),
                    emit_encrypted_1 = require("./emit_encrypted"),
                    defer_1 = require("../../defer"),
                    license_request_event_1 = require("./license_request_event"),
                    debugLogger = debug_tools_1.logging.forTag("eme_polyfill.safari");
                function toUTF16(e) {
                    for (var t = new Uint8Array(2 * e.length), r = new DataView(t.buffer), i = e.split(""), n = 0, s = i.length; n < s; n++) {
                        var o = i[n].charCodeAt(0);
                        r.setUint16(2 * n, o, !0);
                    }
                    return t.buffer;
                }
                function fromUTF16(e) {
                    for (var t = Math.floor(e.byteLength / 2), r = new Uint16Array(t), i = new DataView(e.buffer), n = 0; n < t; n++) r[n] = i.getUint16(2 * n, !0);
                    return String.fromCharCode.apply(null, r);
                }
                function _setMediaKeys(e) {
                    var t = this.mediaKeys;
                    return t && t !== e && t.detach(this), delete this.mediaKeys, (this.mediaKeys = e), e ? e.attach(this) : Promise.resolve();
                }
                var MediaKeySession = (function (e) {
                        function t(t, r) {
                            var i = e.call(this) || this;
                            return (
                                (i._attached = !1),
                                (i._nativeKeySession = null),
                                (i._lastGenerateResolver = defer_1.defer()),
                                (i._lastUpdateResolver = defer_1.defer()),
                                (i.addEventListener = i.addListener),
                                (i.removeEventListener = i.removeListener),
                                (i._nativeMediaKeys = t),
                                (i._serverCertificate = r),
                                (i._onKeyMessage = i._onKeyMessage.bind(i)),
                                (i._onKeyAdded = i._onKeyAdded.bind(i)),
                                (i._onKeyError = i._onKeyError.bind(i)),
                                i
                            );
                        }
                        return (
                            tslib_1.__extends(t, e),
                            (t.prototype._attach = function () {
                                if (!this._attached) {
                                    var e = this._nativeKeySession;
                                    e
                                        ? (e.addEventListener(event_1.Event.WEBKIT_KEY_MESSAGE, this._onKeyMessage),
                                          e.addEventListener(event_1.Event.WEBKIT_KEY_ADDED, this._onKeyAdded),
                                          e.addEventListener(event_1.Event.WEBKIT_KEY_ERROR, this._onKeyError))
                                        : debugLogger.warn("Tried to attach with no WebKitMediaKeySession");
                                }
                            }),
                            (t.prototype._detach = function () {
                                if (this._attached) {
                                    var e = this._nativeKeySession;
                                    e
                                        ? (e.removeEventListener(event_1.Event.WEBKIT_KEY_MESSAGE, this._onKeyMessage),
                                          e.removeEventListener(event_1.Event.WEBKIT_KEY_ADDED, this._onKeyAdded),
                                          e.removeEventListener(event_1.Event.WEBKIT_KEY_ERROR, this._onKeyError))
                                        : debugLogger.warn("Tried to detach with no WebKitMediaKeySession");
                                }
                            }),
                            (t.prototype._onKeyMessage = function (e) {
                                e.message &&
                                    e.message.buffer &&
                                    (this.emitEvent(new license_request_event_1.LicenseRequestEvent(e.message.buffer)), this._lastGenerateResolver && (this._lastGenerateResolver.resolve(!0), (this._lastGenerateResolver = null)));
                            }),
                            (t.prototype._onKeyAdded = function () {
                                this._lastUpdateResolver && (this._lastUpdateResolver.resolve(!0), (this._lastUpdateResolver = null)), this.emit(event_1.Event.KEY_SESSION_STATUSES_CHANGE, null);
                            }),
                            (t.prototype._onKeyError = function () {
                                var e = this._nativeKeySession && this._nativeKeySession.error,
                                    t = new eme_1.EMEError(errors_1.Errors.EME_MEDIA_KEY_SESSION_SAFARI_ERROR, (e && e.message) || "MediaKeySession Safari Error");
                                e && ((t.debug.errorCode = e.code), (t.debug.systemCode = e.systemCode)),
                                    this._lastGenerateResolver
                                        ? (this._lastGenerateResolver.reject(t), (this._lastGenerateResolver = null))
                                        : this._lastUpdateResolver && (this._lastUpdateResolver.reject(t), (this._lastUpdateResolver = null));
                            }),
                            (t.prototype._rebuildInitData = function (e) {
                                var t = new Uint8Array(e);
                                if (new DataView(t.buffer).getUint32(0, !0) + 4 !== t.byteLength) throw new eme_1.EMEError(errors_1.Errors.EME_INIT_DATA_MALFORMED, "Malformed init data");
                                var r = fromUTF16(t.slice(4)).match(/^skd:\/\/([0-9a-fA-F]+)/);
                                if (!r) throw new eme_1.EMEError(errors_1.Errors.EME_INIT_DATA_MALFORMED, "Invalid content ID");
                                var i = r[1],
                                    n = new Uint8Array(toUTF16(i)),
                                    s = this._serverCertificate,
                                    o = new Uint8Array(t.byteLength + 4 + n.byteLength + 4 + s.byteLength),
                                    a = 0;
                                o.set(t, a), (a += t.byteLength);
                                var _ = new DataView(o.buffer);
                                return _.setUint32(a, n.byteLength, !0), (a += 4), o.set(n, a), (a += n.byteLength), _.setUint32(a, s.byteLength, !0), (a += 4), o.set(s, a), o;
                            }),
                            (t.prototype.generateRequest = function (e, t) {
                                var r = this;
                                return new Promise(function (e, i) {
                                    r._lastGenerateResolver = { resolve: e, reject: i };
                                    try {
                                        var n = r._rebuildInitData(t);
                                        (r._nativeKeySession = r._nativeMediaKeys.createSession("video/mp4", new Uint8Array(n), null)), r._attach();
                                    } catch (e) {
                                        (r._lastGenerateResolver = null), i(e);
                                    }
                                });
                            }),
                            (t.prototype.update = function (e) {
                                var t = this;
                                return new Promise(function (r, i) {
                                    if (((t._lastUpdateResolver = { resolve: r, reject: i }), t._nativeKeySession))
                                        try {
                                            t._nativeKeySession.update(new Uint8Array(e));
                                        } catch (e) {
                                            i(e);
                                        }
                                    else debugLogger.warn("Tried to update with no WebKitMediaKeySession");
                                });
                            }),
                            (t.prototype.close = function () {
                                var e = this;
                                return new Promise(function (t) {
                                    e._detach(), t(!0);
                                });
                            }),
                            t
                        );
                    })(emitter_1.EventEmitter),
                    MediaKeys = (function () {
                        function e(e) {
                            (this._lastBoundSetter = null), (this._serverCertificate = null), (this.shouldRefreshPerTrack = !0), (this._nativeMediaKeys = new WebKitMediaKeys(e));
                        }
                        return (
                            (e.prototype.attach = function (e) {
                                var t = this;
                                return new Promise(function (r) {
                                    if (e.readyState >= 1) return e.webkitSetMediaKeys(t._nativeMediaKeys), void r();
                                    var i = function r() {
                                        e.removeEventListener(event_1.Event.MEDIA_LOADEDMETADATA, r), (t._lastBoundSetter = null), e.webkitSetMediaKeys(t._nativeMediaKeys);
                                    };
                                    (t._lastBoundSetter = i), e.addEventListener(event_1.Event.MEDIA_LOADEDMETADATA, i), e.addEventListener(event_1.Event.WEBKIT_NEEDKEY, emit_encrypted_1.emitEncrypted), r();
                                });
                            }),
                            (e.prototype.detach = function (e) {
                                e.removeEventListener(event_1.Event.WEBKIT_NEEDKEY, emit_encrypted_1.emitEncrypted),
                                    this._lastBoundSetter && (e.removeEventListener(event_1.Event.MEDIA_LOADEDMETADATA, this._lastBoundSetter), (this._lastBoundSetter = null));
                            }),
                            (e.prototype.setServerCertificate = function (e) {
                                return (this._serverCertificate = new Uint8Array(e)), Promise.resolve(!0);
                            }),
                            (e.prototype.createSession = function () {
                                if (!this._serverCertificate) throw new eme_1.EMEError(errors_1.Errors.EME_INVALID_STATE_ERROR, "The server certificate is not available");
                                return new MediaKeySession(this._nativeMediaKeys, this._serverCertificate);
                            }),
                            e
                        );
                    })(),
                    MediaKeySystemAccess = (function () {
                        function e(e, t) {
                            this.keySystem = e;
                            var r = this._checkConfig(t);
                            if (!r) throw new eme_1.EMEError(errors_1.Errors.EME_NO_SUPPORTED_CONFIGURATION, "No supported configurations");
                            this._configuration = r;
                        }
                        return (
                            (e.prototype._checkConfig = function (e) {
                                for (var t = this.keySystem, r = !1, i = 0, n = e; i < n.length; i++) {
                                    var s = n[i],
                                        o = { initDataTypes: s.initDataTypes, audioCapabilities: [], videoCapabilities: [], persistentState: "optional", distinctiveIdentifier: "optional", sessionTypes: ["temporary"] };
                                    if (s.audioCapabilities)
                                        for (var a = 0, _ = s.audioCapabilities; a < _.length; a++) {
                                            if ((l = _[a]).contentType) {
                                                var d = l.contentType.split(";")[0];
                                                WebKitMediaKeys.isTypeSupported(t, d) && (o.audioCapabilities.push(l), (r = !0));
                                            }
                                        }
                                    if (s.videoCapabilities)
                                        for (var v = 0, u = s.videoCapabilities; v < u.length; v++) {
                                            var l;
                                            if ((l = u[v]).contentType) {
                                                d = l.contentType.split(";")[0];
                                                WebKitMediaKeys.isTypeSupported(t, d) && (o.videoCapabilities.push(l), (r = !0));
                                            }
                                        }
                                    if (r) return o;
                                }
                                return null;
                            }),
                            (e.prototype.getConfiguration = function () {
                                return this._configuration;
                            }),
                            (e.prototype.createMediaKeys = function () {
                                var e = this;
                                return new Promise(function (t) {
                                    t(new MediaKeys(e.keySystem));
                                });
                            }),
                            e
                        );
                    })();
                function setup() {
                    navigator.requestMediaKeySystemAccess = function (e, t) {
                        return new Promise(function (r) {
                            r(new MediaKeySystemAccess(e, t));
                        });
                    };
                    var e = HTMLMediaElement.prototype;
                    delete e.mediaKeys, (e.setMediaKeys = _setMediaKeys);
                }
                exports.setup = setup;
            },
            {
                "../../../enums/errors": 44,
                "../../../enums/event": 45,
                "../../../error/eme": 56,
                "../../defer": 21,
                "./emit_encrypted": 25,
                "./license_request_event": 27,
                "@js-sdk/debug-tools": 11,
                "@spotify-internal/emitter": 71,
                tslib: 190,
            },
        ],
        30: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.setup = void 0);
                var tslib_1 = require("tslib"),
                    debug_tools_1 = require("@js-sdk/debug-tools"),
                    emitter_1 = require("@spotify-internal/emitter"),
                    errors_1 = require("../../../enums/errors"),
                    event_1 = require("../../../enums/event"),
                    eme_1 = require("../../../error/eme"),
                    emit_encrypted_1 = require("./emit_encrypted"),
                    defer_1 = require("../../defer"),
                    license_request_event_1 = require("./license_request_event"),
                    debugLogger = debug_tools_1.logging.forTag("eme_polyfill.v0_1b"),
                    MediaKeySession = (function (e) {
                        function t(t, i, s) {
                            var r = e.call(this) || this;
                            return (
                                (r._mediaElement = null),
                                (r._lastUpdateDeferred = null),
                                (r._lastGenerateResolver = null),
                                (r.sessionId = null),
                                (r._keySystem = t),
                                (r._mediaElement = i),
                                (r._prefix = s),
                                (r.addEventListener = r.addListener),
                                (r.removeEventListener = r.removeListener),
                                r
                            );
                        }
                        return (
                            tslib_1.__extends(t, e),
                            (t.prototype._addPrefix = function (e) {
                                return this._prefix
                                    ? this._prefix +
                                          e.replace(/\b[a-z]/, function (e) {
                                              return e.toUpperCase();
                                          })
                                    : e;
                            }),
                            (t.prototype.generateComplete = function (e) {
                                this.emitEvent(new license_request_event_1.LicenseRequestEvent(e)), this._lastGenerateResolver && (this._lastGenerateResolver.resolve(!0), (this._lastGenerateResolver = null));
                            }),
                            (t.prototype.updateComplete = function () {
                                this._lastUpdateDeferred && (this._lastUpdateDeferred.resolve(!0), (this._lastUpdateDeferred = null)), this.emit(event_1.Event.KEY_SESSION_STATUSES_CHANGE, null);
                            }),
                            (t.prototype.handleErrorEvent = function (e) {
                                var t = new eme_1.EMEError(errors_1.Errors.EME_MEDIA_KEY_SESSION_V0_1B_ERROR, "MediaKeySession v0.1b Error");
                                (t.debug.errorCode = e.errorCode),
                                    (t.debug.systemCode = e.systemCode),
                                    !e.sessionId && this._lastGenerateResolver
                                        ? (this._lastGenerateResolver.reject(t), (this._lastGenerateResolver = null))
                                        : e.sessionId && this._lastUpdateDeferred
                                        ? (this._lastUpdateDeferred.reject(t), (this._lastUpdateDeferred = null))
                                        : this.emit(event_1.Event.KEY_SESSION_STATUSES_CHANGE, null);
                            }),
                            (t.prototype.generateRequest = function (e, t) {
                                var i = this;
                                return this._mediaElement
                                    ? new Promise(function (e, s) {
                                          i._lastGenerateResolver = { resolve: e, reject: s };
                                          try {
                                              i._mediaElement[i._addPrefix("generateKeyRequest")](i._keySystem, new Uint8Array(t));
                                          } catch (e) {
                                              s(e), (i._lastGenerateResolver = null);
                                          }
                                      })
                                    : Promise.reject(new ReferenceError("InvalidState: Media keys are not attached."));
                            }),
                            (t.prototype.update = function (e) {
                                if (!this._mediaElement) return Promise.reject(new ReferenceError("InvalidState: Media keys are not attached."));
                                if (this._lastUpdateDeferred) {
                                    var t = this.update.bind(this, e);
                                    return this._lastUpdateDeferred.promise.then(t, t);
                                }
                                var i = defer_1.defer();
                                this._lastUpdateDeferred = i;
                                try {
                                    this._mediaElement[this._addPrefix("addKey")](this._keySystem, new Uint8Array(e), null, this.sessionId);
                                } catch (e) {
                                    i.reject(e), (this._lastUpdateDeferred = null);
                                }
                                return i.promise;
                            }),
                            (t.prototype.close = function () {
                                if (this.sessionId && this._mediaElement)
                                    try {
                                        this._mediaElement[this._addPrefix("cancelKeyRequest")](this._keySystem, this.sessionId);
                                    } catch (e) {
                                        debugLogger.warn("Could not close keysession", e);
                                    }
                                return Promise.resolve(!0);
                            }),
                            t
                        );
                    })(emitter_1.EventEmitter),
                    MediaKeys = (function () {
                        function e(e, t) {
                            void 0 === t && (t = ""),
                                (this._mediaElement = null),
                                (this._waitingForSessionIds = []),
                                (this._sessionMap = {}),
                                (this.shouldRefreshPerTrack = !0),
                                (this._keySystem = e),
                                (this._prefix = t),
                                (this._onKeyMessage = this._onKeyMessage.bind(this)),
                                (this._onKeyAdded = this._onKeyAdded.bind(this)),
                                (this._onKeyError = this._onKeyError.bind(this));
                        }
                        return (
                            (e.prototype.attach = function (e) {
                                this._mediaElement = e;
                                var t = this._prefix;
                                e.addEventListener(t + event_1.Event.V0_1B_NEEDKEY, emit_encrypted_1.emitEncrypted);
                                var i = e.addEventListener.bind(e);
                                i(t + event_1.Event.V0_1B_KEY_ADDED, this._onKeyAdded), i(t + event_1.Event.V0_1B_KEY_ERROR, this._onKeyError), i(t + event_1.Event.V0_1B_KEY_MESSAGE, this._onKeyMessage);
                            }),
                            (e.prototype.detach = function (e) {
                                this._mediaElement = null;
                                var t = this._prefix;
                                e.removeEventListener(t + event_1.Event.V0_1B_NEEDKEY, emit_encrypted_1.emitEncrypted);
                                var i = e.removeEventListener.bind(e);
                                i(t + event_1.Event.V0_1B_KEY_ADDED, this._onKeyAdded), i(t + event_1.Event.V0_1B_KEY_ERROR, this._onKeyError), i(t + event_1.Event.V0_1B_KEY_MESSAGE, this._onKeyMessage);
                            }),
                            (e.prototype._getSession = function (e) {
                                var t = this._sessionMap[e];
                                if (t) return t;
                                var i = this._waitingForSessionIds.shift();
                                return i ? ((i.sessionId = e), (this._sessionMap[e] = i), i) : null;
                            }),
                            (e.prototype._onKeyMessage = function (e) {
                                var t = this._getSession(e.sessionId);
                                t ? t.generateComplete(e.message) : debugLogger.warn("Got keymessage without session.");
                            }),
                            (e.prototype._onKeyAdded = function (e) {
                                var t = this._getSession(e.sessionId);
                                t ? t.updateComplete() : debugLogger.warn("Got keyadded without session.");
                            }),
                            (e.prototype._onKeyError = function (e) {
                                var t = this._getSession(e.sessionId);
                                t ? t.handleErrorEvent(e) : debugLogger.warn("Got keyerror without session.");
                            }),
                            (e.prototype.setServerCertificate = function () {
                                return Promise.reject(new eme_1.EMEError(errors_1.Errors.EME_CANNOT_SET_CERTIFICATE_FOR_PLATFORM, "Cannot set server certificate on this platform."));
                            }),
                            (e.prototype.createSession = function () {
                                var e = new MediaKeySession(this._keySystem, this._mediaElement, this._prefix);
                                return this._waitingForSessionIds.push(e), e;
                            }),
                            e
                        );
                    })();
                function _setMediaKeys(e) {
                    var t = this.mediaKeys;
                    return t && t !== e && t.detach(this), delete this.mediaKeys, (this.mediaKeys = e), e && e.attach(this), Promise.resolve();
                }
                var MediaKeySystemAccess = (function () {
                    function e(e, t, i) {
                        if (((this._configuration = null), (this.keySystem = e), (this._prefix = i), !this._checkConfig(t))) throw new eme_1.EMEError(errors_1.Errors.EME_NO_SUPPORTED_CONFIGURATION, "No supported configurations");
                    }
                    return (
                        (e.prototype._checkConfig = function (e) {
                            for (var t = this.keySystem, i = document.createElement("video"), s = 0, r = e.length; s < r; s++) {
                                var n = e[s],
                                    o = { initDataTypes: n.initDataTypes, audioCapabilities: [], videoCapabilities: [], persistentState: "optional", distinctiveIdentifier: "optional", sessionTypes: ["temporary"], label: n.label },
                                    a = void 0,
                                    d = void 0,
                                    _ = void 0,
                                    l = void 0,
                                    u = !1;
                                if (n.audioCapabilities && n.audioCapabilities.length && o.audioCapabilities)
                                    for (u = !1, a = 0, d = n.audioCapabilities.length; a < d; a++)
                                        (_ = n.audioCapabilities[a]).contentType && (l = _.contentType.split(";")[0]), l && i.canPlayType(l, t) && (o.audioCapabilities.push(_), (u = !0));
                                if (n.videoCapabilities && n.videoCapabilities.length && o.videoCapabilities)
                                    for (u = !1, a = 0, d = n.videoCapabilities.length; a < d; a++)
                                        (l = (_ = n.videoCapabilities[a]).contentType), _.contentType && (l = _.contentType.split(";")[0]), l && i.canPlayType(l, t) && (o.videoCapabilities.push(_), (u = !0));
                                if (u) return (this._configuration = o), !0;
                            }
                            return !1;
                        }),
                        (e.prototype.getConfiguration = function () {
                            return this._configuration;
                        }),
                        (e.prototype.createMediaKeys = function () {
                            var e = this;
                            return new Promise(function (t) {
                                t(new MediaKeys(e.keySystem, e._prefix));
                            });
                        }),
                        e
                    );
                })();
                function setup(e) {
                    navigator.requestMediaKeySystemAccess = function (t, i) {
                        return new Promise(function (s) {
                            s(new MediaKeySystemAccess(t, i, e));
                        });
                    };
                    var t = HTMLMediaElement.prototype;
                    delete t.mediaKeys, (t.setMediaKeys = _setMediaKeys);
                }
                exports.setup = setup;
            },
            {
                "../../../enums/errors": 44,
                "../../../enums/event": 45,
                "../../../error/eme": 56,
                "../../defer": 21,
                "./emit_encrypted": 25,
                "./license_request_event": 27,
                "@js-sdk/debug-tools": 11,
                "@spotify-internal/emitter": 71,
                tslib: 190,
            },
        ],
        31: [
            function (require, module, exports) {
                "use strict";
                function getMediaKeySystemConfiguration(i, e) {
                    for (var t, o, a = 0, d = i.length; a < d; a++) {
                        var n = i[a],
                            l = { audioCapabilities: [], videoCapabilities: [] },
                            s = void 0,
                            u = void 0,
                            r = void 0,
                            p = void 0,
                            v = !1;
                        if (null === (t = n.audioCapabilities) || void 0 === t ? void 0 : t.length)
                            for (v = !1, s = 0, u = n.audioCapabilities.length; s < u; s++) (p = (r = n.audioCapabilities[s]).contentType) && e(p) && (l.audioCapabilities.push(r), (v = !0));
                        if (null === (o = n.videoCapabilities) || void 0 === o ? void 0 : o.length)
                            for (v = !1, s = 0, u = n.videoCapabilities.length; s < u; s++) (p = (r = n.videoCapabilities[s]).contentType) && e(p) && (l.videoCapabilities.push(r), (v = !0));
                        if (v) return l;
                    }
                    return null;
                }
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.getMediaKeySystemConfiguration = void 0), (exports.getMediaKeySystemConfiguration = getMediaKeySystemConfiguration);
            },
            {},
        ],
        32: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.createProtectedManifestURL = exports.createHLSDataURL = exports.createProtectedManifest = void 0);
                var encoding_1 = require("@js-sdk/encoding");
                function generateSegments(e) {
                    return e
                        .map(function (e) {
                            if (e.byteEnd && void 0 !== e.byteStart) {
                                var t = "" + (1 + e.byteEnd - e.byteStart);
                                return (t += "@" + e.byteStart), "#EXTINF:" + e.duration + ",\n#EXT-X-BYTERANGE:" + t + "\n" + e.url;
                            }
                            return "#EXTINF:" + e.duration + ",\n" + e.url;
                        })
                        .join("\n");
                }
                function createProtectedManifest(e) {
                    var t,
                        r = generateSegments(e.segments),
                        a = e.assetID ? '#EXT-X-KEY:METHOD=SAMPLE-AES,URI="skd://' + e.assetID + '",KEYFORMATVERSIONS="1",KEYFORMAT="com.apple.streamingkeydelivery"' : "",
                        n = e.map ? '#EXT-X-MAP:URI="' + e.map.url + '"' : "";
                    return (
                        (null === (t = e.map) || void 0 === t ? void 0 : t.byteEnd) && void 0 !== e.map.byteStart && (n += ',BYTERANGE="' + (1 + e.map.byteEnd) + "@" + e.map.byteStart + '"'),
                        "#EXTM3U\n#EXT-X-VERSION:6\n#EXT-X-TARGETDURATION:" + Math.floor(e.targetDuration) + "\n#EXT-X-MEDIA-SEQUENCE:0\n#EXT-X-PLAYLIST-TYPE:VOD\n" + (n ? a + "\n" + n : a) + "\n" + r + "\n#EXT-X-ENDLIST"
                    );
                }
                function createHLSDataURL(e) {
                    return "data:application/vnd.apple.mpegurl;base64," + encoding_1.Base64.encode(e);
                }
                function createProtectedManifestURL(e) {
                    return createHLSDataURL(createProtectedManifest(e));
                }
                (exports.createProtectedManifest = createProtectedManifest), (exports.createHLSDataURL = createHLSDataURL), (exports.createProtectedManifestURL = createProtectedManifestURL);
            },
            { "@js-sdk/encoding": 15 },
        ],
        33: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.LicenseURLResolver = void 0);
                var errors_1 = require("../enums/errors"),
                    license_1 = require("../error/license"),
                    LICENSE_URL_ENDPOINT = "@webgate/melody/v1/license_url",
                    EXPIRY_THRESHOLD = 6e4,
                    LicenseURLResolver = (function () {
                        function e(e) {
                            var r = this;
                            (this._sdk = { name: "", version: "" }),
                                (this._securityLevel = null),
                                (this._urls = {}),
                                e.sdk && (this._sdk = e.sdk),
                                e.securityLevel && (this._securityLevel = e.securityLevel),
                                (this._transport = e.transport),
                                this._transport.on(this._transport.EVENT_CONNECTION_ID, function () {
                                    r._urls = {};
                                });
                        }
                        return (
                            (e.prototype.get = function (e, r) {
                                var s = this,
                                    t = e + ":" + r,
                                    i = this._urls[t];
                                if (i && i.expires > Date.now() + EXPIRY_THRESHOLD) return Promise.resolve(i.uri);
                                var n = LICENSE_URL_ENDPOINT + "?keysystem=" + e + "&mediatype=" + r + "&sdk_name=" + this._sdk.name + "&sdk_version=" + this._sdk.version;
                                return this._transport
                                    .request(n, {
                                        responseType: "json",
                                        retry: {
                                            condition: function (e, r) {
                                                var s = e.getStatusFamily();
                                                return s === r.SERVER_ERROR || s === r.CONNECTION_ERROR;
                                            },
                                        },
                                    })
                                    .then(function (e) {
                                        var r,
                                            i = e.body;
                                        return i && 200 === e.status
                                            ? ((i.expires *= 1e3), (i.uri = "@webgate/" + i.uri), s._securityLevel && (i.uri += [-1 !== i.uri.indexOf("?") ? "&" : "?", "sl=", s._securityLevel].join("")), (s._urls[t] = i), i.uri)
                                            : (((r = i
                                                  ? 400 === e.status && i && "deprecated-version" === i.code
                                                      ? license_1.LicenseError.fatal(errors_1.Errors.LICENSE_RESOLVER_DEPRECATED_VERSION, "This version of the SDK is no longer supported. Please upgrade")
                                                      : new license_1.LicenseError(errors_1.Errors.LICENSE_RESOLVER_CANT_RESOLVE_URL, "License URL endpoint responded with status " + e.status)
                                                  : license_1.LicenseError.fatal(errors_1.Errors.LICENSE_RESOLVE_INVALID_RESPONSE, "License URL endpoint responded with invalid response")).status = e.status),
                                              Promise.reject(r));
                                    });
                            }),
                            (e.prototype.remove = function (e, r) {
                                this._urls[e + ":" + r] = null;
                            }),
                            e
                        );
                    })();
                exports.LicenseURLResolver = LicenseURLResolver;
            },
            { "../enums/errors": 44, "../error/license": 59 },
        ],
        34: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.Logger = void 0);
                var tslib_1 = require("tslib"),
                    emitter_1 = require("@spotify-internal/emitter"),
                    debug_tools_1 = require("@js-sdk/debug-tools"),
                    event_1 = require("../enums/event"),
                    errors_1 = require("../enums/errors"),
                    logging_1 = require("../error/logging"),
                    version_1 = require("../version"),
                    debugLogger = debug_tools_1.logging.forTag("playback.logger"),
                    MAX_SAFE_SEQUENCE_ID = 9007199254740991,
                    Logger = (function (e) {
                        function t(t) {
                            var r = e.call(this) || this;
                            return (
                                (r._currentTrackingData = null),
                                (r._sequenceId = 0),
                                (r._sequenceSessionStorage = {}),
                                (r._sessionId = "0"),
                                (r._transport = t.transport),
                                (r._transportLogger = t.logger),
                                (r._player = t.player),
                                r._init(),
                                r
                            );
                        }
                        return (
                            tslib_1.__extends(t, e),
                            (t.prototype._init = function () {
                                var e = this._player;
                                e.on(event_1.Event.PLAYER_LOAD, this._onPlayerLoad.bind(this)),
                                    e.on(event_1.Event.PLAYER_ERROR, this._onError.bind(this, !1)),
                                    e.on(event_1.Event.PLAYER_WARNING, this._onError.bind(this, !0)),
                                    e.on(event_1.Event.PLAYER_PRELOADING_ERROR, this._onError.bind(this, !1)),
                                    e.on(event_1.Event.PLAYER_TRACKING_DATA_CREATED, this._onTrackingDataCreated.bind(this)),
                                    e.on(event_1.Event.PLAYER_TRACKING_DATA_FINALIZED, this._onTrackingDataFinalized.bind(this)),
                                    e.on(event_1.Event.PLAYER_PLAYBACK_START, this._onPlaybackStart.bind(this));
                            }),
                            (t.prototype._emitError = function (e, t) {
                                this.emit(event_1.Event.LOGGER_ERROR, { error: e, trackingData: t });
                            }),
                            (t.prototype._onError = function (e, t) {
                                var r,
                                    n,
                                    s,
                                    i = t.data,
                                    o = this._currentTrackingData;
                                if (o && !o.noLog) {
                                    var a = i.error,
                                        _ = null !== (r = null == a ? void 0 : a.debug) && void 0 !== r ? r : {};
                                    _.position = "position" in i ? i.position : 0;
                                    var l = {
                                        track: i.track || {},
                                        debug: _,
                                        preloading: "preloading" in i && !!i.preloading,
                                        session_id: this._sessionId,
                                        playback_id: o.playbackId || null,
                                        player_play_id: "playId" in i ? i.playId : null,
                                        http_status_code: null !== (n = null == a ? void 0 : a.status) && void 0 !== n ? n : null,
                                        license_server: null !== (s = null == a ? void 0 : a.licenseServer) && void 0 !== s ? s : null,
                                    };
                                    this._logError(a.code || errors_1.Errors.UNKNOWN, a, l, e);
                                }
                            }),
                            (t.prototype._onPlayerLoad = function (e) {
                                var t = e.data.logData;
                                if (t)
                                    if (t.impressionURLs) for (var r = t.impressionURLs.length; r--; ) this._logImpression(t.impressionURLs[r]);
                                    else t.impressionURL && this._logImpression(t.impressionURL);
                            }),
                            (t.prototype._onPlaybackStart = function (e) {
                                var t = e.data.trackingData;
                                t.noLog || t.noStats || this._logPlaybackStart(t);
                            }),
                            (t.prototype._onTrackingDataCreated = function (e) {
                                var t = e.data.trackingData;
                                t.noLog ? (this._currentTrackingData = null) : ((this._currentTrackingData = t), this._setSessionId(), t.noTSV || this._setSequenceId());
                            }),
                            (t.prototype._setSessionId = function () {
                                this._sessionId = this._transport.getInitTime().toString();
                            }),
                            (t.prototype._setSequenceId = function () {
                                this._sessionId && (this._sequenceId = this._getSequenceId(this._sessionId));
                            }),
                            (t.prototype._onTrackingDataFinalized = function (e) {
                                var t = e.data.trackingData;
                                if (!t.noLog) {
                                    var r = this._sessionId !== this._transport.getInitTime().toString();
                                    if ((r && this._setSessionId(), t.playbackId && !t.noTSV)) {
                                        if ((r && this._setSequenceId(), !t.playIntended && !t.played)) return void this._rollbackSequenceId(this._sessionId);
                                        this._logTrackStreamVerification(t);
                                    }
                                    t.noStats || this._logPlaybackStats(t);
                                }
                            }),
                            (t.prototype._logTrackStreamVerification = function (e) {
                                var t = this,
                                    r = { play_track: e.currentTrackUri, playback_id: e.playbackId, ms_played: e.msPlayed, session_id: this._sessionId, sequence_id: this._sequenceId, next_playback_id: e.nextPlaybackId };
                                debugLogger.debug("Logged TrackStreamVerification", r),
                                    this._transportLogger.logTrackStreamVerification(r).catch(function (n) {
                                        var s = new logging_1.LoggingError(errors_1.Errors.TSV_SENDING_FAILED, n.message || "Unknown reason.");
                                        t._logError(s.code, n, r), t._emitError(s, e);
                                    });
                            }),
                            (t.prototype._logPlaybackStats = function (e) {
                                var t = this,
                                    r = {
                                        play_track: e.currentTrackUri,
                                        file_id: e.fileId,
                                        playback_id: e.playbackId,
                                        internal_play_id: e.internalPlayId,
                                        memory_cached: e.memoryCached,
                                        persistent_cached: e.persistentCached,
                                        audio_format: e.audiocodec || "",
                                        video_format: e.videocodec || "",
                                        manifest_id: e.fileId,
                                        protected: !1,
                                        isProtected: e.isProtected,
                                        key_system: e.keySystem,
                                        key_system_impl: e.keySystemImpl,
                                        urls_json: JSON.stringify(e.urls),
                                        start_time: e.loadTime,
                                        end_time: e.stopTime,
                                        external_start_time: e.externalLoadTime,
                                        ms_play_latency: e.msPlayLatency,
                                        ms_init_latency: e.msInitLatency,
                                        ms_head_latency: e.msHeadLatency,
                                        ms_manifest_latency: e.msManifestLatency,
                                        ms_resolve_latency: e.msResolveLatency,
                                        ms_license_session_latency: e.msLicenseSessionLatency,
                                        ms_license_generation_latency: e.msLicenseGenerationLatency,
                                        ms_license_request_latency: e.msLicenseRequestLatency,
                                        ms_license_update_latency: e.msLicenseUpdateLatency,
                                        ms_played: e.msPlayed,
                                        ms_nominal_played: e.msPlayed,
                                        ms_file_duration: e.msFileDuration,
                                        ms_actual_duration: e.msActualDuration,
                                        ms_start_position: e.startPosition,
                                        ms_end_position: e.position,
                                        ms_seek_rebuffer: e.msSeekRebuffering,
                                        ms_seek_rebuffer_longest: e.maxMsSeekRebuffering,
                                        ms_stall_rebuffer: e.msStalled,
                                        ms_stall_rebuffer_longest: e.maxMsStalled,
                                        n_stalls: e.nStalls,
                                        n_seekback: e.nSeeksBackward,
                                        n_seekforward: e.nSeeksForward,
                                        start_bitrate: e.startBitrate || e.bitrate || 0,
                                        time_weighted_bitrate: e.timeWeightedBitrate,
                                        reason_start: e.reasonStart,
                                        reason_end: e.reasonEnd,
                                        initially_paused: !e.playIntended,
                                        had_error: e.hadError,
                                        n_warnings: e.nWarnings,
                                        n_navigator_offline: e.nOffline,
                                        session_id: this._sessionId,
                                        sequence_id: this._sequenceId,
                                    };
                                debugLogger.info("Logging PlaybackStats"),
                                    this._transportLogger.logJSSDKPlaybackStats(r).catch(function (n) {
                                        var s = new logging_1.LoggingError(errors_1.Errors.PLAYBACK_STATS_SENDING_FAILED, n.message || "Unknown reason.");
                                        t._logError(s.code, n, r), t._emitError(s, e);
                                    });
                            }),
                            (t.prototype._logPlaybackStart = function (e) {
                                var t = this,
                                    r = { play_track: e.currentTrackUri, file_id: e.fileId, playback_id: e.playbackId, session_id: this._sessionId, ms_start_position: e.startPosition, initially_paused: !e.playIntended };
                                debugLogger.info("Logging PlaybackStart"),
                                    this._transportLogger.logJSSDKPlaybackStart(r).catch(function (n) {
                                        var s = new logging_1.LoggingError(errors_1.Errors.PLAYBACK_START_SENDING_FAILED, n.message || "Unknown reason.");
                                        t._logError(s.code, n, r), t._emitError(s, e);
                                    });
                            }),
                            (t.prototype._getSequenceId = function (e) {
                                var t = this._sequenceSessionStorage[e];
                                return t || (t = 0), t + 1 >= MAX_SAFE_SEQUENCE_ID && (t = 0), (this._sequenceSessionStorage[e] = t + 1), t;
                            }),
                            (t.prototype._rollbackSequenceId = function (e) {
                                var t = this._sequenceSessionStorage[e];
                                t && (this._sequenceSessionStorage[e] = Math.max(t - 1, 0));
                            }),
                            (t.prototype._logImpression = function (e) {
                                this._transport.request(e, { forget: !0 }).catch(function (e) {
                                    debugLogger.warn("Unable to send impression request", e);
                                });
                            }),
                            (t.prototype._logError = function (e, t, r, n) {
                                var s = "";
                                t && ((s = t.stack || "") || (s = t.toString()));
                                var i = { source: "playback", source_version: version_1.default.tagged, type: e, message: t && t.message, stack: s, json_data: r, json_data_version: "1.0.0" };
                                n
                                    ? this._transportLogger.logJSSDKWarning(i, "object").catch(function (e) {
                                          return debugLogger.warn("Failed to log warning", i, e);
                                      })
                                    : this._transportLogger.logJSSDKError(i, "object").catch(function (e) {
                                          return debugLogger.warn("Failed to log error", i, e);
                                      });
                            }),
                            (t.create = function (e) {
                                return new t(e);
                            }),
                            t
                        );
                    })(emitter_1.EventEmitter);
                exports.Logger = Logger;
            },
            { "../enums/errors": 44, "../enums/event": 45, "../error/logging": 60, "../version": 67, "@js-sdk/debug-tools": 11, "@spotify-internal/emitter": 71, tslib: 190 },
        ],
        35: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.MovingAverage = void 0);
                var MovingAverage = (function () {
                    function t(t) {
                        if (((this._estimate = 0), (this._totalWeight = 0), t < 0)) throw new TypeError("Halflife must be set to a positive value.");
                        this._weightingDecrease = Math.exp(Math.log(0.5) / t);
                    }
                    return (
                        (t.prototype.sample = function (t, e) {
                            var i = Math.pow(this._weightingDecrease, t),
                                s = e * (1 - i) + i * this._estimate;
                            isNaN(s) || ((this._estimate = s), (this._totalWeight += e));
                        }),
                        (t.prototype.getEstimate = function () {
                            return this._estimate / 1 - Math.pow(this._weightingDecrease, this._totalWeight);
                        }),
                        t
                    );
                })();
                exports.MovingAverage = MovingAverage;
            },
            {},
        ],
        36: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.Player = void 0);
                var tslib_1 = require("tslib"),
                    emitter_1 = require("@spotify-internal/emitter"),
                    linkedlist_1 = require("@spotify-internal/linkedlist"),
                    debug_tools_1 = require("@js-sdk/debug-tools"),
                    event_1 = require("../enums/event"),
                    key_system_1 = require("../enums/key_system"),
                    errors_1 = require("../enums/errors"),
                    subtitle_mode_1 = require("../enums/subtitle_mode"),
                    operation_result_1 = require("../enums/operation_result"),
                    media_format_1 = require("../enums/media_format"),
                    player_1 = require("../error/player"),
                    manager_1 = require("./eme/manager"),
                    configs_1 = require("./eme/configs"),
                    video_content_1 = require("./video_content"),
                    audio_content_1 = require("./audio_content"),
                    buffer_1 = require("./buffer"),
                    bandwidth_estimator_1 = require("./bandwidth_estimator"),
                    eme_1 = require("./helpers/eme"),
                    debugLogger = debug_tools_1.logging.forTag("playback.player"),
                    CAN_PRELOAD_THRESHOLD = 10,
                    TRACK_CACHE_SIZE = 2,
                    BLOB_URL_EXP = /^blob:/;
                function _secToMS(e) {
                    return Math.ceil(1e3 * e);
                }
                function _msToSec(e) {
                    return e / 1e3;
                }
                function hasUriProperty(e, t) {
                    return t && t.hasOwnProperty(e);
                }
                function _createPlayerElement(e) {
                    return document.createElement(e);
                }
                function _getMediaConfig(e, t) {
                    var r = t || document.createElement("video"),
                        n = function (e) {
                            r.canPlayType("audio/mp3") && (e.formats.audio.push("audio/mp3"), (e.supports.unprotected_audio = !0));
                        };
                    if (e)
                        return e.getKeySystemInfo().then(function (e) {
                            var t = {
                                supports: { protected_audio: !!e.audioFormats.length, unprotected_audio: !0, protected_video: !!e.videoFormats.length, unprotected_video: !0 },
                                formats: {
                                    audio: e.audioFormats.map(function (e) {
                                        return e.contentType;
                                    }),
                                    video: e.videoFormats.map(function (e) {
                                        return e.contentType;
                                    }),
                                },
                            };
                            return (t.keysystem = e.keySystem), (t.keysystem_impl = e.keySystemImpl), n(t), t;
                        });
                    var i = eme_1.getMediaKeySystemConfiguration([configs_1.EMEConfigs[0]], function (e) {
                            return "probably" === r.canPlayType(e.split(";")[0]);
                        }),
                        o = [],
                        a = [];
                    i &&
                        ((o = i.audioCapabilities.map(function (e) {
                            return e.contentType;
                        })),
                        (a = i.videoCapabilities.map(function (e) {
                            return e.contentType;
                        })));
                    var s = { supports: { protected_audio: !1, unprotected_audio: !!o.length, protected_video: !1, unprotected_video: !!a.length }, formats: { audio: o, video: a } };
                    return n(s), Promise.resolve(s);
                }
                var Player = (function (e) {
                    function t(t) {
                        var r = e.call(this) || this;
                        return (
                            (r._subtitlesVisible = !1),
                            (r._cubicVolume = !1),
                            (r._player = null),
                            (r._emeManager = null),
                            (r._currentContent = null),
                            (r._upcomingContent = null),
                            (r._preloadingTracks = {}),
                            (r._playId = 0),
                            (r._loaded = !1),
                            (r._playerActivated = !1),
                            (r._pauseToken = 0),
                            (r._syntheticEndedToken = 0),
                            (r._activeCodecs = []),
                            (r._playerVolume = 1),
                            (r._fatalOnNextError = !1),
                            (r._canPreloadEmitted = !1),
                            (r._lastTimeUpdatePostion = 0),
                            (r._audioResolver = t.audioResolver),
                            (r._clearBufferOnSeek = !!t.clearBufferOnSeek),
                            (r._createPlayer = t.createPlayer || _createPlayerElement),
                            (r._cubicVolume = t.cubicVolume),
                            (r._disableCache = !!t.disableCache),
                            (r._licenseURLResolver = t.licenseURLResolver),
                            (r._newBufferPerTrack = !!t.newBufferPerTrack),
                            (r._newElementPerTrack = !!t.newElementPerTrack),
                            (r._newMediaKeysPerTrack = !!t.newMediaKeysPerTrack),
                            (r._rebufferOnQuotaExceeded = !!t.rebufferOnQuotaExceeded),
                            (r._synthesizeEnded = !!t.synthesizeEnded),
                            (r._tracker = t.tracker),
                            (r._transport = t.transport),
                            (r._videoPlayerContainer = t.videoPlayerContainer),
                            (r._audioPlayerContainer = t.audioPlayerContainer),
                            (r._videoResolver = t.videoResolver),
                            (r._abrManager = new bandwidth_estimator_1.BandwidthEstimator()),
                            (r._emeManager = t.disallowProtectedTracks ? null : t.emeManager || null),
                            (r._disallowProfile = t.disallowProfile),
                            (r._cache = new linkedlist_1.LRUCache(t.trackCacheSize || TRACK_CACHE_SIZE)),
                            (r._defaultSubtitleLanguage = t.preferredSubtitleLanguage || navigator.language),
                            (r._activeSubtitleLanguage = r._defaultSubtitleLanguage),
                            debugLogger.info("Setting Player track cache to:", t.trackCacheSize || TRACK_CACHE_SIZE),
                            (r._buffer = buffer_1.ContentBuffer.create(r._tracker, void 0, { disableBufferAbort: !!t.disableBufferAbort, noInit: !0 })),
                            (r._onCanPlay = r._onCanPlay.bind(r)),
                            (r._onCanPlayThrough = r._onCanPlayThrough.bind(r)),
                            (r._onTimeUpdate = r._onTimeUpdate.bind(r)),
                            (r._onDurationChange = r._onDurationChange.bind(r)),
                            (r._onPlaying = r._onPlaying.bind(r)),
                            (r._onPause = r._onPause.bind(r)),
                            (r._onSeeking = r._onSeeking.bind(r)),
                            (r._onEncrypted = r._onEncrypted.bind(r)),
                            (r._onEnded = r._onEnded.bind(r)),
                            (r._onError = r._onError.bind(r)),
                            (r._onRequiresDuration = r._onRequiresDuration.bind(r)),
                            (r._onQuotaExceeded = r._onQuotaExceeded.bind(r)),
                            (r._onLoadedMetadata = r._onLoadedMetadata.bind(r)),
                            (r._onWaiting = r._onWaiting.bind(r)),
                            (r._onPlayedThresholdReached = r._onPlayedThresholdReached.bind(r)),
                            (r._onSyntheticEnded = r._onSyntheticEnded.bind(r)),
                            (r._onLicenseRequestCapped = r._onLicenseRequestCapped.bind(r)),
                            (r._onLicenseRequestError = r._onLicenseRequestError.bind(r)),
                            (r._onNavigatorOffline = r._onNavigatorOffline.bind(r)),
                            (r._onBufferError = r._onBufferError.bind(r)),
                            (r._emitWarning = r._emitWarning.bind(r)),
                            (r._handleLoadingComplete = r._handleLoadingComplete.bind(r)),
                            r.proxyEmitSync(r._tracker, event_1.Event.TRACKER_TRACKING_DATA_CREATED, event_1.Event.PLAYER_TRACKING_DATA_CREATED),
                            r.proxyEmitSync(r._tracker, event_1.Event.TRACKER_TRACKING_DATA_FINALIZED, event_1.Event.PLAYER_TRACKING_DATA_FINALIZED),
                            r.proxyEmitSync(r._tracker, event_1.Event.TRACKER_PLAYBACK_START, event_1.Event.PLAYER_PLAYBACK_START),
                            r._tracker.on(event_1.Event.TRACKER_PLAYED_THRESHOLD_REACHED, r._onPlayedThresholdReached),
                            r._emeManager && (r._emeManager.on(event_1.Event.EME_LICENSE_REQUEST_CAPPED, r._onLicenseRequestCapped), r._emeManager.on(event_1.Event.EME_LICENSE_REQUEST_ERROR, r._onLicenseRequestError)),
                            r._disableCache && debugLogger.info("Cache disabled."),
                            r._transport.on(r._transport.EVENT_CONNECTION_OFFLINE, r._onNavigatorOffline),
                            r._buffer.on(event_1.Event.BUFFER_APPEND_ERROR, r._onBufferError),
                            r._buffer.on(event_1.Event.BUFFER_QUOTA_EXCEEDED, r._onQuotaExceeded),
                            r.proxyEmit(r._buffer, event_1.Event.BUFFER_STALLED, event_1.Event.PLAYER_BUFFER_STALLED),
                            r.proxyEmit(r._buffer, event_1.Event.BUFFERING_START, event_1.Event.PLAYER_BUFFERING_START),
                            r.proxyEmit(r._buffer, event_1.Event.BUFFERING_END, event_1.Event.PLAYER_BUFFERING_END),
                            r
                        );
                    }
                    return (
                        tslib_1.__extends(t, e),
                        (t.create = function (e) {
                            var r = tslib_1.__assign({}, e);
                            return manager_1.EMEManager.create({
                                transport: e.transport,
                                disallowRobustnessValues: e.disallowRobustnessValues,
                                disallowCodecs: e.disallowCodecs,
                                noServerCertificate: e.noServerCertificate,
                                precacheServerCertificate: e.precacheServerCertificate,
                                unauthServerCertificateBase: e.unauthServerCertificateBase,
                                preferredKeySystems: e.preferredKeySystems,
                            })
                                .then(function (e) {
                                    r.emeManager = e;
                                    var n = new t(r);
                                    return r.preinitMediaElement ? n._preinitMediaElement() : n;
                                })
                                .catch(function (n) {
                                    if (e.enableWithoutEME) return t.createWithOptions(r);
                                    throw n;
                                });
                        }),
                        (t.createWithOptions = function (e) {
                            return new Promise(function (r) {
                                var n = new t(e);
                                r(e.preinitMediaElement ? n._preinitMediaElement() : n);
                            });
                        }),
                        (t.prototype._onLicenseRequestError = function (e) {
                            if (e.data.playId === this._playId) {
                                var t = this._currentContent;
                                if (t) {
                                    var r = e.data.error;
                                    r.shouldRefreshEndpoint && this._licenseURLResolver.remove(t.getKeySystem(), t.getMediaType()), this._emitError(r, !r.unrecoverable, t.toLogJSON());
                                }
                            }
                        }),
                        (t.prototype._onLicenseRequestCapped = function (e) {
                            e.data.playId === this._playId && this._currentContent && (this.pause(), this.emit(event_1.Event.PLAYER_CAPPED, null));
                        }),
                        (t.prototype._shouldNextErrorBeFatal = function () {
                            var e = this._currentContent;
                            if (!e) return !1;
                            if (e.isAd() || !e.isProtected()) return !1;
                            if (!this._player) return !1;
                            var t = this._player.error;
                            if (!(t && t instanceof MediaError)) return (this._fatalOnNextError = !1), !1;
                            switch (t.code) {
                                case MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED:
                                case MediaError.MEDIA_ERR_DECODE:
                                    return !0;
                                default:
                                    return !1;
                            }
                        }),
                        (t.prototype._onNavigatorOffline = function () {
                            this._tracker.trackNavigatorOffline();
                        }),
                        (t.prototype._onBufferError = function (e) {
                            this._emitError(e.data.error, e.data.canPlayNext, e.data.track);
                        }),
                        (t.prototype._addPlayerEvents = function (e) {
                            e.addEventListener(event_1.Event.MEDIA_TIMEUPDATE, this._onTimeUpdate),
                                e.addEventListener(event_1.Event.MEDIA_PLAYING, this._onPlaying),
                                e.addEventListener(event_1.Event.MEDIA_PAUSE, this._onPause),
                                e.addEventListener(event_1.Event.MEDIA_SEEKING, this._onSeeking),
                                e.addEventListener(event_1.Event.MEDIA_ENCRYPTED, this._onEncrypted),
                                e.addEventListener(event_1.Event.MEDIA_ENDED, this._onEnded),
                                e.addEventListener(event_1.Event.MEDIA_ERROR, this._onError),
                                e.addEventListener(event_1.Event.MEDIA_LOADEDMETADATA, this._onLoadedMetadata),
                                e.addEventListener(event_1.Event.MEDIA_DURATIONCHANGE, this._onDurationChange),
                                e.addEventListener(event_1.Event.MEDIA_WAITING, this._onWaiting),
                                e.addEventListener(event_1.Event.MEDIA_CANPLAY, this._onCanPlay),
                                e.addEventListener(event_1.Event.MEDIA_CANPLAYTHROUGH, this._onCanPlayThrough),
                                e.addEventListener(event_1.Event.INTERNAL_MEDIA_REQUIRES_DURATION, this._onRequiresDuration);
                        }),
                        (t.prototype._removePlayerEvents = function (e) {
                            e.removeEventListener(event_1.Event.MEDIA_TIMEUPDATE, this._onTimeUpdate),
                                e.removeEventListener(event_1.Event.MEDIA_PLAYING, this._onPlaying),
                                e.removeEventListener(event_1.Event.MEDIA_PAUSE, this._onPause),
                                e.removeEventListener(event_1.Event.MEDIA_SEEKING, this._onSeeking),
                                e.removeEventListener(event_1.Event.MEDIA_ENCRYPTED, this._onEncrypted),
                                e.removeEventListener(event_1.Event.MEDIA_ENDED, this._onEnded),
                                e.removeEventListener(event_1.Event.MEDIA_ERROR, this._onError),
                                e.removeEventListener(event_1.Event.MEDIA_WAITING, this._onWaiting),
                                e.removeEventListener(event_1.Event.MEDIA_CANPLAY, this._onCanPlay),
                                e.removeEventListener(event_1.Event.MEDIA_CANPLAYTHROUGH, this._onCanPlayThrough),
                                e.removeEventListener(event_1.Event.MEDIA_LOADEDMETADATA, this._onLoadedMetadata),
                                e.removeEventListener(event_1.Event.MEDIA_DURATIONCHANGE, this._onDurationChange),
                                e.removeEventListener(event_1.Event.INTERNAL_MEDIA_REQUIRES_DURATION, this._onRequiresDuration);
                        }),
                        (t.prototype._recreateMediaElement = function (e, t, r, n) {
                            if (t !== this._playId) return debugLogger.info("Recreate player dropped: playId has changed."), Promise.resolve(!1);
                            var i = this._player;
                            if (i) {
                                if (!this._newElementPerTrack || "AUDIO" !== i.tagName || "video" !== r) {
                                    for (var o = !0, a = 0, s = e; a < s.length; a++) {
                                        var _ = s[a];
                                        if ('audio/mp2t;codecs="mp4a.40.2"' !== _ && !i.canPlayType(_)) {
                                            o = !1;
                                            break;
                                        }
                                    }
                                    if (o)
                                        return (
                                            debugLogger.info("Reusing media element."),
                                            (e.join(",") === this._activeCodecs.join(",") && !this._newBufferPerTrack) || n || (debugLogger.info("Recreating buffer."), this._buffer.recreate(e), (this._activeCodecs = e)),
                                            Promise.resolve(!0)
                                        );
                                }
                                this._removePlayerEvents(i),
                                    i.pause(),
                                    this._emeManager &&
                                        this._emeManager.removeMediaKeys(i).catch(function (e) {
                                            debugLogger.warn("Failed to remove media keys.", e);
                                        }),
                                    (this._player = null);
                                var d = this._getContainerElement(this._videoPlayerContainer);
                                d && i.parentNode === d && (d.removeChild(i), this.emit(event_1.Event.PLAYER_VIDEO_ELEMENT_REMOVED, null));
                                var l = this._getContainerElement(this._audioPlayerContainer);
                                l && i.parentNode === l && l.removeChild(i);
                            }
                            debugLogger.info("Creating new media element.");
                            var u = this._createPlayer(r),
                                c = this._playerVolume;
                            return (
                                (u.autoplay = !1),
                                (u.loop = !1),
                                (u.volume = this._cubicVolume ? c * c * c : c),
                                "playsInline" in u && (u.playsInline = !0),
                                (this._player = u),
                                (this._playerActivated = !1),
                                this._addPlayerEvents(u),
                                n || this._buffer.recreate(e),
                                (this._activeCodecs = e),
                                Promise.resolve(!0)
                            );
                        }),
                        (t.prototype._getContainerElement = function (e) {
                            return "string" == typeof e ? document.querySelector(e) : e || null;
                        }),
                        (t.prototype._onDurationChange = function () {
                            var e = this,
                                t = this._playId,
                                r = function () {
                                    if (e._player)
                                        if (t === e._playId) {
                                            var r = _secToMS(e._player.duration),
                                                n = _secToMS(e._player.currentTime);
                                            e._tracker.setActualDuration(r), e.emit(event_1.Event.PLAYER_DURATION_CHANGED, { timestamp: Date.now(), position: n, duration: r });
                                        } else debugLogger.info("Duration changed drop: playId has changed.");
                                };
                            this._loaded ? r() : this.once(event_1.Event.PLAYER_LOAD, r);
                        }),
                        (t.prototype._onPlaying = function () {
                            if (this._player) {
                                this._playerActivated = !0;
                                var e = this._currentContent,
                                    t = _secToMS(this._player.currentTime);
                                this._tracker.trackPlaying(t), this.emit(event_1.Event.PLAYER_PLAYING, { timestamp: Date.now(), position: t, logData: e ? e.getLogData() : null });
                            }
                        }),
                        (t.prototype._onPause = function () {
                            var e = this;
                            if (this._player) {
                                var t = _secToMS(this._player.currentTime);
                                this._tracker.trackPaused(t);
                                var r = this._currentContent ? this._currentContent.getLogData() : null;
                                this._pauseToken = setTimeout(function () {
                                    clearTimeout(e._syntheticEndedToken), e.emit(event_1.Event.PLAYER_PAUSED, { position: t, logData: r });
                                }, 10);
                            }
                        }),
                        (t.prototype._onSeeking = function () {
                            this._buffer.abort(this._clearBufferOnSeek), this._onTimeUpdate();
                        }),
                        (t.prototype._onRequiresDuration = function () {
                            this._currentContent && this._currentContent.isProtected() && this._player && (this._player.duration = this._currentContent.getCalculatedDuration());
                        }),
                        (t.prototype._onQuotaExceeded = function () {
                            if (this._player)
                                if (this._rebufferOnQuotaExceeded) debugLogger.info("Exceeded quota: rebuffering current track."), this._buffer.abort(!0), (this._player.currentTime = this._player.currentTime), this._onTimeUpdate();
                                else {
                                    debugLogger.info("Exceeded quota: moving to next track."), this._player.pause(), this._buffer.abort();
                                    var e = new player_1.PlaybackError(errors_1.Errors.PLAYER_BUFFER_QUOTA_EXCEEDED, "Buffer quota exceeded.");
                                    this._emitError(e, !0, this._currentContent ? this._currentContent.toLogJSON() : void 0);
                                }
                        }),
                        (t.prototype._onEncrypted = function (e) {
                            debugLogger.info("Got Encrypted event");
                            var t = this._currentContent;
                            t && t.getKeySystem() === key_system_1.KeySystem.FAIRPLAY && this.emitSync(event_1.Event.INTERNAL_ENCRYPTED, { initData: e.initData, fromPolyfill: !!e.fromPolyfill });
                        }),
                        (t.prototype._onEnded = function () {
                            !this._currentContent || (this._synthesizeEnded && this._currentContent.isProtected()) || (debugLogger.info("Native ended emitted."), this._emitEnded());
                        }),
                        (t.prototype._onSyntheticEnded = function () {
                            this._synthesizeEnded && this._currentContent && this._currentContent.isProtected() && (debugLogger.info("Synthetic ended emitted."), this._emitEnded());
                        }),
                        (t.prototype._onError = function () {
                            if (this._player) {
                                var e,
                                    t,
                                    r,
                                    n,
                                    i = this._player,
                                    o = i.error,
                                    a = !1,
                                    s = this._currentContent,
                                    _ = !1;
                                s && ((a = s.isProtected()), (e = s.toLogJSON()), (_ = s.isAd()), s.clearCachedBuffers());
                                var d = !0,
                                    l = !s || _ || !this._fatalOnNextError,
                                    u = o && o.msExtendedCode ? "0x" + (o.msExtendedCode >>> 0).toString(16).toUpperCase() : null;
                                if (o instanceof MediaError) {
                                    switch (o.code) {
                                        case MediaError.MEDIA_ERR_ABORTED:
                                            (t = errors_1.Errors.MEDIA_ABORTED), (r = "Media aborted.");
                                            break;
                                        case MediaError.MEDIA_ERR_NETWORK:
                                            (t = errors_1.Errors.MEDIA_NETWORK_ERROR), (r = "Network error.");
                                            break;
                                        case MediaError.MEDIA_ERR_DECODE:
                                            (t = errors_1.Errors.MEDIA_DECODING_ERROR), (r = "Media decoding error."), (d = l);
                                            break;
                                        case MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED:
                                            (t = errors_1.Errors.MEDIA_NOT_SUPPORTED), (r = "Media not supported."), (d = l);
                                            break;
                                        default:
                                            (t = errors_1.Errors.PLAYER_MEDIA_ERROR), (r = "Media error."), (n = !0);
                                    }
                                    r += " (" + (o.message || u || i.src || o.toString()) + ")";
                                } else (t = errors_1.Errors.PLAYER_PLAYBACK_ERROR), (r = "Error message undefined"), (n = !0);
                                this._buffer.abort(!0);
                                var c = new player_1.PlaybackError(t, r);
                                d || (c.unrecoverable = !0),
                                    (c.listPlayerIgnore = _),
                                    (c.debug.src_url = i.src),
                                    (c.debug.protected = a),
                                    (c.debug.extendedCode = u),
                                    (c.debug.rawExCode = (o && o.msExtendedCode) || null),
                                    n && o && ((c.debug.nativeCode = o.code || null), (c.debug.errorData = o)),
                                    this._emitError(c, d, e);
                            }
                        }),
                        (t.prototype._onLoadedMetadata = function () {
                            this.emitSync(event_1.Event.INTERNAL_PLAYER_LOADED_METADATA, null);
                        }),
                        (t.prototype._onCanPlay = function () {
                            this.emitSync(event_1.Event.INTERNAL_PLAYER_CANPLAY, null), this.emit(event_1.Event.PLAYER_FIRST_BYTES, null);
                        }),
                        (t.prototype._onCanPlayThrough = function () {
                            this.emitSync(event_1.Event.INTERNAL_PLAYER_CANPLAYTHROUGH, null);
                        }),
                        (t.prototype._onWaiting = function () {
                            var e = this;
                            clearTimeout(this._syntheticEndedToken),
                                this._player &&
                                    !this._player.seeking &&
                                    this._getBufferingLatency().then(function (t) {
                                        e._tracker.trackMsStalled(t);
                                    });
                        }),
                        (t.prototype._onPlayedThresholdReached = function (e) {
                            this._currentContent && this._player && this.emit(event_1.Event.PLAYER_PLAYED_THRESHOLD_REACHED, { played: e.data.played, threshold: e.data.threshold, position: _secToMS(this._player.currentTime) });
                        }),
                        (t.prototype._emitEnded = function () {
                            this._currentContent && "video" === this._currentContent.getMediaType() && this.emit(event_1.Event.PLAYER_ENDED_VIDEO, null), clearTimeout(this._pauseToken), this.emit(event_1.Event.PLAYER_ENDED, null);
                        }),
                        (t.prototype._emitError = function (e, t, r) {
                            debugLogger.error("Player Error", e, r, t),
                                this._tracker.setHadError(!0),
                                !this._disableCache && r && r.fileId && this._cache.remove(r.fileId),
                                this.emit(event_1.Event.PLAYER_ERROR, { playId: this._playId, error: e, track: r, canPlayNext: t, position: this._player ? _secToMS(this._player.currentTime) : 0 });
                        }),
                        (t.prototype._emitWarning = function (e, t) {
                            debugLogger.error("Player Warning", e, t, !0),
                                this._tracker.trackWarning(),
                                this.emit(event_1.Event.PLAYER_WARNING, { playId: this._playId, error: e, track: t, canPlayNext: !0, position: this._player ? _secToMS(this._player.currentTime) : 0 });
                        }),
                        (t.prototype._prepareMediaElement = function (e, t) {
                            var r = this;
                            return t === this._playId && this._upcomingContent
                                ? this._recreateMediaElement(this._upcomingContent.getPlayableCodecs(), t, this._upcomingContent.getMediaType(), this._upcomingContent.getKeySystem() === key_system_1.KeySystem.FAIRPLAY).then(function (e) {
                                      if (!e || t !== r._playId) return debugLogger.info("Loading content dropped after recreate: playId has changed."), Promise.resolve(!1);
                                      var n = r._player;
                                      return n && r._upcomingContent && r._upcomingContent.isProtected() && r._emeManager && (!n.mediaKeys || n.mediaKeys.shouldRefreshPerTrack || r._newMediaKeysPerTrack)
                                          ? (debugLogger.info("Creating media keys"),
                                            r._emeManager
                                                .createMediaKeys(n)
                                                .then(function () {
                                                    return !0;
                                                })
                                                .catch(function (e) {
                                                    return (e.unrecoverable = !0), r._emitError(e, !1, r._upcomingContent ? r._upcomingContent.toLogJSON() : void 0), Promise.reject(e);
                                                }))
                                          : Promise.resolve(!0);
                                  })
                                : (debugLogger.info("Loading content dropped: playId has changed."), Promise.resolve(!1));
                        }),
                        (t.prototype._handleLoadingComplete = function (e) {
                            var t = this._currentContent && this._currentContent.getMediaType(),
                                r = this._getContainerElement("video" === t ? this._videoPlayerContainer : this._audioPlayerContainer);
                            return (
                                r && this._player && this._player.parentNode !== r && (r.appendChild(this._player), "video" === t && ((this._player.crossOrigin = "anonymous"), this.emit(event_1.Event.PLAYER_VIDEO_ELEMENT_APPENDED, null))),
                                (this._upcomingContent = null),
                                e
                            );
                        }),
                        (t.prototype._prepareSubtitleElements = function () {
                            if (this._player && this._currentContent && this._currentContent instanceof video_content_1.VideoContent) {
                                for (var e = this._getActiveSubtitleLanguage(), t = 0, r = this._currentContent.getSubtitles(); t < r.length; t++) {
                                    var n = r[t],
                                        i = n.lang,
                                        o = n.url,
                                        a = document.createElement("track");
                                    (a.label = i + " subtitles"), (a.kind = "subtitles"), (a.srclang = i), (a.src = o), (a.default = this._subtitlesVisible && i.toLowerCase() === e), this._player.appendChild(a);
                                }
                                this._subtitlesVisible && this.showSubtitles();
                            }
                        }),
                        (t.prototype._getActiveSubtitleLanguage = function () {
                            var e,
                                t = this;
                            if (this._player && this._currentContent && this._currentContent instanceof video_content_1.VideoContent)
                                return null ===
                                    (e = this._currentContent.getSubtitleLanguages().find(function (e) {
                                        var r = e.toLowerCase();
                                        return [t._activeSubtitleLanguage, t._defaultSubtitleLanguage, "en"].find(function (e) {
                                            if (!e) return !1;
                                            var t = e.toLowerCase();
                                            return r === t || r.split("-")[0] === t.split("-")[0];
                                        });
                                    })) || void 0 === e
                                    ? void 0
                                    : e.toLowerCase();
                        }),
                        (t.prototype._removeSubtitleElements = function () {
                            if (this._player && this._currentContent && this._currentContent instanceof video_content_1.VideoContent) for (var e = this._player; e.firstChild; ) e.removeChild(e.lastChild);
                        }),
                        (t.prototype._handleLoadingError = function (e, t, r, n) {
                            if (((this._upcomingContent = null), r !== this._playId)) return Promise.resolve(!1);
                            if ((this._tracker.trackLoadFailed(), this.emit(event_1.Event.PLAYER_LOADING_FAILED, { uri: e, logData: t.logData }), n)) {
                                var i = n.track || { uri: e, fileId: t.fileId, format: t.format, deviceId: t.logData.deviceId };
                                this._emitError(n, "StorageError" !== n.name || !!n.canPlayNext, i);
                            }
                            return Promise.reject(n);
                        }),
                        (t.prototype._handleLoadedMetadata = function (e, t, r) {
                            var n = this;
                            if (e === this._playId) {
                                this._loaded = !0;
                                var i = this._player;
                                if (i) {
                                    this._buffer.dequeueUpdates();
                                    var o = r.position || 0;
                                    o > i.duration && (o = 0),
                                        (this._lastTimeUpdatePostion = 0),
                                        (i.currentTime = o),
                                        this._tracker.trackLoadDone(_secToMS(i.currentTime)),
                                        setTimeout(this._onTimeUpdate, 10),
                                        this.emitSync(event_1.Event.PLAYER_LOAD, { autoplay: r.autoplay, position: _secToMS(o), logData: t });
                                    var a = function () {
                                        i.currentTime !== o && (debugLogger.info("Resetting initial position."), (i.currentTime = o));
                                    };
                                    r.autoplay &&
                                        !i.error &&
                                        (a = function () {
                                            (i.currentTime !== o && (debugLogger.info("Resetting initial position."), (i.currentTime = o)), n._playId === e)
                                                ? new Promise(function (e) {
                                                      return e(n._player && n._player.play());
                                                  })
                                                      .catch(function (e) {
                                                          if (e) {
                                                              if ("NotSupportedError" === e.name) return Promise.reject(e);
                                                              if ("NotAllowedError" === e.name) return n.emit(event_1.Event.PLAYER_AUTOPLAY_FAILED, null), Promise.reject(e);
                                                          }
                                                          return n._player ? n._player.play() : Promise.resolve();
                                                      })
                                                      .catch(function () {
                                                          n._onPause();
                                                      })
                                                : debugLogger.info("Play trigger dropped; different playId");
                                        }),
                                        i.readyState > 2 ? (debugLogger.info("Ready to play, triggering play."), a()) : (debugLogger.info("Waiting to be playable."), this.once(event_1.Event.INTERNAL_PLAYER_CANPLAY, a));
                                }
                            } else debugLogger.info("LoadedMetadata operations dropped: playId has changed.");
                        }),
                        (t.prototype._handleCanPlayThrough = function (e) {
                            e === this._playId ? this._tracker.trackCanPlayThrough() : debugLogger.info("CanPlayThrough operations dropped: playId has changed.");
                        }),
                        (t.prototype._loadContent = function (e, t) {
                            var r = this;
                            if (t !== this._playId || !this._upcomingContent) return debugLogger.info("Loading content dropped: playId has changed."), Promise.resolve(!1);
                            this._canPreloadEmitted = !1;
                            var n = this._upcomingContent;
                            (this._upcomingContent = null), (this._currentContent = n);
                            var i = e.callback;
                            i &&
                                this.once(event_1.Event.PLAYER_LOAD, function () {
                                    r._playId && t === r._playId ? i() : debugLogger.info("Load content event dropped: playId has changed.");
                                }),
                                this.once(event_1.Event.INTERNAL_PLAYER_LOADED_METADATA, this._handleLoadedMetadata.bind(this, t, this._currentContent.getLogData(), e)),
                                this.once(event_1.Event.INTERNAL_PLAYER_CANPLAYTHROUGH, this._handleCanPlayThrough.bind(this, t));
                            var o = n.isProtected();
                            return (
                                this._tracker.setProtected(o),
                                n.getKeySystem() === key_system_1.KeySystem.FAIRPLAY
                                    ? n instanceof audio_content_1.AudioContent && !o
                                        ? Promise.resolve(this._loadUnprotectedTrack())
                                        : Promise.resolve(this._loadHLSProtectedTrack(e, t))
                                    : n instanceof video_content_1.VideoContent
                                    ? this._loadVideoTrack(e, t)
                                    : o
                                    ? this._loadProtectedTrack(e, t)
                                    : Promise.resolve(this._loadUnprotectedTrack())
                            );
                        }),
                        (t.prototype._getBufferingLatency = function () {
                            var e = this;
                            return new Promise(function (t) {
                                if (e._player) {
                                    var r = Date.now();
                                    e._player.addEventListener("canplaythrough", function e() {
                                        this.removeEventListener("canplaythrough", e), t(Date.now() - r);
                                    });
                                } else t(0);
                            });
                        }),
                        (t.prototype._loadVideoTrack = function (e, t) {
                            var r = this;
                            if (!(this._player && this._currentContent && this._currentContent instanceof video_content_1.VideoContent)) return Promise.resolve(!1);
                            var n = this._currentContent;
                            debugLogger.info("_loadVideoTrack"),
                                this._buffer.once(event_1.Event.BUFFER_SOURCE_OPEN, function () {
                                    r._currentContent && r._currentContent.isProtected() && r._requestLicense(t);
                                }),
                                (this._player.src = URL.createObjectURL(this._buffer.getMediaSource()));
                            var i = n.getVideoProfile(),
                                o = n.getAudioProfile();
                            if (!o && !i) return Promise.resolve(!1);
                            this._tracker.trackVideoLoadStart({ bitrate: null == i ? void 0 : i.video_bitrate, audioProfile: null != o ? o : void 0, videoProfile: null != i ? i : void 0 }), this._tracker.trackBufferLoadStart();
                            var a = n.getInitFragment();
                            return a
                                ? (this._prepareSubtitleElements(), this._buffer.appendFragment(n, a).then(this._buffer.setDuration.bind(this._buffer, n.getCalculatedDuration())).then(this._onAppendedHeadSegment(t)))
                                : Promise.resolve(!1);
                        }),
                        (t.prototype._loadHLSProtectedTrack = function (e, t) {
                            var r = this;
                            if ((debugLogger.info("Load HLS Protected Track"), !this._player || !this._currentContent)) return !1;
                            var n = this._currentContent.getResolvedURL();
                            if (!n) return !1;
                            return (
                                this.on(event_1.Event.INTERNAL_ENCRYPTED, function e(n) {
                                    n.data.fromPolyfill && (r.removeListener(event_1.Event.INTERNAL_ENCRYPTED, e), r._requestLicense(t, { initData: n.data.initData }));
                                }),
                                "video" === this._currentContent.getMediaType() && this._prepareSubtitleElements(),
                                this._tracker.trackBufferLoadStart(),
                                this._tracker.trackBufferURL(n, { bandwidth: 0 }),
                                (this._player.src = this._currentContent.getHLSURL()),
                                this._player.load(),
                                !0
                            );
                        }),
                        (t.prototype._loadUnprotectedTrack = function () {
                            if (!this._player || !this._currentContent) return !1;
                            var e = this._currentContent.getResolvedURL();
                            return (
                                !!e &&
                                (debugLogger.info("_loadUnprotectedTrack", this._currentContent.getURI()),
                                this._tracker.trackBufferLoadStart(),
                                this._tracker.trackBufferURL(e, { bandwidth: 0 }),
                                (this._player.src = e),
                                this._player.load(),
                                !0)
                            );
                        }),
                        (t.prototype._onAppendedHeadSegment = function (e) {
                            var t = this;
                            return function () {
                                return e === t._playId && (t._player && t._player.spload && t._player.spload(), debugLogger.info("Head segment appended."), !0);
                            };
                        }),
                        (t.prototype._loadProtectedTrack = function (e, t) {
                            var r = this;
                            if (!(this._currentContent && this._player && this._currentContent instanceof audio_content_1.AudioContent)) return Promise.resolve(!1);
                            var n = this._currentContent;
                            debugLogger.info("_loadProtectedTrack", n.getURI()),
                                this._buffer.once(event_1.Event.BUFFER_SOURCE_OPEN, this._requestLicense.bind(this, t, void 0)),
                                (this._player.src = URL.createObjectURL(this._buffer.getMediaSource())),
                                this._tracker.trackBufferLoadStart();
                            var i = null,
                                o = n.getFragmentForTime(e.position || 0);
                            if (o === n.getFirstFragment()) debugLogger.info("Appending combined init and playable fragment."), (i = this._buffer.appendFragment(n, n.getHeadFragment()));
                            else {
                                debugLogger.info("Appending split init and playable fragment.");
                                var a = n.getInitFragment();
                                i = Promise.all([
                                    a
                                        ? this._buffer.appendFragment(n, a).then(function () {
                                              return !0;
                                          })
                                        : Promise.resolve(!1),
                                    o
                                        ? n.getBufferForFragment(o).then(function () {
                                              return !0;
                                          })
                                        : Promise.resolve(!1),
                                ]);
                            }
                            return i.then(this._onAppendedHeadSegment(t)).then(function () {
                                return Promise.resolve(t === r._playId);
                            });
                        }),
                        (t.prototype._requestLicense = function (e, t) {
                            var r = this;
                            if ((void 0 === t && (t = {}), e !== this._playId)) {
                                return debugLogger.info("Request license dropped: playId has changed."), Promise.resolve(!1);
                            }
                            if (!this._player || !this._currentContent || !this._emeManager) return Promise.resolve(!1);
                            var n = Date.now(),
                                i = this._player.mediaKeys,
                                o = this._currentContent,
                                a = o.getFileId(),
                                s = o.getLogData(),
                                _ = o.toLogJSON(),
                                d = o.getKeySystem(),
                                l = this._emeManager,
                                u = this._tracker;
                            return (
                                u.setKeySystem(d),
                                u.setKeySystemImpl(l.getKeySystemImpl()),
                                Promise.all([o.getLicenseEndpoint() || this._licenseURLResolver.get(d, o.getMediaType()), o.getInitParams()])
                                    .then(function (r) {
                                        var o = r[0],
                                            s = r[1];
                                        u.setLicenseSessionLatency(Date.now() - n);
                                        var _ = o.replace(/\{contentId\}/, a),
                                            d = s.initDataType,
                                            c = t.initData || s.initData;
                                        if (i && c && d) {
                                            var h = tslib_1.__assign(tslib_1.__assign({}, s), { playId: e, initData: c, mediaKeys: i, licenseServer: _, initDataType: d });
                                            return l.createSessionWithParams(h);
                                        }
                                        return Promise.resolve(!1);
                                    })
                                    .then(function (t) {
                                        if (e !== r._playId) return debugLogger.info("License tracking dropped: playId has changed."), Promise.resolve(!1);
                                        "boolean" != typeof t && "elapsed" in t && (u.setLicenseGenerationLatency(t.elapsed.generate), u.setLicenseRequestLatency(t.elapsed.request), u.setLicenseUpdateLatency(t.elapsed.update));
                                        var i = Date.now() - n;
                                        return u.setKeyLatency(i), r.emit(event_1.Event.PLAYER_KEY_RECEIVED, { requestTime: i, logData: s }), debugLogger.info("License updated."), Promise.resolve(!0);
                                    })
                                    .catch(function (t) {
                                        if (!t || e !== r._playId) return Promise.resolve(!1);
                                        var n = !(t && "canPlayNext" in t) || t.canPlayNext;
                                        return r._emitError(t, n, _), Promise.reject(t);
                                    })
                            );
                        }),
                        (t.prototype._onTimeUpdate = function () {
                            var e;
                            if (this._loaded && (null === (e = this._player) || void 0 === e ? void 0 : e.src) && this._currentContent) {
                                var t = 0,
                                    r = this._player.seeking,
                                    n = this._player.currentTime,
                                    i = "video" === this._currentContent.getMediaType();
                                if (("getBitrateForTime" in this._currentContent && (t = this._currentContent.getBitrateForTime(this._player.currentTime)), r || !this._lastTimeUpdatePostion || this._lastTimeUpdatePostion !== n)) {
                                    (this._lastTimeUpdatePostion = r ? 0 : n),
                                        this._currentContent.getKeySystem() !== key_system_1.KeySystem.FAIRPLAY && (i || this._currentContent.isProtected()) && this._buffer.progress(this._currentContent, r, n);
                                    var o = this._player.duration,
                                        a = _secToMS(n),
                                        s = this._currentContent ? this._currentContent.getLogData() : null;
                                    r
                                        ? (this._tracker.trackPositionChanged(a, this._player.paused), this.emit(event_1.Event.PLAYER_POSITION_CHANGED, { position: a, logData: s }))
                                        : (this._tracker.trackProgress(a, t), this.emit(event_1.Event.PLAYER_PROGRESS, { timestamp: Date.now(), position: a, played: this._tracker.getMSPlayed(), interval: 500, logData: s })),
                                        !this._canPreloadEmitted && o - n <= CAN_PRELOAD_THRESHOLD ? ((this._canPreloadEmitted = !0), this.emit(event_1.Event.PLAYER_CAN_PRELOAD, null)) : (this._canPreloadEmitted = !1),
                                        clearTimeout(this._syntheticEndedToken),
                                        this._synthesizeEnded && this._currentContent.isProtected() && this._isPlaying() && (this._syntheticEndedToken = setTimeout(this._onSyntheticEnded, _secToMS(o - n)));
                                } else debugLogger.warn("Dropping duplicate time update.");
                            }
                        }),
                        (t.prototype._isPlaying = function () {
                            return !!this._player && !this._player.paused;
                        }),
                        (t.prototype._createAudioContent = function (e, t) {
                            var r = this,
                                n = { manifestLatency: 0, resolveLatency: 0 };
                            return (this._emeManager ? this._emeManager.getKeySystemInfo() : Promise.resolve({ keySystem: key_system_1.KeySystem.INVALID_SPOTIFY_KEY }))
                                .then(function (i) {
                                    return audio_content_1.AudioContent.create({
                                        abrManager: r._abrManager,
                                        keySystem: i.keySystem,
                                        licenseEndpoint: t.licenseEndpoint,
                                        transport: r._transport,
                                        resolver: r._audioResolver,
                                        uri: e,
                                        fileId: t.fileId,
                                        fileFormat: t.fileFormat,
                                        format: t.format,
                                        isAd: t.isAd,
                                        resolvedURL: t.resolvedURL,
                                        noManifest: t.noManifest,
                                        preloadedManifest: t.preloadedManifest,
                                        logData: t.logData,
                                        disableCache: r._disableCache,
                                        emitWarning: r._emitWarning,
                                    }).load(n);
                                })
                                .then(function (e) {
                                    var i = r._tracker;
                                    return i.setResolveLatency(n.resolveLatency), i.setManifestLatency(n.manifestLatency), e.isProtected() && t.fileId && !r._disableCache && r._cache.set(t.fileId, e), e;
                                });
                        }),
                        (t.prototype._createVideoContent = function (e, t) {
                            var r = this,
                                n = { manifestLatency: 0, resolveLatency: 0 },
                                i = t.fileId;
                            return (this._emeManager ? this._emeManager.getKeySystemInfo() : Promise.resolve({ keySystem: key_system_1.KeySystem.INVALID_SPOTIFY_KEY, audioFormats: [], videoFormats: [] }))
                                .then(function (o) {
                                    return video_content_1.VideoContent.create({
                                        uri: e,
                                        abrManager: r._abrManager,
                                        resolver: r._videoResolver,
                                        keySystem: o.keySystem,
                                        licenseEndpoint: t.licenseEndpoint,
                                        fileId: i,
                                        format: media_format_1.MediaFormat.MANIFEST_ID,
                                        isAd: t.isAd,
                                        transport: r._transport,
                                        videoFormats: o.videoFormats,
                                        audioFormats: o.audioFormats,
                                        disableCache: r._disableCache,
                                        disallowProfile: r._disallowProfile,
                                    }).load(n);
                                })
                                .then(function (e) {
                                    var t = r._tracker;
                                    return t.setResolveLatency(n.resolveLatency), t.setManifestLatency(n.manifestLatency), e.isProtected() && i && !r._disableCache && r._cache.set(i, e), e;
                                });
                        }),
                        (t.prototype._preinitMediaElement = function () {
                            var e = this;
                            return this._player || !this._emeManager
                                ? Promise.resolve(this)
                                : this._emeManager
                                      .getKeySystemInfo()
                                      .then(function (t) {
                                          var r,
                                              n,
                                              i = [];
                                          return (
                                              (null === (r = t.audioFormats) || void 0 === r ? void 0 : r[0]) && i.push(t.audioFormats[0].contentType),
                                              (null === (n = t.videoFormats) || void 0 === n ? void 0 : n[0]) && i.push(t.videoFormats[0].contentType),
                                              !!i.length && e._recreateMediaElement(i, e._playId, i.length > 1 ? "video" : "audio", t.keySystem !== key_system_1.KeySystem.FAIRPLAY)
                                          );
                                      })
                                      .then(
                                          function () {
                                              return e;
                                          },
                                          function (t) {
                                              return debugLogger.warn("Cannot precreate media element:", null == t ? void 0 : t.message), e;
                                          }
                                      );
                        }),
                        (t.prototype.getCodecInfo = function () {
                            return { audiocodec: "mp3", bitrate: 160 };
                        }),
                        (t.prototype.getMediaSource = function () {
                            return this._buffer.getMediaSource();
                        }),
                        (t.prototype.load = function (e, t, r) {
                            var n = this,
                                i = hasUriProperty(t.uriProperty, e) ? t.uriProperty : "uri",
                                o = e[i];
                            if ((debugLogger.info("load", o), !o)) return Promise.reject(new player_1.PlaybackError(errors_1.Errors.PLAYER_CANNOT_FIND_PLAYABLE_URI, "Cannot find a playable URI."));
                            if (!e.logData) return Promise.reject(new Error("Invalid track: logging info not specified"));
                            if (t.stopPosition && t.stopPosition <= t.position) return Promise.reject(new TypeError("Invalid options: `stopPosition` cannot be less or equal to `position`"));
                            this.stop(e.logData, e.mediaType), (this._loaded = !1), (this._currentContent = null);
                            var a = ++this._playId,
                                s = this._tracker;
                            s.trackLoadStart(o, e.fileId, a.toString(), e.logData), this.emit(event_1.Event.PLAYER_BEFORE_LOAD, { track: e, options: t, logData: e.logData, uri: o, timestamp: Date.now() }), this._buffer.setPlayId(a);
                            var _,
                                d = { position: _msToSec(t.position || 0), autoplay: !("autoplay" in t) || t.autoplay, callback: r };
                            s.setPlayIntended(d.autoplay), s.setPlayedThreshold(t.playedThreshold);
                            var l = this._cache;
                            if ("video" === e.mediaType && !this._emeManager) return Promise.reject(new player_1.PlaybackError(errors_1.Errors.DISALLOW_PROTECTED_TRACK_ERROR, "Protected tracks not supported"));
                            var u = "video" === e.mediaType ? this._createVideoContent.bind(this, o, e) : this._createAudioContent.bind(this, o, e, a),
                                c = this._preloadingTracks[e.fileId],
                                h = this._disableCache ? null : l.get(e.fileId);
                            return (
                                c
                                    ? (debugLogger.info("Waiting for preloading track.", e.fileId),
                                      (_ = c.then(
                                          function (t) {
                                              return debugLogger.info("Preloading succeeded.", e.fileId), s.setResolveLatency(t.resolveLatency), s.setManifestLatency(t.manifestLatency), l.get(e.fileId);
                                          },
                                          function () {
                                              return debugLogger.info("Preloading failed, creating new track", e.fileId), u();
                                          }
                                      )))
                                    : h
                                    ? (debugLogger.info("Using cached track.", e.fileId, h), s.setMemoryCached(!0), (_ = Promise.resolve(h)))
                                    : (debugLogger.info("Creating new track", e.fileId), (_ = u())),
                                _.then(function (r) {
                                    var i;
                                    return r.isProtected() && !n._emeManager
                                        ? Promise.reject(new player_1.PlaybackError(errors_1.Errors.DISALLOW_PROTECTED_TRACK_ERROR, "Protected tracks not supported"))
                                        : (r.setStopPosition(null !== (i = t.stopPosition) && void 0 !== i ? i : null),
                                          r.setLogData(e.logData),
                                          s.setCalculatedDuration(_secToMS(r.getCalculatedDuration())),
                                          (n._upcomingContent = r),
                                          Promise.resolve());
                                })
                                    .then(this._prepareMediaElement.bind(this, d, a))
                                    .then(this._loadContent.bind(this, d, a))
                                    .then(this._handleLoadingComplete, this._handleLoadingError.bind(this, o, e, a))
                            );
                        }),
                        (t.prototype.preload = function (e) {
                            var t = this,
                                r = e.uri,
                                n = e.fileId,
                                i = this._cache;
                            if (!n) return Promise.resolve(null);
                            if (!this._emeManager) return Promise.resolve(null);
                            var o = !this._disableCache,
                                a = "video" === e.mediaType,
                                s = "MP4" === e.format || "MP4_DUAL" === e.format || "MP4_CBCS" === e.format;
                            if (!(o && s && !a) || (o && i.get(n))) return Promise.resolve(null);
                            var _ = this._preloadingTracks;
                            if (_[n]) return _[n];
                            debugLogger.info("Preloading track", n);
                            var d = { manifestLatency: 0, resolveLatency: 0 },
                                l = this._emeManager
                                    .getKeySystemInfo()
                                    .then(function (i) {
                                        return audio_content_1.AudioContent.create({
                                            abrManager: t._abrManager,
                                            keySystem: i.keySystem,
                                            licenseEndpoint: e.licenseEndpoint,
                                            transport: t._transport,
                                            resolver: t._audioResolver,
                                            uri: r,
                                            fileId: n,
                                            format: e.format,
                                            isAd: e.isAd,
                                            resolvedURL: e.resolvedURL,
                                            noManifest: e.noManifest,
                                            preloadedManifest: e.preloadedManifest,
                                            logData: e.logData,
                                            disableCache: t._disableCache,
                                            emitWarning: t._emitWarning,
                                        }).load(d);
                                    })
                                    .then(function (t) {
                                        return Promise.all([t, "MP4_CBCS" !== e.format ? t.getBufferForFragment(t.getHeadFragment()) : null]);
                                    })
                                    .then(function (e) {
                                        var t = e[0];
                                        return i.set(n, t), delete _[n], debugLogger.info("Cached", n), d;
                                    })
                                    .catch(function (e) {
                                        return delete _[n], t.emit(event_1.Event.PLAYER_PRELOADING_ERROR, { error: e, track: e.track || null, canPlayNext: !("canPlayNext" in e) || e.canPlayNext, preloading: !0 }), Promise.reject(e);
                                    });
                            return (_[n] = l), l;
                        }),
                        (t.prototype.togglePlay = function () {
                            return this._isPlaying() ? this.pause() : this.resume();
                        }),
                        (t.prototype.setSubtitleLanguage = function (e) {
                            this._player && this._currentContent && this._currentContent instanceof video_content_1.VideoContent && ((this._activeSubtitleLanguage = e), this._subtitlesVisible && this.showSubtitles());
                        }),
                        (t.prototype.getSubtitleLanguages = function () {
                            return this._currentContent instanceof video_content_1.VideoContent ? this._currentContent.getSubtitleLanguages() : [];
                        }),
                        (t.prototype.getActiveSubtitleLanguage = function () {
                            return this._getActiveSubtitleLanguage();
                        }),
                        (t.prototype.setVolume = function (e, t) {
                            if (!this.emitSync(event_1.Event.PLAYER_BEFORE_VOLUME_CHANGE, { volume: e, options: t }).defaultPrevented) {
                                if (e < 0 || e > 1) throw new player_1.PlaybackError(errors_1.Errors.PLAYER_ATTEMPTED_VOLUME_OUT_OF_RANGE, "Volume should be in range [0, 1]");
                                (this._playerVolume = e), this._player && (this._player.volume = this._cubicVolume ? e * e * e : e);
                            }
                        }),
                        (t.prototype.getVolume = function () {
                            return this._playerVolume;
                        }),
                        (t.prototype.getPlayerState = function () {
                            var e = this._player;
                            return { playing: this._isPlaying(), position: e ? _secToMS(e.currentTime) : 0, duration: e ? _secToMS(e.duration) : 0, volume: e ? this._playerVolume : 1 };
                        }),
                        (t.prototype.seek = function (e) {
                            var t = this;
                            if (this._player) {
                                var r = this._playId,
                                    n = function () {
                                        if (t._player && r === t._playId) {
                                            var n = _msToSec(e);
                                            n < 0 ? (n = 0) : n >= t._player.duration && (n = t._player.duration), (t._player.currentTime = n);
                                        } else debugLogger.info("Seek dropped: playId has changed.");
                                    };
                                this._loaded ? n() : this.once(event_1.Event.PLAYER_LOAD, n),
                                    this._getBufferingLatency().then(function (e) {
                                        t._tracker.trackSeekRebuffering(e);
                                    });
                            }
                        }),
                        (t.prototype.pause = function () {
                            var e = this;
                            return new Promise(function (t) {
                                e._player && e._isPlaying() ? t(e._player && e._player.pause()) : t();
                            });
                        }),
                        (t.prototype.resume = function () {
                            var e = this;
                            return new Promise(function (t) {
                                e._player && !e._isPlaying() ? t(e._player && e._player.play()) : t();
                            });
                        }),
                        (t.prototype.stop = function (e, t) {
                            var r = [],
                                n = e || {};
                            this.emit(event_1.Event.PLAYER_BEFORE_STOP, { timestamp: Date.now(), logData: n }), this._tracker.trackStopped(e), this._buffer.abort(!0), this._emeManager && r.push(this._emeManager.destroySessions());
                            var i = this._player;
                            if (i) {
                                this._removeSubtitleElements(), (this._fatalOnNextError = this._shouldNextErrorBeFatal()), this._fatalOnNextError && debugLogger.warn("MediaError detected: next immediate media error will be fatal.");
                                var o = i.src;
                                BLOB_URL_EXP.test(o) && URL.revokeObjectURL(o), i.removeAttribute("src"), i.load();
                            }
                            if ((this._currentContent && this._disableCache && this._currentContent.clearCachedBuffers(), i && this._currentContent && "video" === this._currentContent.getMediaType())) {
                                var a = this._getContainerElement(this._videoPlayerContainer);
                                a && i.parentNode === a && (this._newElementPerTrack || "video" !== t) && (a.removeChild(i), this.emit(event_1.Event.PLAYER_VIDEO_ELEMENT_REMOVED, null));
                            } else if (i && this._currentContent && "audio" === this._currentContent.getMediaType()) {
                                var s = this._getContainerElement(this._audioPlayerContainer);
                                s && i.parentNode === s && (this._newElementPerTrack || "audio" !== t) && s.removeChild(i);
                            }
                            return (
                                this.emit(event_1.Event.PLAYER_STOPPED, null),
                                Promise.all(r).then(function () {
                                    return !0;
                                })
                            );
                        }),
                        (t.prototype.hideSubtitles = function () {
                            if (this._player) {
                                for (var e = this._player.textTracks, t = 0, r = e.length; t < r; t++) e[t].mode = subtitle_mode_1.SubtitleMode.HIDDEN;
                                this._subtitlesVisible = !1;
                            }
                        }),
                        (t.prototype.showSubtitles = function () {
                            if (this._player) {
                                for (var e = this._getActiveSubtitleLanguage(), t = this._player.textTracks, r = 0, n = t.length; r < n; r++) {
                                    var i = t[r];
                                    i.language.toLowerCase() === e ? (i.mode = subtitle_mode_1.SubtitleMode.SHOWING) : (i.mode = subtitle_mode_1.SubtitleMode.HIDDEN);
                                }
                                this._subtitlesVisible = !0;
                            }
                        }),
                        (t.prototype.areSubtitlesShown = function () {
                            return this._subtitlesVisible;
                        }),
                        (t.prototype.getKeySystemInfo = function () {
                            return this._emeManager ? this._emeManager.getKeySystemInfo() : Promise.resolve(null);
                        }),
                        (t.prototype.getVideoVariants = function () {
                            if (!(this._currentContent && this._currentContent instanceof video_content_1.VideoContent)) return [];
                            for (var e = [], t = this._currentContent.getVideoProfiles(), r = 0, n = t.length; r < n; r++) {
                                var i = t[r];
                                e.push({ width: i.video_width, height: i.video_height, bitrate: i.video_bitrate });
                            }
                            return e;
                        }),
                        (t.prototype.setPreferredBitrate = function (e) {
                            return "number" != typeof e
                                ? Promise.resolve(operation_result_1.OperationResult.INVALID)
                                : (this._currentContent && "video" === this._currentContent.getMediaType() && e > 0 && this._buffer.abort(!0),
                                  this._abrManager.overrideBitrate(e),
                                  Promise.resolve(operation_result_1.OperationResult.SUCCESS));
                        }),
                        (t.prototype.activateElement = function () {
                            return !(this._playerActivated || !this._player || this._player.src) && (this._player.load(), (this._playerActivated = !0), !0);
                        }),
                        (t.prototype.getMediaConfig = function () {
                            var e = this;
                            return void 0 === this._mediaConfig
                                ? _getMediaConfig(this._emeManager, this._player).then(function (t) {
                                      return (e._mediaConfig = t), e._mediaConfig;
                                  })
                                : Promise.resolve(this._mediaConfig);
                        }),
                        t
                    );
                })(emitter_1.EventEmitter);
                exports.Player = Player;
            },
            {
                "../enums/errors": 44,
                "../enums/event": 45,
                "../enums/key_system": 46,
                "../enums/media_format": 48,
                "../enums/operation_result": 50,
                "../enums/subtitle_mode": 54,
                "../error/player": 62,
                "./audio_content": 16,
                "./bandwidth_estimator": 17,
                "./buffer": 18,
                "./eme/configs": 22,
                "./eme/manager": 24,
                "./helpers/eme": 31,
                "./video_content": 40,
                "@js-sdk/debug-tools": 11,
                "@spotify-internal/emitter": 71,
                "@spotify-internal/linkedlist": 137,
                tslib: 190,
            },
        ],
        37: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.StorageResolve = void 0);
                var debug_tools_1 = require("@js-sdk/debug-tools"),
                    errors_1 = require("../enums/errors"),
                    storage_1 = require("../error/storage"),
                    debugLogger = debug_tools_1.logging.forTag("playback.storage_resolve"),
                    MANIFEST_URL = "https://seektables.scdn.co/seektable",
                    StorageResolve = (function () {
                        function e(e) {
                            this._transport = e;
                        }
                        return (
                            (e.prototype._parseResponse = function (e, r) {
                                var t;
                                if (200 !== r.status) return ((t = new storage_1.StorageError(errors_1.Errors.STORAGE_FAILED_WITH_STATUS, "Storage Resolve responded with " + r.status)).status = r.status), (t.fileId = e), Promise.reject(t);
                                var o = r.body;
                                if (!o || !o.cdnurl || !o.cdnurl.length)
                                    return ((t = new storage_1.StorageError(errors_1.Errors.STORAGE_RETURNED_NO_TRACKS, "Storage Resolve returned no tracks for fileId " + e)).fileId = e), Promise.reject(t);
                                var s = { uri: o.cdnurl[0], uris: o.cdnurl, protection: "cenc" };
                                return Promise.resolve(s);
                            }),
                            (e.prototype.getCDNURL = function (e, r) {
                                debugLogger.info("Requesting CDN URL for ", e);
                                var t = "files/audio/interactive",
                                    o = "@webgate/storage-resolve/" + (r ? "v2/" + t + "/" + r + "/" + e : t + "/" + e) + "?version=10000000&product=9&platform=39&alt=json";
                                return this._transport
                                    .request(o, {
                                        responseType: "json",
                                        retry: {
                                            condition: function (e, r) {
                                                return e.getStatusFamily() !== r.SUCCESS;
                                            },
                                        },
                                    })
                                    .then(this._parseResponse.bind(this, e));
                            }),
                            (e.prototype.getManifest = function (e) {
                                var r = MANIFEST_URL + "/" + e + ".json";
                                return (
                                    debugLogger.info("Requesting JSON manifest for ", e),
                                    this._transport
                                        .request(r, {
                                            responseType: "json",
                                            retry: {
                                                condition: function (e, r) {
                                                    return e.getStatusFamily() !== r.SUCCESS;
                                                },
                                            },
                                        })
                                        .then(function (r) {
                                            var t;
                                            return 200 !== r.status
                                                ? (((t = new storage_1.StorageError(errors_1.Errors.STORAGE_TRACK_MANIFEST_FAILED, "Track manifest request failed with status code " + r.status)).debug.file_id = e),
                                                  (t.status = r.status),
                                                  Promise.reject(t))
                                                : r.body
                                                ? r.body
                                                : (((t = new storage_1.StorageError(errors_1.Errors.STORAGE_TRACK_MANIFEST_EMPTY, "Received empty manifest.")).debug.file_id = e), (t.status = r.status), Promise.reject(t));
                                        })
                                );
                            }),
                            e
                        );
                    })();
                exports.StorageResolve = StorageResolve;
            },
            { "../enums/errors": 44, "../error/storage": 63, "@js-sdk/debug-tools": 11 },
        ],
        38: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.Tracker = void 0);
                var tslib_1 = require("tslib"),
                    debug_tools_1 = require("@js-sdk/debug-tools"),
                    emitter_1 = require("@spotify-internal/emitter"),
                    event_1 = require("../enums/event"),
                    tracking_data_1 = require("./tracking_data"),
                    debugLogger = debug_tools_1.logging.forTag("playback.tracker"),
                    PLAYED_THRESHOLD = 31e3,
                    Tracker = (function (t) {
                        function a(a) {
                            void 0 === a && (a = {});
                            var e = t.call(this) || this;
                            return (e._playedThreshold = PLAYED_THRESHOLD), (e._playedThresholdReached = !1), (e._trackingData = null), (e._playedThreshold = a.playerThreshold || PLAYED_THRESHOLD), e;
                        }
                        return (
                            tslib_1.__extends(a, t),
                            (a.create = function (t) {
                                return new a(t);
                            }),
                            (a.prototype._checkPlayedThreshold = function () {
                                var t = this._trackingData;
                                !t ||
                                    !this._playedThreshold ||
                                    this._playedThresholdReached ||
                                    t.msPlayed < this._playedThreshold ||
                                    ((this._playedThresholdReached = !0), this.emit(event_1.Event.TRACKER_PLAYED_THRESHOLD_REACHED, { played: (t && t.msPlayed) || 0, threshold: this._playedThreshold }));
                            }),
                            (a.prototype.getMSPlayed = function () {
                                return this._trackingData ? this._trackingData.msPlayed : 0;
                            }),
                            (a.prototype.trackLoadStart = function (t, a, e, r) {
                                var n = tracking_data_1.TrackingData.create();
                                (this._trackingData = n),
                                    (this._playedThresholdReached = !1),
                                    (n.fileId = a),
                                    (n.currentTrackUri = t),
                                    (n.loadTime = Date.now()),
                                    (n.internalPlayId = e),
                                    (n.externalLoadTime = r.externalLoadTime || 0),
                                    (n.displayTrack = r.displayTrack || ""),
                                    (n.playbackId = r.playbackId || ""),
                                    (n.playContext = r.playContext || ""),
                                    (n.reasonStart = r.reason || "unknown"),
                                    (n.sourceStart = r.source || "unknown");
                                var i = r.referrer || {};
                                (n.referrer = void 0 !== i.name ? i.name : "unknown"), (n.referrerVersion = void 0 !== i.version ? i.version : "unknown"), (n.referrerVendor = void 0 !== i.vendor ? i.vendor : "unknown");
                                var o = r.format || {};
                                o.codec && (n.audiocodec = o.codec.toLowerCase()),
                                    o.bitrate && (n.bitrate = o.bitrate),
                                    (n.gaiaDevId = r.deviceId || "none"),
                                    (n.noLog = r.noLog || !1),
                                    (n.noTSV = r.noTSV || !1),
                                    (n.noStats = r.noStats || !1),
                                    this.emit(event_1.Event.TRACKER_TRACKING_DATA_CREATED, { trackingData: n });
                            }),
                            (a.prototype.trackBufferLoadStart = function () {
                                var t = this._trackingData;
                                t && (t.bufferLoadStartTime = Date.now());
                            }),
                            (a.prototype.trackBytesDownloaded = function (t) {
                                var a = this._trackingData;
                                a && (a.totalBytes += t);
                            }),
                            (a.prototype.trackLoadDone = function (t) {
                                var a = this._trackingData;
                                if (a) {
                                    var e = Date.now();
                                    (a.msInitLatency = e - a.bufferLoadStartTime), (a.lastPlayStartTime = e), (a.localTimeMs = e), (a.position = t), (a.startPosition = t), a.addStartSegment();
                                }
                            }),
                            (a.prototype.trackCanPlayThrough = function () {
                                var t = this._trackingData;
                                if (t && !t.msPlayLatency) {
                                    var a = Date.now();
                                    (t.msPlayLatency = a - t.loadTime), (t.msHeadLatency = a - t.bufferLoadStartTime);
                                }
                            }),
                            (a.prototype.trackBufferURL = function (t, a) {
                                var e = this._trackingData;
                                e && e.trackBufferURL(t, a);
                            }),
                            (a.prototype.trackNavigatorOffline = function () {
                                var t = this._trackingData;
                                t && (t.nOffline += 1);
                            }),
                            (a.prototype.trackSeekRebuffering = function (t) {
                                var a = this._trackingData;
                                a && (t > a.maxMsSeekRebuffering && (a.maxMsSeekRebuffering = t), (a.msSeekRebuffering += t));
                            }),
                            (a.prototype.trackMsStalled = function (t) {
                                var a = this._trackingData;
                                a && (t > a.maxMsStalled && (a.maxMsStalled = t), (a.msStalled += t), a.nStalls++);
                            }),
                            (a.prototype.trackLoadFailed = function () {
                                var t = this._trackingData;
                                t && ((t.msPlayLatency = Date.now() - t.loadTime), (t.position = 0), t.addStartSegment());
                            }),
                            (a.prototype.trackStopped = function (t) {
                                var a = this._trackingData;
                                if (a && !a.isFinalized()) {
                                    var e = Date.now();
                                    (a.stopTime = e),
                                        a.lastPlayStartTime && (a.addMSPlayed(e - a.lastPlayStartTime), this._checkPlayedThreshold()),
                                        a.addEndSegment(),
                                        (a.sourceEnd = t.source || "unknown"),
                                        (a.reasonEnd = t.reason || "unknown"),
                                        (a.nextPlaybackId = t.playbackId || ""),
                                        a.finalize(),
                                        debugLogger.info("Tracker data finalized.");
                                    var r = a.getPlaybackStats();
                                    this.emit(event_1.Event.TRACKER_TRACKING_DATA_FINALIZED, { trackingData: a, playbackStats: r });
                                }
                            }),
                            (a.prototype.trackPositionChanged = function (t, a) {
                                var e = this._trackingData;
                                if (e) {
                                    var r = e.position;
                                    t !== r &&
                                        (e.addEndSegment(),
                                        t > r ? (e.nSeeksForward++, (e.msSeeksForward += t - r)) : t < r && (e.nSeeksBackward++, (e.msSeeksBackward += r - t)),
                                        a || (e.lastPlayStartTime = Date.now()),
                                        (e.position = t),
                                        e.addStartSegment());
                                }
                            }),
                            (a.prototype.trackPlaying = function (t) {
                                var a = this._trackingData;
                                a && (a.played || this.emit(event_1.Event.TRACKER_PLAYBACK_START, { trackingData: a }), (a.played = !0), (a.lastPlayStartTime = Date.now()), (a.position = t));
                            }),
                            (a.prototype.trackPaused = function (t) {
                                var a = this._trackingData;
                                a && ((a.lastPlayStartTime = 0), (a.position = t));
                            }),
                            (a.prototype.trackProgress = function (t, a) {
                                var e = this._trackingData;
                                if (e) {
                                    var r = Date.now(),
                                        n = 0;
                                    e.lastPlayStartTime && (n = r - e.lastPlayStartTime), (e.lastPlayStartTime = r), e.addMSPlayed(n), this._checkPlayedThreshold(), (e.position = t), a && e.trackBitrate(a, n);
                                }
                            }),
                            (a.prototype.trackVideoLoadStart = function (t) {
                                var a = this._trackingData;
                                a && a.registerVideoVariant(t);
                            }),
                            (a.prototype.trackWarning = function () {
                                var t = this._trackingData;
                                t && t.nWarnings++;
                            }),
                            (a.prototype.trackOffline = function () {
                                var t = this._trackingData;
                                t && t.nOffline++;
                            }),
                            (a.prototype.setActualDuration = function (t) {
                                var a = this._trackingData;
                                a && (a.msActualDuration = t);
                            }),
                            (a.prototype.setKeySystem = function (t) {
                                var a = this._trackingData;
                                a && (a.keySystem = t);
                            }),
                            (a.prototype.setKeySystemImpl = function (t) {
                                var a = this._trackingData;
                                a && (a.keySystemImpl = t);
                            }),
                            (a.prototype.setManifestLatency = function (t) {
                                var a = this._trackingData;
                                a && (a.msManifestLatency = t);
                            }),
                            (a.prototype.setPlayIntended = function (t) {
                                var a = this._trackingData;
                                a && (a.playIntended = t);
                            }),
                            (a.prototype.setKeyLatency = function (t) {
                                var a = this._trackingData;
                                a && (a.msKeyLatency = t);
                            }),
                            (a.prototype.setMemoryCached = function (t) {
                                var a = this._trackingData;
                                a && (a.memoryCached = t);
                            }),
                            (a.prototype.setPersistentCached = function (t) {
                                var a = this._trackingData;
                                a && (a.persistentCached = t);
                            }),
                            (a.prototype.setProtected = function (t) {
                                var a = this._trackingData;
                                a && (a.isProtected = t);
                            }),
                            (a.prototype.setHadError = function (t) {
                                var a = this._trackingData;
                                a && (a.hadError = t);
                            }),
                            (a.prototype.setLicenseSessionLatency = function (t) {
                                var a = this._trackingData;
                                a && (a.msLicenseSessionLatency = t);
                            }),
                            (a.prototype.setLicenseGenerationLatency = function (t) {
                                var a = this._trackingData;
                                a && (a.msLicenseGenerationLatency = t);
                            }),
                            (a.prototype.setLicenseRequestLatency = function (t) {
                                var a = this._trackingData;
                                a && (a.msLicenseRequestLatency = t);
                            }),
                            (a.prototype.setLicenseUpdateLatency = function (t) {
                                var a = this._trackingData;
                                a && (a.msLicenseUpdateLatency = t);
                            }),
                            (a.prototype.setResolveLatency = function (t) {
                                var a = this._trackingData;
                                a && (a.msResolveLatency = t);
                            }),
                            (a.prototype.setCalculatedDuration = function (t) {
                                var a = this._trackingData;
                                a && (a.msFileDuration = t);
                            }),
                            (a.prototype.setPlayedThreshold = function (t) {
                                this._playedThreshold = t;
                            }),
                            a
                        );
                    })(emitter_1.EventEmitter);
                exports.Tracker = Tracker;
            },
            { "../enums/event": 45, "./tracking_data": 39, "@js-sdk/debug-tools": 11, "@spotify-internal/emitter": 71, tslib: 190 },
        ],
        39: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.TrackingData = void 0);
                var errors_1 = require("../enums/errors"),
                    key_system_1 = require("../enums/key_system"),
                    tracking_1 = require("../error/tracking"),
                    cdn_url_tracker_1 = require("./cdn_url_tracker"),
                    UNSET_BITRATE_LABEL = "dummy",
                    TrackingData = (function () {
                        function t() {
                            (this._bitrates = {}),
                                (this._isFinalized = !1),
                                (this._needsEndSegment = !1),
                                (this._segments = []),
                                (this._cdnURLTracker = new cdn_url_tracker_1.CDNURLTracker()),
                                (this.audiocodec = null),
                                (this.bandwidth = 0),
                                (this.bitrate = 0),
                                (this.bufferingPercentage = 0),
                                (this.bufferLoadStartTime = 0),
                                (this.urls = {}),
                                (this.currentTrackUri = ""),
                                (this.displayTrack = ""),
                                (this.externalLoadTime = 0),
                                (this.fileId = ""),
                                (this.gaiaDevId = "none"),
                                (this.hadError = !1),
                                (this.internalPlayId = ""),
                                (this.isProtected = !1),
                                (this.keySystem = ""),
                                (this.keySystemImpl = ""),
                                (this.lastPlayStartTime = 0),
                                (this.loadTime = 0),
                                (this.localTimeMs = -1),
                                (this.maxContinuous = 0),
                                (this.maxMsSeekRebuffering = 0),
                                (this.maxMsStalled = 0),
                                (this.memoryCached = !1),
                                (this.msActualDuration = 0),
                                (this.msFileDuration = 0),
                                (this.msHeadLatency = 0),
                                (this.msInitLatency = 0),
                                (this.msKeyLatency = 0),
                                (this.msLicenseGenerationLatency = 0),
                                (this.msLicenseRequestLatency = 0),
                                (this.msLicenseSessionLatency = 0),
                                (this.msLicenseUpdateLatency = 0),
                                (this.msManifestLatency = 0),
                                (this.msPlayed = 0),
                                (this.msPlayedUnion = 0),
                                (this.msPlayLatency = 0),
                                (this.msResolveLatency = 0),
                                (this.msSeekRebuffering = 0),
                                (this.msSeeksBackward = 0),
                                (this.msSeeksForward = 0),
                                (this.nextPlaybackId = ""),
                                (this.nOffline = 0),
                                (this.noLog = !1),
                                (this.noTSV = !1),
                                (this.noStats = !1),
                                (this.nWarnings = 0),
                                (this.msStalled = 0),
                                (this.nSeeksBackward = 0),
                                (this.nSeeksForward = 0),
                                (this.nStalls = 0),
                                (this.persistentCached = !1),
                                (this.playbackId = ""),
                                (this.playContext = ""),
                                (this.played = !1),
                                (this.position = 0),
                                (this.reasonEnd = "unknown"),
                                (this.reasonStart = "unknown"),
                                (this.referrer = "unknown"),
                                (this.referrerVendor = "unknown"),
                                (this.referrerVersion = "unknown"),
                                (this.sourceEnd = "unknown"),
                                (this.sourceStart = "unknown"),
                                (this.startPosition = 0),
                                (this.stopTime = 0),
                                (this.streamingRule = "none"),
                                (this.timeWeightedBitrate = 0),
                                (this.totalBytes = 0),
                                (this.playIntended = !1),
                                (this.videocodec = null);
                        }
                        return (
                            (t.create = function () {
                                return new t();
                            }),
                            (t.prototype._calculateUnion = function () {
                                for (var t = this._segments.slice(0), e = 0, i = 0, s = 0, a = 0, r = 0, n = 0, o = this.maxContinuous; r < t.length; r++)
                                    r % 2 != 0 && void 0 !== t[r - 1] && "start" === t[r - 1].type && (o = (n = t[r].time - t[r - 1].time) > o ? n : o);
                                for (
                                    this.maxContinuous = o,
                                        t.sort(function (t, e) {
                                            return t.time - e.time;
                                        });
                                    a < t.length;
                                    a++
                                )
                                    "start" === t[a].type && (0 === i && (s = a), ++i), "end" === t[a].type && 0 === --i && (e += t[a].time - t[s].time);
                                return e;
                            }),
                            (t.prototype._calculateWeightedBitrate = function (t) {
                                var e = this._bitrates,
                                    i = 0;
                                for (var s in e) s && e.hasOwnProperty(s) && t > 0 && (i += (parseInt(s, 10) * e[s]) / t);
                                return Math.round(i);
                            }),
                            (t.prototype.registerVideoVariant = function (t) {
                                var e = t.bitrate;
                                e && ((this._bitrates[e] = this._bitrates[e] || 0), this.startBitrate || (this.startBitrate = e)),
                                    t.audioProfile && t.audioProfile.audio_codec && (this.audiocodec = t.audioProfile.audio_codec),
                                    t.videoProfile && t.videoProfile.video_codec && (this.videocodec = t.videoProfile.video_codec);
                            }),
                            (t.prototype.addStartSegment = function () {
                                this._segments.push({ type: "start", time: this.position }), (this._needsEndSegment = !0);
                            }),
                            (t.prototype.addEndSegment = function () {
                                this._needsEndSegment && (this._segments.push({ type: "end", time: this.position }), (this._needsEndSegment = !1));
                            }),
                            (t.prototype.addMSPlayed = function (t) {
                                t && (this.msPlayed += t);
                            }),
                            (t.prototype.trackBitrate = function (t, e) {
                                var i = t || UNSET_BITRATE_LABEL;
                                (this._bitrates[i] = this._bitrates[i] || 0), (this._bitrates[i] += e);
                            }),
                            (t.prototype.trackBufferURL = function (t, e) {
                                this._cdnURLTracker.track(t, e);
                            }),
                            (t.prototype.finalize = function () {
                                if (this._isFinalized) throw new tracking_1.TrackingError(errors_1.Errors.TRACK_DATA_ALREADY_FINALIZED, "TrackData already finalized.");
                                return (
                                    (this.msPlayedUnion = this._calculateUnion()),
                                    this.nSeeksBackward || this.nSeeksForward || (this.msPlayed = this.maxContinuous = this.msPlayedUnion),
                                    (this.timeWeightedBitrate = this._calculateWeightedBitrate(this.msPlayed)),
                                    (this.bufferingPercentage = this.msStalled / this.msPlayed),
                                    this.startBitrate || (this.startBitrate = this.bitrate),
                                    (this.urls = this._cdnURLTracker.toJSON()),
                                    (this._isFinalized = !0),
                                    !0
                                );
                            }),
                            (t.prototype.getURLsJSON = function () {
                                var t, e;
                                return null !==
                                    (e =
                                        null === (t = this._cdnURLTracker.toJSON().urls) || void 0 === t
                                            ? void 0
                                            : t.map(function (t) {
                                                  return t.url;
                                              })) && void 0 !== e
                                    ? e
                                    : [];
                            }),
                            (t.prototype.getPlaybackStats = function () {
                                var t;
                                switch (this.keySystem) {
                                    case key_system_1.KeySystem.WIDEVINE:
                                        t = "widevine";
                                        break;
                                    case key_system_1.KeySystem.PLAYREADY:
                                    case key_system_1.KeySystem.PLAYREADY_HARDWARE:
                                        t = "playready";
                                        break;
                                    default:
                                        t = "none";
                                }
                                return {
                                    ms_total_est: this.msActualDuration,
                                    ms_manifest_latency: this.msManifestLatency,
                                    ms_latency: this.msPlayLatency,
                                    start_offset_ms: this.startPosition,
                                    ms_initial_buffering: this.msPlayLatency,
                                    ms_seek_rebuffering: this.msSeekRebuffering,
                                    ms_stalled: this.msStalled,
                                    max_ms_seek_rebuffering: this.maxMsSeekRebuffering,
                                    max_ms_stalled: this.maxMsStalled,
                                    n_stalls: this.nStalls,
                                    audiocodec: this.audiocodec ? this.audiocodec.toLowerCase() : void 0,
                                    videocodec: this.videocodec ? this.videocodec.toLowerCase() : void 0,
                                    start_bitrate: this.startBitrate || this.bitrate || void 0,
                                    full_screen: void 0,
                                    time_weighted_bitrate: this.timeWeightedBitrate,
                                    buffering_percentage: void 0,
                                    prefetched_bytes: void 0,
                                    prefetched_bytes_loaded: void 0,
                                    prefetched_initial_bitrate: void 0,
                                    key_system: t,
                                    ms_key_latency: this.msKeyLatency,
                                    total_bytes: this.totalBytes,
                                    local_time_ms: this.localTimeMs,
                                    ms_played_background: void 0,
                                };
                            }),
                            (t.prototype.isFinalized = function () {
                                return this._isFinalized;
                            }),
                            t
                        );
                    })();
                exports.TrackingData = TrackingData;
            },
            { "../enums/errors": 44, "../enums/key_system": 46, "../error/tracking": 64, "./cdn_url_tracker": 19 },
        ],
        40: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.VideoContent = void 0);
                var tslib_1 = require("tslib"),
                    encoding_1 = require("@js-sdk/encoding"),
                    debug_tools_1 = require("@js-sdk/debug-tools"),
                    errors_1 = require("../enums/errors"),
                    key_system_1 = require("../enums/key_system"),
                    file_1 = require("../error/file"),
                    fragment_1 = require("../error/fragment"),
                    content_1 = require("./content"),
                    hls_1 = require("./helpers/hls"),
                    debugLogger = debug_tools_1.logging.forTag("playback.video_content"),
                    OVERHEAD = 1e5,
                    SUBTITLE_LANGUAGE_CODE = "{{language_code}}",
                    VideoContent = (function (e) {
                        function t(t) {
                            var r = e.call(this, t) || this;
                            return (
                                (r._assetId = ""),
                                (r._endTime = 0),
                                (r._videoFormats = []),
                                (r._audioFormats = []),
                                (r._subtitleLanguages = []),
                                (r._videoProfile = null),
                                (r._videoProfiles = []),
                                (r._audioProfile = null),
                                (r._audioProfiles = []),
                                (r._baseURL = ""),
                                (r._initTemplate = ""),
                                (r._segmentTemplate = ""),
                                (r._subtitleTemplate = ""),
                                (r._initTemplate = ""),
                                (r._isAd = t.isAd || !1),
                                (r._mediaType = "video"),
                                (r._resolver = t.resolver),
                                (r._videoFormats = t.videoFormats),
                                (r._audioFormats = t.audioFormats),
                                (r._disallowProfile = t.disallowProfile),
                                r._keySystem === key_system_1.KeySystem.FAIRPLAY && r._audioFormats.unshift({ mimeType: "audio/mp2t", codec: "mp4a.40.2" }),
                                r
                            );
                        }
                        return (
                            tslib_1.__extends(t, e),
                            (t.create = function (e) {
                                return new t(e);
                            }),
                            (t.prototype._updateVariants = function () {
                                var e,
                                    t = this._audioProfiles[0];
                                this._audioProfile = null != t ? t : null;
                                for (var r = this._abrManager.getBandwidthEstimate(), i = this._videoProfiles, o = i.length; o--; ) {
                                    var n = i[o],
                                        s = null !== (e = null == t ? void 0 : t.max_bitrate) && void 0 !== e ? e : 0;
                                    if (n.max_bitrate + s < r - OVERHEAD) return void (this._videoProfile = n);
                                }
                                this._videoProfile = i[0];
                            }),
                            (t.prototype._constructAudioMimeType = function (e) {
                                return e ? e.mime_type + ';codecs="' + e.audio_codec + '"' : "";
                            }),
                            (t.prototype._constructVideoMimeType = function (e) {
                                return e ? e.mime_type + ';codecs="' + e.video_codec + '"' : "";
                            }),
                            (t.prototype._selectPreferredProfile = function (e, t, r, i, o) {
                                for (var n = 0, s = t; n < s.length; n++) {
                                    for (var a = s[n], u = [], l = "spotify/unknown-mimetype", d = "unknown-codec", _ = 0, f = r; _ < f.length; _++) {
                                        var c = f[_];
                                        if (e in c && c.encryption_index === i && (this._keySystem !== key_system_1.KeySystem.FAIRPLAY || "ts" === c.file_type)) {
                                            var m = "audio_codec" in c ? c.audio_codec : c.video_codec,
                                                h = c.mime_type;
                                            (null != o && o({ mimeType: h, codec: m, height: c.video_height, width: c.video_width })) || (m === d && h === l ? u.push(c) : m === a.codec && h === a.mimeType && ((l = h), (d = m), u.push(c)));
                                        }
                                    }
                                    if (u.length)
                                        return u.sort(function (e, t) {
                                            return "video_bitrate" in e && "video_bitrate" in t ? e.video_bitrate - t.video_bitrate : e.max_bitrate - t.max_bitrate;
                                        });
                                }
                                return [];
                            }),
                            (t.prototype._constructFragmentURL = function (e) {
                                if (!this._audioProfile && !this._videoProfile) throw new Error("Both audioProfile and videoProfile is null");
                                return e.init
                                    ? this._resolver.getInitSegmentURLs(this._baseURL, this._initTemplate, this._audioProfile, this._videoProfile)
                                    : this._resolver.getSegmentURLs(this._baseURL, this._segmentTemplate, e.timeStart, this._audioProfile, this._videoProfile);
                            }),
                            (t.prototype._fetchBufferForFragment = function (e) {
                                var t = this;
                                if (!e.fetchingBufferPromise) {
                                    var r,
                                        i = Date.now(),
                                        o = this._videoProfile ? this._videoProfile.video_resolution : void 0,
                                        n = {
                                            method: "GET",
                                            responseType: "arraybuffer",
                                            timing: !0,
                                            retry: {
                                                condition: function (e, t) {
                                                    if (0 === e.status) return !0;
                                                    var r = e.getStatusFamily();
                                                    return r === t.CONNECTION_ERROR || r === t.SERVER_ERROR;
                                                },
                                            },
                                        };
                                    try {
                                        r = this._constructFragmentURL(e);
                                    } catch (e) {
                                        return Promise.reject(e);
                                    }
                                    var s = function (e) {
                                        return t._abrManager.sample(e.buffer.byteLength, Date.now() - i), t._updateVariants(), e;
                                    };
                                    e.fetchingBufferPromise = Promise.all([
                                        r.audio ? this._transport.request(r.audio, n).then(this._parseFragmentResponse.bind(this, e, "audio")).then(s) : null,
                                        r.video ? this._transport.request(r.video, n).then(this._parseFragmentResponse.bind(this, e, "video")).then(s) : null,
                                    ])
                                        .then(function (i) {
                                            var n = i[0],
                                                s = i[1];
                                            return (
                                                (e.quality = o),
                                                (e.bitrate = t._videoProfile ? t._videoProfile.video_bitrate : void 0),
                                                e.cacheBuffer && (n && ((e.audio.buffer = n.buffer), (e.audio.bufferURL = r.audioLogging)), e.video && s && ((e.video.buffer = s.buffer), (e.video.bufferURL = r.videoLogging))),
                                                (e.fetchingBufferPromise = null),
                                                {
                                                    audio: n ? { bandwidth: n.bandwidth, buffer: n.buffer, bufferURL: r.audioLogging, byteEnd: e.audio.byteEnd, byteStart: e.audio.byteStart, codec: e.audio.codec } : void 0,
                                                    video: s
                                                        ? {
                                                              bandwidth: s.bandwidth,
                                                              buffer: s.buffer,
                                                              bufferURL: r.videoLogging,
                                                              byteEnd: e.video ? e.video.byteEnd : 0,
                                                              byteStart: e.video ? e.video.byteStart : 0,
                                                              codec: e.video ? e.video.codec : "",
                                                          }
                                                        : void 0,
                                                }
                                            );
                                        })
                                        .catch(function (t) {
                                            return (e.fetchingBufferPromise = null), Promise.reject(t);
                                        });
                                }
                                return e.fetchingBufferPromise;
                            }),
                            (t.prototype._parseFragmentResponse = function (e, t, r) {
                                var i = e.timeStart + "-" + e.timeEnd,
                                    o = null;
                                switch ((e[t] && (o = e[t]), r.status)) {
                                    case 0:
                                        return Promise.reject(new fragment_1.FragmentError(errors_1.Errors.FRAGMENT_REQUEST_FAILED_WITH_ZERO, "Request failed with status 0.", 0, { time_range: i, codec: o, quality: e.quality }));
                                    case 200:
                                    case 206:
                                        return r.body
                                            ? Promise.resolve({ buffer: r.body, bandwidth: (8e3 * r.body.byteLength) / r.timing.completed })
                                            : Promise.reject(new fragment_1.FragmentError(errors_1.Errors.FRAGMENT_REQUEST_EMPTY_RESPONSE, "Empty response for successful buffer.", r.status, { time_range: i, codec: o, quality: e.quality }));
                                }
                                return Promise.reject(
                                    new fragment_1.FragmentError(errors_1.Errors.FRAGMENT_REQUEST_FAILED_WITH_STATUS, "Buffer request failed with status " + r.status, r.status, { time_range: i, codec: o, quality: e.quality })
                                );
                            }),
                            (t.prototype._getHLSURLForProfile = function (e) {
                                for (var t = this._duration, r = this._segmentLength, i = this._segmentTemplate, o = [], n = 0; n < t; n += r) {
                                    var s = n + r > t ? t - n : r,
                                        a = i.replace("{{profile_id}}", e.id).replace("{{segment_timestamp}}", n.toString(10)).replace("{{file_type}}", e.file_type);
                                    o.push({ duration: s, url: "" + this._baseURL + a });
                                }
                                return hls_1.createProtectedManifestURL({ assetID: this._assetId, targetDuration: r, segments: o });
                            }),
                            (t.prototype._calculateFragments = function (e) {
                                this._duration = e.end_time_millis / 1e3;
                                var t = this._segmentLength;
                                this._initFragment = {
                                    init: !0,
                                    cacheBuffer: !this._disableCache,
                                    timeStart: -1,
                                    timeEnd: -1,
                                    quality: 0,
                                    bitrate: 0,
                                    audio: { bufferURL: null, buffer: null, codec: this._constructAudioMimeType(this._audioProfile), byteStart: -1, byteEnd: -1 },
                                    video: { bufferURL: null, buffer: null, codec: this._constructVideoMimeType(this._videoProfile), byteStart: -1, byteEnd: -1 },
                                };
                                for (var r = 0; r < this._duration; r += t)
                                    this._fragments.push({
                                        bitrate: 0,
                                        cacheBuffer: !r && !this._disableCache,
                                        timeStart: r,
                                        timeEnd: r + t,
                                        quality: 0,
                                        fetchingBufferPromise: null,
                                        audio: { bufferURL: null, buffer: null, codec: this._constructAudioMimeType(this._audioProfile), byteStart: -1, byteEnd: -1 },
                                        video: { bufferURL: null, buffer: null, codec: this._constructVideoMimeType(this._videoProfile), byteStart: -1, byteEnd: -1 },
                                    });
                                this._calculateUsableFragments();
                            }),
                            (t.prototype.abort = function () {}),
                            (t.prototype.getBitrateForTime = function (e) {
                                if (null === this._usableFragments) return 0;
                                var t = this._usableFragments,
                                    r = this._segmentLength,
                                    i = t[(e - (e % r)) / r].bitrate;
                                return void 0 === i ? 0 : i;
                            }),
                            (t.prototype.getBufferForFragment = function (e) {
                                return e && e.audio.buffer && e.video && e.video.buffer && e.quality && this._videoProfile && e.quality >= this._videoProfile.video_resolution
                                    ? Promise.resolve({
                                          audio: { bufferURL: e.audio.bufferURL, buffer: e.audio.buffer, codec: e.audio.codec, bandwidth: 0, byteStart: -1, byteEnd: -1 },
                                          video: { bufferURL: e.video.bufferURL, buffer: e.video.buffer, codec: e.video.codec, bandwidth: 0, byteStart: -1, byteEnd: -1 },
                                      })
                                    : this._fetchBufferForFragment(e);
                            }),
                            (t.prototype.clearCachedBuffers = function () {
                                this._initFragment && ((this._initFragment.audio.buffer = null), this._initFragment.video && (this._initFragment.video.buffer = null)),
                                    this._usableFragments.forEach(function (e) {
                                        (e.audio.buffer = null), e.video && (e.video.buffer = null);
                                    });
                            }),
                            (t.prototype.getDuration = function () {
                                return this._endTime;
                            }),
                            (t.prototype.getFragmentAfterTime = function (e) {
                                if (null === this._usableFragments) return null;
                                if (0 === e || 0.01 === e) return this._usableFragments[1];
                                for (var t = 0, r = this._usableFragments; t < r.length; t++) {
                                    var i = r[t];
                                    if (i.timeStart > e) return i;
                                }
                                return null;
                            }),
                            (t.prototype.getFragmentForTime = function (e) {
                                if (null === this._usableFragments) return null;
                                if (0 === e || 0.01 === e) return this._usableFragments[0];
                                for (var t = 0, r = this._usableFragments; t < r.length; t++) {
                                    var i = r[t];
                                    if (i.timeStart <= e && i.timeEnd >= e) return i;
                                }
                                return null;
                            }),
                            (t.prototype.getSubtitleLanguages = function () {
                                return this._subtitleLanguages;
                            }),
                            (t.prototype.getSubtitles = function () {
                                var e = this;
                                return this._subtitleLanguages.map(function (t) {
                                    return { lang: t, url: e._subtitleTemplate.replace(SUBTITLE_LANGUAGE_CODE, t) };
                                });
                            }),
                            (t.prototype.load = function (e) {
                                var t = this;
                                if ((void 0 === e && (e = { resolveLatency: 0, manifestLatency: 0 }), this._loaded)) return (e.resolveLatency = 0), (e.manifestLatency = 0), Promise.resolve(this);
                                var r = Date.now();
                                return this._resolver.getManifest(this._fileId).then(function (i) {
                                    var o, n;
                                    (e.resolveLatency = 0), (e.manifestLatency = Date.now() - r);
                                    var s = i.contents[0];
                                    if (!s) return ((n = new file_1.FileError(errors_1.Errors.FILE_MALFORMED_SEEKTABLE, "Malformed seektable: no contents.")).track = t.toLogJSON()), Promise.reject(n);
                                    (t._resolvedURLs = i.base_urls.slice()),
                                        (t._baseURL = i.base_urls.shift() || ""),
                                        (t._resolvedURL = t._baseURL),
                                        (t._fallbackURLs = i.base_urls),
                                        (t._initTemplate = i.initialization_template),
                                        (t._segmentTemplate = i.segment_template),
                                        (t._segmentLength = s.segment_length);
                                    var a = void 0;
                                    if (s.encryption_infos && s.encryption_infos.length) {
                                        for (var u = s.encryption_infos, l = t._keySystemSettings.commonName, d = void 0, _ = 0, f = u.length; _ < f; _++) {
                                            var c = u[_];
                                            if (c && c.key_system === l) {
                                                (a = _), (d = c[t._keySystemSettings.pssh_field.video]);
                                                break;
                                            }
                                        }
                                        if (!d) return ((n = new file_1.FileError(errors_1.Errors.FILE_FORMAT_NOT_SUPPORTED, "KeySystem does not support the file format.")).track = t.toLogJSON()), Promise.reject(n);
                                        switch (t._keySystemSettings.commonName) {
                                            case "widevine":
                                            case "playready":
                                                t._protection = "cenc";
                                                try {
                                                    t._psshBox = t._parsePSSHBox(d);
                                                } catch (e) {
                                                    return ((n = new file_1.FileError(errors_1.Errors.FILE_MALFORMED_PSSH, "Invalid PSSH value.")).track = t.toLogJSON()), Promise.reject(n);
                                                }
                                                break;
                                            case "fairplay":
                                                (t._protection = "hls"), (t._psshBox = new Uint8Array([]));
                                                try {
                                                    t._assetId = t._parseAssetID(d);
                                                } catch (e) {
                                                    return ((n = new file_1.FileError(errors_1.Errors.FILE_MALFORMED_PSSH, "Invalid PSSH value.")).track = t.toLogJSON()), Promise.reject(n);
                                                }
                                                break;
                                            default:
                                                return ((n = new file_1.FileError(errors_1.Errors.FILE_FORMAT_NOT_SUPPORTED, "KeySystem does not support the file format.")).track = t.toLogJSON()), Promise.reject(n);
                                        }
                                    }
                                    return (
                                        (t._endTime = i.end_time_millis),
                                        (t._videoProfiles = t._selectPreferredProfile("video_codec", t._videoFormats, s.profiles, a, t._disallowProfile)),
                                        (t._audioProfiles = t._selectPreferredProfile("audio_codec", t._audioFormats, s.profiles, a)),
                                        t._updateVariants(),
                                        t._calculateFragments(i),
                                        (t._subtitleLanguages = i.subtitle_language_codes || []),
                                        (null === (o = i.subtitle_base_urls) || void 0 === o ? void 0 : o.length) && i.subtitle_template
                                            ? (t._subtitleTemplate = "" + i.subtitle_base_urls[0] + i.subtitle_template)
                                            : (debugLogger.info("No subtitles available"), (t._subtitleTemplate = "")),
                                        t
                                    );
                                });
                            }),
                            (t.prototype.getResolveLatency = function () {}),
                            (t.prototype.getPlayableCodecs = function () {
                                return [this._constructAudioMimeType(this._audioProfile), this._constructVideoMimeType(this._videoProfile)].filter(function (e) {
                                    return !!e;
                                });
                            }),
                            (t.prototype.getAudioProfile = function () {
                                return this._audioProfile;
                            }),
                            (t.prototype.getVideoProfile = function () {
                                return this._videoProfile;
                            }),
                            (t.prototype.getVideoProfiles = function () {
                                return this._videoProfiles;
                            }),
                            (t.prototype.getHLSURL = function () {
                                if (!this._resolvedURL) throw new file_1.FileError(errors_1.Errors.FILE_NOT_RESOLVED, "Cannot return HLS Manifest URL: File not resolved.");
                                var e = [],
                                    t = this._audioProfiles[0];
                                t && e.push('#EXT-X-MEDIA:TYPE=AUDIO,GROUP-ID="audio",LANGUAGE="eng",NAME="English",AUTOSELECT=YES,URI="' + this._getHLSURLForProfile(t) + '"');
                                for (var r = 0, i = this._videoProfiles; r < i.length; r++) {
                                    var o = i[r];
                                    e.push(
                                        "#EXT-X-STREAM-INF:BANDWIDTH=" +
                                            o.max_bitrate +
                                            ",RESOLUTION=" +
                                            o.video_width +
                                            "x" +
                                            o.video_height +
                                            ',CODECS="' +
                                            ((null == t ? void 0 : t.audio_codec) ? "mp4a.40.2, " + o.video_codec : o.video_codec) +
                                            '"' +
                                            ((null == t ? void 0 : t.audio_codec) ? ',AUDIO="audio"' : "") +
                                            "\n" +
                                            this._getHLSURLForProfile(o)
                                    );
                                }
                                var n = "#EXTM3U\n" + e.join("\n");
                                return "data:application/vnd.apple.mpegurl;base64," + encoding_1.Base64.encode(n);
                            }),
                            t
                        );
                    })(content_1.Content);
                exports.VideoContent = VideoContent;
            },
            { "../enums/errors": 44, "../enums/key_system": 46, "../error/file": 57, "../error/fragment": 58, "./content": 20, "./helpers/hls": 32, "@js-sdk/debug-tools": 11, "@js-sdk/encoding": 15, tslib: 190 },
        ],
        41: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.VideoResolve = void 0);
                var errors_1 = require("../enums/errors"),
                    storage_1 = require("../error/storage"),
                    VideoResolve = (function () {
                        function e(e) {
                            this._transport = e;
                        }
                        return (
                            (e.create = function (t) {
                                return new e(t);
                            }),
                            (e.prototype._parseManifestResponse = function (e) {
                                if (200 !== e.status) {
                                    var t = new storage_1.StorageError(errors_1.Errors.STORAGE_VIDEO_MANIFEST_FAILED, "Video manifest request failed with status " + e.status);
                                    return (t.status = e.status), Promise.reject(t);
                                }
                                return Promise.resolve(e.body);
                            }),
                            (e.prototype.getInitSegmentURLs = function (e, t, r, o) {
                                var i = "";
                                r && (i = e + t.replace("{{profile_id}}", r.id).replace("{{file_type}}", r.file_type));
                                var s = "";
                                return o && (s = e + t.replace("{{profile_id}}", o.id).replace("{{file_type}}", o.file_type)), { audio: i, video: s, audioLogging: i, videoLogging: s };
                            }),
                            (e.prototype.getSegmentURLs = function (e, t, r, o, i) {
                                var s = "";
                                o && (s = e + t.replace("{{profile_id}}", o.id).replace("{{file_type}}", o.file_type));
                                var n = "";
                                return (
                                    i && (n = e + t.replace("{{profile_id}}", i.id).replace("{{file_type}}", i.file_type)),
                                    { audio: s.replace("{{segment_timestamp}}", r.toString()), video: n.replace("{{segment_timestamp}}", r.toString()), audioLogging: s, videoLogging: n }
                                );
                            }),
                            (e.prototype.getManifest = function (e) {
                                var t = "@webgate/manifests/v6/json/sources/" + e + "/options/supports_drm";
                                return this._transport
                                    .request(t, {
                                        authorize: !0,
                                        responseType: "json",
                                        retry: {
                                            condition: function (e, t) {
                                                return e.getStatusFamily() !== t.SUCCESS;
                                            },
                                        },
                                    })
                                    .then(this._parseManifestResponse);
                            }),
                            e
                        );
                    })();
                exports.VideoResolve = VideoResolve;
            },
            { "../enums/errors": 44, "../error/storage": 63 },
        ],
        42: [
            function (require, module, exports) {
                "use strict";
                var _a;
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.AudioFileCodec = void 0);
                var audio_file_format_1 = require("./audio_file_format");
                exports.AudioFileCodec =
                    (((_a = {})[audio_file_format_1.AudioFileFormat.MP3_256] = "audio/mp3"),
                    (_a[audio_file_format_1.AudioFileFormat.MP3_320] = "audio/mp3"),
                    (_a[audio_file_format_1.AudioFileFormat.MP3_160] = "audio/mp3"),
                    (_a[audio_file_format_1.AudioFileFormat.MP3_96] = "audio/mp3"),
                    (_a[audio_file_format_1.AudioFileFormat.MP4_128] = 'audio/mp4; codecs="mp4a.40.2"'),
                    (_a[audio_file_format_1.AudioFileFormat.MP4_256] = 'audio/mp4; codecs="mp4a.40.2"'),
                    (_a[audio_file_format_1.AudioFileFormat.MP4_128_DUAL] = 'audio/mp4; codecs="mp4a.40.2"'),
                    (_a[audio_file_format_1.AudioFileFormat.MP4_256_DUAL] = 'audio/mp4; codecs="mp4a.40.2"'),
                    (_a[audio_file_format_1.AudioFileFormat.MP4_128_CBCS] = 'audio/mp4; codecs="mp4a.40.2"'),
                    (_a[audio_file_format_1.AudioFileFormat.MP4_256_CBCS] = 'audio/mp4; codecs="mp4a.40.2"'),
                    (_a[audio_file_format_1.AudioFileFormat.MP4_FLAC] = 'audio/mp4; codecs="flac"'),
                    _a);
            },
            { "./audio_file_format": 43 },
        ],
        43: [
            function (require, module, exports) {
                "use strict";
                var AudioFileFormat;
                Object.defineProperty(exports, "__esModule", { value: !0 }),
                    (exports.AudioFileFormat = void 0),
                    (function (_) {
                        (_[(_.MP3_256 = 3)] = "MP3_256"),
                            (_[(_.MP3_320 = 4)] = "MP3_320"),
                            (_[(_.MP3_160 = 5)] = "MP3_160"),
                            (_[(_.MP3_96 = 6)] = "MP3_96"),
                            (_[(_.MP4_128 = 10)] = "MP4_128"),
                            (_[(_.MP4_256 = 11)] = "MP4_256"),
                            (_[(_.MP4_128_DUAL = 12)] = "MP4_128_DUAL"),
                            (_[(_.MP4_256_DUAL = 13)] = "MP4_256_DUAL"),
                            (_[(_.MP4_128_CBCS = 14)] = "MP4_128_CBCS"),
                            (_[(_.MP4_256_CBCS = 15)] = "MP4_256_CBCS"),
                            (_[(_.MP4_FLAC = 17)] = "MP4_FLAC");
                    })((AudioFileFormat = exports.AudioFileFormat || (exports.AudioFileFormat = {})));
            },
            {},
        ],
        44: [
            function (require, module, exports) {
                "use strict";
                var Errors;
                Object.defineProperty(exports, "__esModule", { value: !0 }),
                    (exports.Errors = void 0),
                    (function (E) {
                        (E.CAPPING_USER_IS_CAPPED = "CAPPING_USER_IS_CAPPED"),
                            (E.EME_API_NOT_SUPPORTED = "EME_API_NOT_SUPPORTED"),
                            (E.EME_MEDIA_KEYS_NOT_SUPPORTED = "EME_MEDIA_KEYS_NOT_SUPPORTED"),
                            (E.EME_MEDIA_KEY_SESSION_NOT_SUPPORTED = "EME_MEDIA_KEY_SESSION_NOT_SUPPORTED"),
                            (E.EME_NO_SUPPORTED_KEYSYSTEM = "EME_NO_SUPPORTED_KEYSYSTEM"),
                            (E.EME_PLAYER_MEDIA_KEYS_SETTING_FAILED = "EME_PLAYER_MEDIA_KEYS_SETTING_FAILED"),
                            (E.EME_ERROR_UNKNOWN = "EME_ERROR_UNKNOWN"),
                            (E.EME_LICENSE_REQUEST_EMPTY_RESPONSE = "EME_LICENSE_REQUEST_EMPTY_RESPONSE"),
                            (E.EME_LICENSE_REQUEST_FAILED_WITH_STATUS = "EME_LICENSE_REQUEST_FAILED_WITH_STATUS"),
                            (E.EME_LICENSE_REQUEST_WIDEVINE_ERROR = "EME_LICENSE_REQUEST_WIDEVINE_ERROR"),
                            (E.EME_LICENSE_UPDATE_FAILED = "EME_LICENSE_UPDATE_FAILED"),
                            (E.EME_HEADER_KEY_VALUE_MISMATCH = "EME_HEADER_KEY_VALUE_MISMATCH"),
                            (E.EME_HEADER_MISSING_CHALLENGE = "EME_HEADER_MISSING_CHALLENGE"),
                            (E.EME_INIT_DATA_MALFORMED = "EME_INIT_DATA_MALFORMED"),
                            (E.EME_CANNOT_SET_CERTIFICATE_FOR_PLATFORM = "EME_CANNOT_SET_CERTIFICATE_FOR_PLATFORM"),
                            (E.EME_MEDIA_KEY_SESSION_V0_1B_ERROR = "EME_MEDIA_KEY_SESSION_V0_1B_ERROR"),
                            (E.EME_MEDIA_KEY_SESSION_SAFARI_ERROR = "EME_MEDIA_KEY_SESSION_SAFARI_ERROR"),
                            (E.EME_NO_SUPPORTED_CONFIGURATION = "EME_NO_SUPPORTED_CONFIGURATION"),
                            (E.EME_NOT_SUPPORTED_ERROR = "EME_NOT_SUPPORTED_ERROR"),
                            (E.EME_INVALID_STATE_ERROR = "EME_INVALID_STATE_ERROR"),
                            (E.EME_UNKNOWN_ERROR = "EME_UNKNOWN_ERROR"),
                            (E.DISALLOW_PROTECTED_TRACK_ERROR = "DISALLOW_PROTECTED_TRACK_ERROR"),
                            (E.FILE_FORMAT_NOT_SUPPORTED = "FILE_FORMAT_NOT_SUPPORTED"),
                            (E.FILE_MALFORMED_SEEKTABLE = "FILE_MALFORMED_SEEKTABLE"),
                            (E.FILE_MALFORMED_PSSH = "FILE_MALFORMED_PSSH"),
                            (E.FILE_NOT_RESOLVED = "FILE_NOT_RESOLVED"),
                            (E.FRAGMENT_ONLINE_REQUEST_FAILED_WITH_ZERO = "FRAGMENT_ONLINE_REQUEST_FAILED_WITH_ZERO"),
                            (E.FRAGMENT_OFFLINE_REQUEST_FAILED_WITH_ZERO = "FRAGMENT_OFFLINE_REQUEST_FAILED_WITH_ZERO"),
                            (E.FRAGMENT_REQUEST_FAILED_WITH_ZERO = "FRAGMENT_REQUEST_FAILED_WITH_ZERO"),
                            (E.FRAGMENT_REQUEST_FAILED_WITH_STATUS = "FRAGMENT_REQUEST_FAILED_WITH_STATUS"),
                            (E.FRAGMENT_REQUEST_EMPTY_RESPONSE = "FRAGMENT_REQUEST_EMPTY_RESPONSE"),
                            (E.FRAGMENT_REQUEST_UNEXPECTED_LENGTH = "FRAGMENT_REQUEST_UNEXPECTED_LENGTH"),
                            (E.PLAYER_ATTEMPTED_VOLUME_OUT_OF_RANGE = "PLAYER_ATTEMPTED_VOLUME_OUT_OF_RANGE"),
                            (E.PLAYER_BUFFER_QUOTA_EXCEEDED = "PLAYER_BUFFER_QUOTA_EXCEEDED"),
                            (E.PLAYER_CANNOT_FIND_PLAYABLE_URI = "PLAYER_CANNOT_FIND_PLAYABLE_URI"),
                            (E.PLAYER_MEDIA_ERROR = "PLAYER_MEDIA_ERROR"),
                            (E.PLAYER_PLAYBACK_ERROR = "PLAYER_PLAYBACK_ERROR"),
                            (E.MEDIA_ABORTED = "MEDIA_ABORTED"),
                            (E.MEDIA_DECODING_ERROR = "MEDIA_DECODING_ERROR"),
                            (E.MEDIA_NETWORK_ERROR = "MEDIA_NETWORK_ERROR"),
                            (E.MEDIA_NOT_SUPPORTED = "MEDIA_NOT_SUPPORTED"),
                            (E.LICENSE_RESOLVE_INVALID_RESPONSE = "LICENSE_RESOLVE_INVALID_RESPONSE"),
                            (E.LICENSE_RESOLVER_CANT_RESOLVE_URL = "LICENSE_RESOLVER_CANT_RESOLVE_URL"),
                            (E.LICENSE_RESOLVER_DEPRECATED_VERSION = "LICENSE_RESOLVER_DEPRECATED_VERSION"),
                            (E.LIST_PLAYER_NO_TRACK_PLAYER = "LIST_PLAYER_NO_TRACK_PLAYER"),
                            (E.LIST_PLAYER_NO_LIST = "LIST_PLAYER_NO_LIST"),
                            (E.LIST_PLAYER_INVALID_ARGUMENT = "LIST_PLAYER_INVALID_ARGUMENT"),
                            (E.LIST_PLAYER_FORBIDDEN = "LIST_PLAYER_FORBIDDEN"),
                            (E.STORAGE_ERROR = "STORAGE_ERROR"),
                            (E.STORAGE_FAILED_WITH_STATUS = "STORAGE_FAILED_WITH_STATUS"),
                            (E.STORAGE_RETURNED_NO_TRACKS = "STORAGE_RETURNED_NO_TRACKS"),
                            (E.STORAGE_TRACK_MANIFEST_FAILED = "STORAGE_TRACK_MANIFEST_FAILED"),
                            (E.STORAGE_TRACK_MANIFEST_EMPTY = "STORAGE_TRACK_MANIFEST_EMPTY"),
                            (E.STORAGE_VIDEO_MANIFEST_FAILED = "STORAGE_VIDEO_MANIFEST_FAILED"),
                            (E.TRACK_DATA_ALREADY_FINALIZED = "TRACK_DATA_ALREADY_FINALIZED"),
                            (E.TSV_SENDING_FAILED = "TSV_SENDING_FAILED"),
                            (E.PLAYBACK_STATS_SENDING_FAILED = "PLAYBACK_STATS_SENDING_FAILED"),
                            (E.PLAYBACK_START_SENDING_FAILED = "PLAYBACK_START_SENDING_FAILED"),
                            (E.UNKNOWN = "UNKNOWN");
                    })((Errors = exports.Errors || (exports.Errors = {})));
            },
            {},
        ],
        45: [
            function (require, module, exports) {
                "use strict";
                var Event;
                Object.defineProperty(exports, "__esModule", { value: !0 }),
                    (exports.Event = void 0),
                    (function (_) {
                        (_.KEY_SESSION_MESSAGE = "message"),
                            (_.KEY_SESSION_STATUSES_CHANGE = "keystatuseschange"),
                            (_.MEDIA_SOURCE_OPEN = "sourceopen"),
                            (_.MEDIA_SOURCE_CLOSE = "sourceclose"),
                            (_.SOURCE_BUFFER_UPDATE_END = "updateend"),
                            (_.MS_KEY_ADDED = "mskeyadded"),
                            (_.MS_KEY_ERROR = "mskeyerror"),
                            (_.MS_KEY_MESSAGE = "mskeymessage"),
                            (_.MS_NEEDKEY = "msneedkey"),
                            (_.WEBKIT_KEY_ADDED = "webkitkeyadded"),
                            (_.WEBKIT_KEY_ERROR = "webkitkeyerror"),
                            (_.WEBKIT_KEY_MESSAGE = "webkitkeymessage"),
                            (_.WEBKIT_NEEDKEY = "webkitneedkey"),
                            (_.V0_1B_KEY_ADDED = "keyadded"),
                            (_.V0_1B_KEY_ERROR = "keyerror"),
                            (_.V0_1B_KEY_MESSAGE = "keymessage"),
                            (_.V0_1B_NEEDKEY = "needkey"),
                            (_.MEDIA_CANPLAY = "canplay"),
                            (_.MEDIA_CANPLAYTHROUGH = "canplaythrough"),
                            (_.MEDIA_DURATIONCHANGE = "durationchange"),
                            (_.MEDIA_ENCRYPTED = "encrypted"),
                            (_.MEDIA_ENDED = "ended"),
                            (_.MEDIA_ERROR = "error"),
                            (_.MEDIA_LOADEDMETADATA = "loadedmetadata"),
                            (_.MEDIA_PAUSE = "pause"),
                            (_.MEDIA_PLAYING = "playing"),
                            (_.MEDIA_SEEKING = "seeking"),
                            (_.MEDIA_TIMEUPDATE = "timeupdate"),
                            (_.MEDIA_WAITING = "waiting"),
                            (_.INTERNAL_ENCRYPTED = "__encrypted"),
                            (_.INTERNAL_PLAYER_CANPLAY = "__canplay"),
                            (_.INTERNAL_PLAYER_CANPLAYTHROUGH = "__canplaythrough"),
                            (_.INTERNAL_MEDIA_REQUIRES_DURATION = "__requiresduration"),
                            (_.INTERNAL_PLAYER_LOADED_METADATA = "__loadedmetadata"),
                            (_.BUFFER_APPEND_ERROR = "append_error"),
                            (_.BUFFER_QUOTA_EXCEEDED = "quota_exceeded"),
                            (_.BUFFER_STALLED = "stalled"),
                            (_.BUFFER_SOURCE_OPEN = "source_open"),
                            (_.BUFFER_SOURCE_CLOSE = "source_close"),
                            (_.BUFFERING_START = "buffering_start"),
                            (_.BUFFERING_END = "buffering_end"),
                            (_.EME_LICENSE_REQUEST_ERROR = "license_request_error"),
                            (_.EME_LICENSE_REQUEST_CAPPED = "license_request_capped"),
                            (_.LIST_PLAYER_AUTOPLAY_FAILED = "player_autoplay_failed"),
                            (_.LIST_PLAYER_BEFORE_LIST_CHANGE = "before_list_change"),
                            (_.LIST_PLAYER_BEFORE_NEXT = "before_next"),
                            (_.LIST_PLAYER_BEFORE_PLAYER_LOAD = "before_player_load"),
                            (_.LIST_PLAYER_BEFORE_PREVIOUS = "before_previous"),
                            (_.LIST_PLAYER_BEFORE_TRACK_LOAD = "before_track_load"),
                            (_.LIST_PLAYER_BEFORE_VOLUME_CHANGE = "before_volume_change"),
                            (_.LIST_PLAYER_BUFFER_STALLED = "stalled"),
                            (_.LIST_PLAYER_BUFFERING_START = "buffering_start"),
                            (_.LIST_PLAYER_BUFFERING_END = "buffering_end"),
                            (_.LIST_PLAYER_CAPPED = "capped"),
                            (_.LIST_PLAYER_CLEARED = "cleared"),
                            (_.LIST_PLAYER_DURATION_CHANGED = "duration_changed"),
                            (_.LIST_PLAYER_ERROR = "error"),
                            (_.LIST_PLAYER_ERROR_SYNC = "error_sync"),
                            (_.LIST_PLAYER_LIST_CHANGED = "list_change"),
                            (_.LIST_PLAYER_LIST_ENDED = "list_ended"),
                            (_.LIST_PLAYER_LOAD_VIDEO = "load_video"),
                            (_.LIST_PLAYER_MAX_LIST_ERRORS_REACHED = "max_list_errors_reached"),
                            (_.LIST_PLAYER_PAUSED = "paused"),
                            (_.LIST_PLAYER_PLAYED_THRESHOLD_REACHED = "played_threshold_reached"),
                            (_.LIST_PLAYER_PLAYER_LOAD = "player_load"),
                            (_.LIST_PLAYER_PLAYING = "playing"),
                            (_.LIST_PLAYER_POSITION_CHANGED = "position_changed"),
                            (_.LIST_PLAYER_PROGRESS = "progress"),
                            (_.LIST_PLAYER_REPEAT_MODE_CHANGED = "repeat_mode_changed"),
                            (_.LIST_PLAYER_SHUFFLE_CHANGED = "shuffle_changed"),
                            (_.LIST_PLAYER_STOPPED = "stopped"),
                            (_.LIST_PLAYER_STOPPED_VIDEO = "stopped_video"),
                            (_.LIST_PLAYER_TRACKING_DATA_CREATED = "tracking_data_created"),
                            (_.LIST_PLAYER_TRACKING_DATA_FINALIZED = "tracking_data_finalized"),
                            (_.LIST_PLAYER_TRACK_ENDED = "track_ended"),
                            (_.LIST_PLAYER_TRACK_LOADED = "track_loaded"),
                            (_.LIST_PLAYER_TRACK_TIMEOUT = "track_timeout"),
                            (_.LIST_PLAYER_TRACK_UNPLAYABLE = "track_unplayable"),
                            (_.LIST_PLAYER_DATA_CREATED = "tracking_data_created"),
                            (_.LIST_PLAYER_DATA_FINALIZED = "tracking_data_finalized"),
                            (_.LIST_PLAYER_VOLUME_CHANGED = "volume_changed"),
                            (_.LIST_PLAYER_VIDEO_ELEMENT_APPENDED = "video_element_appended"),
                            (_.LIST_PLAYER_VIDEO_ELEMENT_REMOVED = "video_element_removed"),
                            (_.LOGGER_ERROR = "error"),
                            (_.PLAYER_AUTOPLAY_FAILED = "player_autoplay_failed"),
                            (_.PLAYER_BEFORE_LOAD = "before_load"),
                            (_.PLAYER_BEFORE_STOP = "before_stop"),
                            (_.PLAYER_BEFORE_VOLUME_CHANGE = "before_volume_change"),
                            (_.PLAYER_BUFFER_STALLED = "stalled"),
                            (_.PLAYER_BUFFERING_START = "buffering_start"),
                            (_.PLAYER_BUFFERING_END = "buffering_end"),
                            (_.PLAYER_CAN_PRELOAD = "can_preload"),
                            (_.PLAYER_CAPPED = "capped"),
                            (_.PLAYER_DURATION_CHANGED = "duration_changed"),
                            (_.PLAYER_ENDED = "ended"),
                            (_.PLAYER_ENDED_VIDEO = "ended_video"),
                            (_.PLAYER_ERROR = "error"),
                            (_.PLAYER_WARNING = "warning"),
                            (_.PLAYER_FIRST_BYTES = "first_bytes"),
                            (_.PLAYER_KEY_RECEIVED = "key"),
                            (_.PLAYER_LOAD = "load"),
                            (_.PLAYER_LOAD_VIDEO = "load_video"),
                            (_.PLAYER_LOADING_FAILED = "loading_failed"),
                            (_.PLAYER_PAUSED = "paused"),
                            (_.PLAYER_PLAYING = "playing"),
                            (_.PLAYER_POSITION_CHANGED = "position_changed"),
                            (_.PLAYER_PRELOADING_ERROR = "preloading_error"),
                            (_.PLAYER_PROGRESS = "progress"),
                            (_.PLAYER_STALLED = "stalled"),
                            (_.PLAYER_STOPPED = "stopped"),
                            (_.PLAYER_STOPPED_VIDEO = "stopped_video"),
                            (_.PLAYER_PLAYED_THRESHOLD_REACHED = "played_threshold_reached"),
                            (_.PLAYER_TIMEOUT = "timeout"),
                            (_.PLAYER_PLAYBACK_START = "playback_start"),
                            (_.PLAYER_TRACKING_DATA_CREATED = "tracking_data_created"),
                            (_.PLAYER_TRACKING_DATA_FINALIZED = "tracking_data_finalized"),
                            (_.PLAYER_VIDEO_ELEMENT_APPENDED = "video_element_appended"),
                            (_.PLAYER_VIDEO_ELEMENT_REMOVED = "video_element_removed"),
                            (_.PLAYER_MANAGER_READY = "ready"),
                            (_.TRACKER_PLAYBACK_START = "playback_start"),
                            (_.TRACKER_PLAYED_THRESHOLD_REACHED = "played_threshold_reached"),
                            (_.TRACKER_TRACKING_DATA_CREATED = "tracking_data_created"),
                            (_.TRACKER_TRACKING_DATA_FINALIZED = "tracking_data_finalized"),
                            (_.ABR_MANAGER_BITRATE_CHANGE = "bitrate_change");
                    })((Event = exports.Event || (exports.Event = {})));
            },
            {},
        ],
        46: [
            function (require, module, exports) {
                "use strict";
                var KeySystem;
                Object.defineProperty(exports, "__esModule", { value: !0 }),
                    (exports.KeySystem = void 0),
                    (function (e) {
                        (e.WIDEVINE = "com.widevine.alpha"),
                            (e.PLAYREADY = "com.microsoft.playready"),
                            (e.PLAYREADY_HARDWARE = "com.microsoft.playready.hardware"),
                            (e.FAIRPLAY = "com.apple.fps.1_0"),
                            (e.INVALID_SPOTIFY_KEY = "com.spotify.invalid");
                    })((KeySystem = exports.KeySystem || (exports.KeySystem = {})));
            },
            {},
        ],
        47: [
            function (require, module, exports) {
                "use strict";
                var ListConstants;
                Object.defineProperty(exports, "__esModule", { value: !0 }),
                    (exports.ListConstants = void 0),
                    (function (t) {
                        (t.NULL_VALUE = "NULL_VALUE"), (t.LIST_START = "LIST_START"), (t.LIST_END = "LIST_END"), (t.FORBIDDEN = "FORBIDDEN"), (t.IGNORE = "IGNORE"), (t.PAUSE = "PAUSE");
                    })((ListConstants = exports.ListConstants || (exports.ListConstants = {})));
            },
            {},
        ],
        48: [
            function (require, module, exports) {
                "use strict";
                var MediaFormat;
                Object.defineProperty(exports, "__esModule", { value: !0 }),
                    (exports.MediaFormat = void 0),
                    (function (M) {
                        (M.MP3 = "MP3"), (M.MP4 = "MP4"), (M.MP4_DUAL = "MP4_DUAL"), (M.MP4_CBCS = "MP4_CBCS"), (M.MP4_FLAC = "MP4_FLAC"), (M.MANIFEST_ID = "MANIFEST_ID");
                    })((MediaFormat = exports.MediaFormat || (exports.MediaFormat = {})));
            },
            {},
        ],
        49: [
            function (require, module, exports) {
                "use strict";
                var MediaContainer, MediaCodec;
                Object.defineProperty(exports, "__esModule", { value: !0 }),
                    (exports.MediaCodec = exports.MediaContainer = void 0),
                    (function (e) {
                        (e.MP4_AUDIO = "audio/mp4"), (e.MP4_VIDEO = "video/mp4"), (e.MTS_VIDEO = "video/mp2t"), (e.WEBM_AUDIO = "audio/webm"), (e.WEBM_VIDEO = "video/webm");
                    })((MediaContainer = exports.MediaContainer || (exports.MediaContainer = {}))),
                    (function (e) {
                        (e.AAC_LC = "mp4a.40.2"), (e.FLAC = "flac"), (e.OPUS = "opus"), (e.VP9 = "vp9"), (e.VP8 = "vp8"), (e.H264_31 = "avc1.4d401f");
                    })((MediaCodec = exports.MediaCodec || (exports.MediaCodec = {})));
            },
            {},
        ],
        50: [
            function (require, module, exports) {
                "use strict";
                var OperationResult;
                Object.defineProperty(exports, "__esModule", { value: !0 }),
                    (exports.OperationResult = void 0),
                    (function (_) {
                        (_.SUCCESS = "RESULT_SUCCESS"),
                            (_.INVALID = "RESULT_INVALID"),
                            (_.FORBIDDEN = "RESULT_FORBIDDEN"),
                            (_.OUT_OF_BOUNDS = "RESULT_OUT_OF_BOUNDS"),
                            (_.NO_LIST = "RESULT_NO_LIST"),
                            (_.NO_TRACK = "RESULT_NO_TRACK"),
                            (_.LIST_END = "RESULT_LIST_END"),
                            (_.INVALID_TRACK = "RESULT_INVALID_TRACK"),
                            (_.CANCELLED = "CANCELLED"),
                            (_.NO_TRACK_PLAYER = "NO_TRACK_PLAYER");
                    })((OperationResult = exports.OperationResult || (exports.OperationResult = {})));
            },
            {},
        ],
        51: [
            function (require, module, exports) {
                "use strict";
                var Reason;
                Object.defineProperty(exports, "__esModule", { value: !0 }),
                    (exports.Reason = void 0),
                    (function (e) {
                        (e.APPLOAD = "appload"),
                            (e.BACK_BUTTON = "backbtn"),
                            (e.CLICK_ROW = "clickrow"),
                            (e.CLICK_SIDE = "clickside"),
                            (e.END_PLAY = "endplay"),
                            (e.FORWARD_BUTTON = "fwdbtn"),
                            (e.LOGOUT = "logout"),
                            (e.PLAY_BUTTON = "playbtn"),
                            (e.POPUP = "popup"),
                            (e.REMOTE = "remote"),
                            (e.TRACK_DONE = "trackdone"),
                            (e.TRACK_ERROR = "trackerror"),
                            (e.UNKNOWN = "unknown"),
                            (e.URI_OPEN = "uriopen"),
                            (e.CAPPED = "capped");
                    })((Reason = exports.Reason || (exports.Reason = {})));
            },
            {},
        ],
        52: [
            function (require, module, exports) {
                "use strict";
                var RepeatMode;
                Object.defineProperty(exports, "__esModule", { value: !0 }),
                    (exports.RepeatMode = void 0),
                    (function (e) {
                        (e.NONE = "NONE"), (e.CONTEXT = "CONTEXT"), (e.TRACK = "TRACK");
                    })((RepeatMode = exports.RepeatMode || (exports.RepeatMode = {})));
            },
            {},
        ],
        53: [
            function (require, module, exports) {
                "use strict";
                var Robustness;
                Object.defineProperty(exports, "__esModule", { value: !0 }),
                    (exports.Robustness = void 0),
                    (function (s) {
                        (s.EMPTY = "EMPTY"), (s.SW_CRYPTO = "SW_CRYPTO"), (s.SW_DECODE = "SW_DECODE"), (s.HW_CRYPTO = "HW_CRYPTO"), (s.HW_DECODE = "HW_DECODE"), (s.HW_ALL = "HW_ALL");
                    })((Robustness = exports.Robustness || (exports.Robustness = {})));
            },
            {},
        ],
        54: [
            function (require, module, exports) {
                "use strict";
                var SubtitleMode;
                Object.defineProperty(exports, "__esModule", { value: !0 }),
                    (exports.SubtitleMode = void 0),
                    (function (e) {
                        (e.SHOWING = "showing"), (e.HIDDEN = "hidden");
                    })((SubtitleMode = exports.SubtitleMode || (exports.SubtitleMode = {})));
            },
            {},
        ],
        55: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.CappingError = void 0);
                var tslib_1 = require("tslib"),
                    CappingError = (function (r) {
                        function e(e, t) {
                            var i = r.call(this, t) || this;
                            return (i.name = "CappingError"), (i.message = t), (i.code = e), i;
                        }
                        return tslib_1.__extends(e, r), e;
                    })(Error);
                exports.CappingError = CappingError;
            },
            { tslib: 190 },
        ],
        56: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.EMEError = void 0);
                var tslib_1 = require("tslib"),
                    errors_1 = require("../enums/errors"),
                    EMEError = (function (r) {
                        function e(e, o) {
                            void 0 === e && (e = errors_1.Errors.EME_ERROR_UNKNOWN);
                            var s = r.call(this, o) || this;
                            return (s.status = -1), (s.licenseServer = ""), (s.shouldRefreshEndpoint = !1), (s.unrecoverable = !1), (s.debug = {}), (s.code = e), (s.message = o), (s.name = "EMEError"), s;
                        }
                        return (
                            tslib_1.__extends(e, r),
                            (e.fatal = function (r, o) {
                                void 0 === r && (r = errors_1.Errors.EME_ERROR_UNKNOWN);
                                var s = new e(r, o);
                                return (s.unrecoverable = !0), s;
                            }),
                            e
                        );
                    })(Error);
                exports.EMEError = EMEError;
            },
            { "../enums/errors": 44, tslib: 190 },
        ],
        57: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.FileError = void 0);
                var tslib_1 = require("tslib"),
                    errors_1 = require("../enums/errors"),
                    FileError = (function (r) {
                        function e(e, o) {
                            void 0 === e && (e = errors_1.Errors.STORAGE_ERROR), void 0 === o && (o = "File Error");
                            var i = r.call(this, o) || this;
                            return (i.canPlayNext = !0), (i.debug = {}), (i.code = e), (i.message = o), (i.name = "FileError"), i;
                        }
                        return tslib_1.__extends(e, r), e;
                    })(Error);
                exports.FileError = FileError;
            },
            { "../enums/errors": 44, tslib: 190 },
        ],
        58: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.FragmentError = void 0);
                var tslib_1 = require("tslib"),
                    FragmentError = (function (r) {
                        function e(e, t, o, s) {
                            void 0 === s && (s = {});
                            var n = r.call(this, t) || this;
                            return (n.code = e), (n.message = t), (n.status = o), (n.debug = s), (n.name = "FragmentError"), n;
                        }
                        return tslib_1.__extends(e, r), e;
                    })(Error);
                exports.FragmentError = FragmentError;
            },
            { tslib: 190 },
        ],
        59: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.LicenseError = void 0);
                var tslib_1 = require("tslib"),
                    LicenseError = (function (e) {
                        function r(r, t) {
                            var n = e.call(this) || this;
                            return (n.status = -1), (n.debug = {}), (n.canPlayNext = !0), (n.unrecoverable = !1), (n.name = "LicenseError"), (n.code = r), (n.message = t), n;
                        }
                        return (
                            tslib_1.__extends(r, e),
                            (r.fatal = function (e, t) {
                                var n = new r(e, t);
                                return (n.unrecoverable = !0), (n.canPlayNext = !1), n;
                            }),
                            r
                        );
                    })(Error);
                exports.LicenseError = LicenseError;
            },
            { tslib: 190 },
        ],
        60: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.LoggingError = void 0);
                var tslib_1 = require("tslib"),
                    LoggingError = (function (r) {
                        function e(e, o) {
                            var g = r.call(this, o) || this;
                            return (g.debug = {}), (g.name = "LoggingError"), (g.message = o), (g.code = e), g;
                        }
                        return tslib_1.__extends(e, r), e;
                    })(Error);
                exports.LoggingError = LoggingError;
            },
            { tslib: 190 },
        ],
        61: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.PlaybackError = void 0);
                var tslib_1 = require("tslib"),
                    PlaybackError = (function (r) {
                        function e(e, a) {
                            var t = r.call(this) || this;
                            return (t.unrecoverable = !1), (t.listPlayerIgnore = !1), (t.debug = {}), (t.name = "PlaybackError"), (t.code = e), (t.message = a), t;
                        }
                        return (
                            tslib_1.__extends(e, r),
                            (e.fatal = function (r, a) {
                                var t = new e(r, a);
                                return (t.unrecoverable = !0), t;
                            }),
                            e
                        );
                    })(Error);
                exports.PlaybackError = PlaybackError;
            },
            { tslib: 190 },
        ],
        62: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.PlaybackError = void 0);
                var tslib_1 = require("tslib"),
                    PlaybackError = (function (r) {
                        function e(e, a) {
                            var t = r.call(this, a) || this;
                            return (t.unrecoverable = !1), (t.listPlayerIgnore = !1), (t.debug = {}), (t.code = e), (t.message = a), (t.name = "PlaybackError"), t;
                        }
                        return (
                            tslib_1.__extends(e, r),
                            (e.fatal = function (r, a) {
                                var t = new e(r, a);
                                return (t.unrecoverable = !0), t;
                            }),
                            e
                        );
                    })(Error);
                exports.PlaybackError = PlaybackError;
            },
            { tslib: 190 },
        ],
        63: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.StorageError = void 0);
                var tslib_1 = require("tslib"),
                    errors_1 = require("../enums/errors"),
                    StorageError = (function (r) {
                        function e(e, o) {
                            void 0 === e && (e = errors_1.Errors.STORAGE_ERROR), void 0 === o && (o = "Storage Error");
                            var t = r.call(this, o) || this;
                            return (t.status = -1), (t.fileId = ""), (t.debug = {}), (t.canPlayNext = !0), (t.code = e), (t.message = o), (t.name = "StorageError"), t;
                        }
                        return tslib_1.__extends(e, r), e;
                    })(Error);
                exports.StorageError = StorageError;
            },
            { "../enums/errors": 44, tslib: 190 },
        ],
        64: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.TrackingError = void 0);
                var tslib_1 = require("tslib"),
                    TrackingError = (function (r) {
                        function e(e, t) {
                            var i = r.call(this, t) || this;
                            return (i.debug = {}), (i.name = "TrackingError"), (i.message = t), (i.code = e), i;
                        }
                        return tslib_1.__extends(e, r), e;
                    })(Error);
                exports.TrackingError = TrackingError;
            },
            { tslib: 190 },
        ],
        65: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.createPlayer = void 0);
                var tslib_1 = require("tslib"),
                    player_1 = require("./_internal/player"),
                    logger_1 = require("./_internal/logger"),
                    storage_resolve_1 = require("./_internal/storage_resolve"),
                    tracker_1 = require("./_internal/tracker"),
                    video_resolve_1 = require("./_internal/video_resolve"),
                    license_url_resolver_1 = require("./_internal/license_url_resolver"),
                    audio_file_format_1 = require("./enums/audio_file_format");
                Object.defineProperty(exports, "AudioFileFormat", {
                    enumerable: !0,
                    get: function () {
                        return audio_file_format_1.AudioFileFormat;
                    },
                });
                var errors_1 = require("./enums/errors");
                Object.defineProperty(exports, "Errors", {
                    enumerable: !0,
                    get: function () {
                        return errors_1.Errors;
                    },
                });
                var event_1 = require("./enums/event");
                Object.defineProperty(exports, "PlaybackEvent", {
                    enumerable: !0,
                    get: function () {
                        return event_1.Event;
                    },
                });
                var key_system_1 = require("./enums/key_system");
                Object.defineProperty(exports, "KeySystem", {
                    enumerable: !0,
                    get: function () {
                        return key_system_1.KeySystem;
                    },
                });
                var list_constants_1 = require("./enums/list_constants");
                Object.defineProperty(exports, "ListConstants", {
                    enumerable: !0,
                    get: function () {
                        return list_constants_1.ListConstants;
                    },
                });
                var media_types_1 = require("./enums/media_types");
                Object.defineProperty(exports, "MediaCodec", {
                    enumerable: !0,
                    get: function () {
                        return media_types_1.MediaCodec;
                    },
                });
                var media_format_1 = require("./enums/media_format");
                Object.defineProperty(exports, "MediaFormat", {
                    enumerable: !0,
                    get: function () {
                        return media_format_1.MediaFormat;
                    },
                });
                var operation_result_1 = require("./enums/operation_result");
                Object.defineProperty(exports, "OperationResult", {
                    enumerable: !0,
                    get: function () {
                        return operation_result_1.OperationResult;
                    },
                });
                var reason_1 = require("./enums/reason");
                Object.defineProperty(exports, "Reason", {
                    enumerable: !0,
                    get: function () {
                        return reason_1.Reason;
                    },
                });
                var repeat_mode_1 = require("./enums/repeat_mode");
                Object.defineProperty(exports, "RepeatMode", {
                    enumerable: !0,
                    get: function () {
                        return repeat_mode_1.RepeatMode;
                    },
                });
                var robustness_1 = require("./enums/robustness");
                Object.defineProperty(exports, "Robustness", {
                    enumerable: !0,
                    get: function () {
                        return robustness_1.Robustness;
                    },
                });
                var listplayer_1 = require("./listplayer");
                function createPlayer(e) {
                    return new Promise(function (r, t) {
                        var n, o;
                        if (e.transport)
                            if (e.logger) {
                                var s = e.transport,
                                    i = (e.sdkId || "").split(":"),
                                    a = i[0],
                                    u = void 0 === a ? "" : a,
                                    l = i[1],
                                    _ = void 0 === l ? "" : l,
                                    p = tslib_1.__assign(tslib_1.__assign({}, e), {
                                        tracker: tracker_1.Tracker.create(),
                                        audioResolver: new storage_resolve_1.StorageResolve(s),
                                        videoResolver: new video_resolve_1.VideoResolve(s),
                                        licenseURLResolver: new license_url_resolver_1.LicenseURLResolver({ transport: s, sdk: { name: u, version: _ }, securityLevel: e.securityLevel }),
                                        newBufferPerTrack: null === (n = e.newBufferPerTrack) || void 0 === n || n,
                                        preinitMediaElement: null === (o = e.preinitMediaElement) || void 0 === o || o,
                                    });
                                player_1.Player.create(p)
                                    .then(function (r) {
                                        return { player: r, logger: logger_1.Logger.create({ transport: s, player: r, logger: e.logger }) };
                                    })
                                    .then(r, t);
                            } else t(new TypeError("Argument `options.logger` is required."));
                        else t(new TypeError("Argument transport is required."));
                    });
                }
                Object.defineProperty(exports, "ListPlayer", {
                    enumerable: !0,
                    get: function () {
                        return listplayer_1.ListPlayer;
                    },
                }),
                    (exports.createPlayer = createPlayer);
            },
            {
                "./_internal/license_url_resolver": 33,
                "./_internal/logger": 34,
                "./_internal/player": 36,
                "./_internal/storage_resolve": 37,
                "./_internal/tracker": 38,
                "./_internal/video_resolve": 41,
                "./enums/audio_file_format": 43,
                "./enums/errors": 44,
                "./enums/event": 45,
                "./enums/key_system": 46,
                "./enums/list_constants": 47,
                "./enums/media_format": 48,
                "./enums/media_types": 49,
                "./enums/operation_result": 50,
                "./enums/reason": 51,
                "./enums/repeat_mode": 52,
                "./enums/robustness": 53,
                "./listplayer": 66,
                tslib: 190,
            },
        ],
        66: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.ListPlayer = void 0);
                var tslib_1 = require("tslib"),
                    emitter_1 = require("@spotify-internal/emitter"),
                    errors_1 = require("./enums/errors"),
                    operation_result_1 = require("./enums/operation_result"),
                    repeat_mode_1 = require("./enums/repeat_mode"),
                    list_constants_1 = require("./enums/list_constants"),
                    reason_1 = require("./enums/reason"),
                    event_1 = require("./enums/event"),
                    playback_1 = require("./error/playback"),
                    defer_1 = require("./_internal/defer");
                function createPlaybackOptions(t) {
                    void 0 === t && (t = {});
                    var e = { index: -1, position: 0, initialPosition: 0, duration: -1, paused: !1, reason: reason_1.Reason.UNKNOWN };
                    return (
                        void 0 !== t.index && (e.index = t.index),
                        void 0 !== t.position && (e.position = t.position),
                        void 0 !== t.initialPosition && (e.initialPosition = t.initialPosition),
                        void 0 !== t.duration && (e.duration = t.duration),
                        void 0 !== t.paused && (e.paused = t.paused),
                        void 0 !== t.reason && (e.reason = t.reason),
                        e
                    );
                }
                function isTrack(t) {
                    return "uri" in t;
                }
                var MAX_SEQ_ID = 9007199254740991,
                    DEFAULT_MAX_LIST_ERRORS = 5,
                    ListPlayer = (function (t) {
                        function e(e) {
                            var n = t.call(this) || this;
                            if (
                                ((n._trackPlayerPromise = defer_1.defer()),
                                (n._maxListErrors = DEFAULT_MAX_LIST_ERRORS),
                                (n._uid = 0),
                                (n._loadedList = null),
                                (n._loadedOptions = null),
                                (n._currentTrack = null),
                                (n._currentTrackOptions = null),
                                (n._listPlayCount = 0),
                                (n._listErrorCount = 0),
                                (n._shuffled = !1),
                                (n._repeatMode = repeat_mode_1.RepeatMode.NONE),
                                (n._currentSeqId = 0),
                                !e.trackPlayer)
                            )
                                throw new TypeError("Argument `options.trackPlayerManager` not found.");
                            return (
                                e.maxListErrors && (n._maxListErrors = e.maxListErrors),
                                (n._setListOptions = n._setListOptions.bind(n)),
                                (n._replaceCurrentList = n._replaceCurrentList.bind(n)),
                                (n._handleCapped = n._handleCapped.bind(n)),
                                (n._handlePlaying = n._handlePlaying.bind(n)),
                                (n._handlePaused = n._handlePaused.bind(n)),
                                (n._handleEnded = n._handleEnded.bind(n)),
                                (n._handleCanPreload = n._handleCanPreload.bind(n)),
                                (n._handleError = n._handleError.bind(n)),
                                (n._handlePositionChanged = n._handlePositionChanged.bind(n)),
                                (n._handleDurationChanged = n._handleDurationChanged.bind(n)),
                                (n._handleTimeout = n._handleTimeout.bind(n)),
                                (n._handlePlayerInitError = n._handlePlayerInitError.bind(n)),
                                (n._handleProgress = n._handleProgress.bind(n)),
                                (n._handlePlayedThresholdReached = n._handlePlayedThresholdReached.bind(n)),
                                n._init(e.trackPlayer),
                                n
                            );
                        }
                        return (
                            tslib_1.__extends(e, t),
                            (e.create = function (t) {
                                return new e(t);
                            }),
                            (e.prototype._init = function (t) {
                                var e = this;
                                this._trackPlayerPromise.promise.catch(function () {}),
                                    Promise.resolve(t)
                                        .then(function (t) {
                                            e._attachPlayerEvents(t), e._trackPlayerPromise.resolve(t);
                                        })
                                        .catch(this._handlePlayerInitError);
                            }),
                            (e.prototype._attachPlayerEvents = function (t) {
                                t.on(event_1.Event.PLAYER_CAN_PRELOAD, this._handleCanPreload),
                                    t.on(event_1.Event.PLAYER_CAPPED, this._handleCapped),
                                    t.on(event_1.Event.PLAYER_ENDED, this._handleEnded),
                                    t.on(event_1.Event.PLAYER_ERROR, this._handleError),
                                    t.on(event_1.Event.PLAYER_PAUSED, this._handlePaused),
                                    t.on(event_1.Event.PLAYER_PLAYING, this._handlePlaying),
                                    t.on(event_1.Event.PLAYER_TIMEOUT, this._handleTimeout),
                                    t.on(event_1.Event.PLAYER_POSITION_CHANGED, this._handlePositionChanged),
                                    t.on(event_1.Event.PLAYER_DURATION_CHANGED, this._handleDurationChanged),
                                    t.on(event_1.Event.PLAYER_PROGRESS, this._handleProgress),
                                    t.on(event_1.Event.PLAYER_PLAYED_THRESHOLD_REACHED, this._handlePlayedThresholdReached),
                                    this.proxyEmitSync(t, event_1.Event.PLAYER_BEFORE_VOLUME_CHANGE, event_1.Event.LIST_PLAYER_BEFORE_VOLUME_CHANGE),
                                    this.proxyEmit(t, event_1.Event.PLAYER_AUTOPLAY_FAILED, event_1.Event.LIST_PLAYER_AUTOPLAY_FAILED),
                                    this.proxyEmit(t, event_1.Event.PLAYER_BEFORE_LOAD, event_1.Event.LIST_PLAYER_BEFORE_PLAYER_LOAD),
                                    this.proxyEmitSync(t, event_1.Event.PLAYER_LOAD, event_1.Event.LIST_PLAYER_PLAYER_LOAD),
                                    this.proxyEmit(t, event_1.Event.PLAYER_TRACKING_DATA_CREATED, event_1.Event.LIST_PLAYER_TRACKING_DATA_CREATED),
                                    this.proxyEmit(t, event_1.Event.PLAYER_TRACKING_DATA_FINALIZED, event_1.Event.LIST_PLAYER_TRACKING_DATA_FINALIZED),
                                    this.proxyEmit(t, event_1.Event.PLAYER_BUFFER_STALLED, event_1.Event.LIST_PLAYER_BUFFER_STALLED),
                                    this.proxyEmit(t, event_1.Event.PLAYER_BUFFERING_START, event_1.Event.LIST_PLAYER_BUFFERING_START),
                                    this.proxyEmit(t, event_1.Event.PLAYER_BUFFERING_END, event_1.Event.LIST_PLAYER_BUFFERING_END),
                                    this.proxyEmit(t, event_1.Event.PLAYER_VIDEO_ELEMENT_APPENDED, event_1.Event.LIST_PLAYER_VIDEO_ELEMENT_APPENDED),
                                    this.proxyEmit(t, event_1.Event.PLAYER_VIDEO_ELEMENT_REMOVED, event_1.Event.LIST_PLAYER_VIDEO_ELEMENT_REMOVED);
                            }),
                            (e.prototype._translatePosition = function (t) {
                                var e, n, r;
                                return null !== (r = null === (n = null === (e = this._loadedList) || void 0 === e ? void 0 : e.translatePosition) || void 0 === n ? void 0 : n.call(e, t)) && void 0 !== r ? r : t;
                            }),
                            (e.prototype._translateDuration = function (t) {
                                var e, n, r;
                                return null !== (r = null === (n = null === (e = this._loadedList) || void 0 === e ? void 0 : e.translateDuration) || void 0 === n ? void 0 : n.call(e, t)) && void 0 !== r ? r : t;
                            }),
                            (e.prototype._handleProgress = function (t) {
                                var e = t.data;
                                this.emit(event_1.Event.LIST_PLAYER_PROGRESS, tslib_1.__assign(tslib_1.__assign({}, e), { position: this._translatePosition(e.position) }));
                            }),
                            (e.prototype._handlePlayerInitError = function (t) {
                                this._trackPlayerPromise.reject(new playback_1.PlaybackError(errors_1.Errors.LIST_PLAYER_NO_TRACK_PLAYER, t.message || "Track player promise was rejected."));
                            }),
                            (e.prototype._handleCapped = function () {
                                var t = this._currentTrack;
                                t && this.emit(event_1.Event.LIST_PLAYER_CAPPED, { uid: this._uid, track: t, options: this._currentTrackOptions, list: this._loadedList });
                            }),
                            (e.prototype._handlePlaying = function (t) {
                                var e = this._currentTrack;
                                e && this.emit(event_1.Event.LIST_PLAYER_PLAYING, { uid: this._uid, track: e, options: this._currentTrackOptions, list: this._loadedList, position: this._translatePosition(t.data.position) });
                            }),
                            (e.prototype._handlePaused = function (t) {
                                var e = this._currentTrack;
                                e && this.emit(event_1.Event.LIST_PLAYER_PAUSED, { uid: this._uid, track: e, options: this._currentTrackOptions, list: this._loadedList, position: this._translatePosition(t.data.position) });
                            }),
                            (e.prototype._handleCanPreload = function () {
                                this._preloadUpcomingTrack().catch(function () {});
                            }),
                            (e.prototype._handleEnded = function () {
                                var t = this._currentTrack;
                                t && (this.emit(event_1.Event.LIST_PLAYER_TRACK_ENDED, { uid: this._uid, track: t, options: this._currentTrackOptions, list: this._loadedList }), this.next(reason_1.Reason.TRACK_DONE));
                            }),
                            (e.prototype._handleTimeout = function () {
                                var t = this._currentTrack;
                                t && (this.emit(event_1.Event.LIST_PLAYER_TRACK_TIMEOUT, { uid: this._uid, track: t, options: this._currentTrackOptions, list: this._loadedList }), this.next(reason_1.Reason.TRACK_ERROR));
                            }),
                            (e.prototype._handlePositionChanged = function (t) {
                                var e = this._currentTrack;
                                e && this.emit(event_1.Event.LIST_PLAYER_POSITION_CHANGED, { uid: this._uid, track: e, options: this._currentTrackOptions, list: this._loadedList, position: this._translatePosition(t.data.position) });
                            }),
                            (e.prototype._handleDurationChanged = function (t) {
                                var e = this._currentTrack;
                                e &&
                                    this.emit(event_1.Event.LIST_PLAYER_DURATION_CHANGED, {
                                        uid: this._uid,
                                        track: e,
                                        options: this._currentTrackOptions,
                                        list: this._loadedList,
                                        position: this._translatePosition(t.data.position),
                                        duration: this._translateDuration(t.data.duration),
                                    });
                            }),
                            (e.prototype._handlePlayedThresholdReached = function (t) {
                                var e = this._currentTrack;
                                e &&
                                    this.emit(event_1.Event.LIST_PLAYER_PLAYED_THRESHOLD_REACHED, {
                                        uid: this._uid,
                                        track: e,
                                        options: this._currentTrackOptions,
                                        list: this._loadedList,
                                        threshold: t.data.threshold,
                                        position: this._translatePosition(t.data.position),
                                    });
                            }),
                            (e.prototype._handleError = function (t) {
                                var e = this._currentTrack,
                                    n = t.data;
                                if (e) {
                                    (n.position = this._translatePosition(t.data.position)), this.emit(event_1.Event.LIST_PLAYER_ERROR, n), this.emitSync(event_1.Event.LIST_PLAYER_ERROR_SYNC, n);
                                    var r = !!n.error && n.error.listPlayerIgnore;
                                    r || this._listErrorCount++,
                                        n.canPlayNext &&
                                            (r || this._listErrorCount <= this._maxListErrors
                                                ? this.next(reason_1.Reason.TRACK_ERROR)
                                                : this.emit(event_1.Event.LIST_PLAYER_MAX_LIST_ERRORS_REACHED, { count: this._listErrorCount, threshold: this._maxListErrors }));
                                }
                            }),
                            (e.prototype._handleTrackLoaded = function (t) {
                                this.emitSync(event_1.Event.LIST_PLAYER_TRACK_LOADED, t);
                            }),
                            (e.prototype._incrementSeqId = function () {
                                return this._currentSeqId >= MAX_SEQ_ID ? (this._currentSeqId = 0) : (this._currentSeqId += 1), this._currentSeqId;
                            }),
                            (e.prototype._getTrackPlayer = function () {
                                return this._trackPlayerPromise.promise;
                            }),
                            (e.prototype._setListIndex = function (t, e) {
                                var n = e.index && -1 !== e.index ? e.index : 0;
                                return Promise.all([t, e, t.startAt(n)]);
                            }),
                            (e.prototype._setListOptions = function (t) {
                                var e = t[0],
                                    n = t[1];
                                t[2];
                                return Promise.all([e.setShuffle(!!this._shuffled), e.setRepeatMode(this._repeatMode)]).then(function () {
                                    return [e, n];
                                });
                            }),
                            (e.prototype._replaceCurrentList = function (t) {
                                var e = t[0],
                                    n = t[1];
                                return (
                                    this.emitSync(event_1.Event.LIST_PLAYER_BEFORE_LIST_CHANGE, { newList: e, newOptions: n, oldList: this._loadedList, oldOptions: this._loadedOptions }),
                                    (this._loadedList = e),
                                    (this._loadedOptions = n),
                                    (this._listPlayCount = 0),
                                    (this._listErrorCount = 0),
                                    this.emit(event_1.Event.LIST_PLAYER_LIST_CHANGED, { list: e, options: n }),
                                    operation_result_1.OperationResult.SUCCESS
                                );
                            }),
                            (e.prototype._preloadTrack = function (t) {
                                return this._getTrackPlayer().then(function (e) {
                                    return e.preload(t).catch(function () {}), operation_result_1.OperationResult.SUCCESS;
                                });
                            }),
                            (e.prototype._changeTrack = function (t, e, n) {
                                var r = this;
                                if (this._currentSeqId !== n) return Promise.resolve(operation_result_1.OperationResult.CANCELLED);
                                this.emitSync(event_1.Event.LIST_PLAYER_BEFORE_TRACK_LOAD, { list: this._loadedList, newTrack: t, oldTrack: this._currentTrack }), this._uid++;
                                var o,
                                    i = ++this._listPlayCount,
                                    s = this._loadedOptions,
                                    a = !0,
                                    _ = 0,
                                    l = 3e4;
                                s && (1 === i ? ((a = !s.paused), (_ = s.initialPosition || s.position || 0)) : (_ = s.position || 0));
                                var u = e === reason_1.Reason.TRACK_DONE;
                                if ("options" in t) {
                                    var E = t.options;
                                    "paused" in E && (a = !E.paused), void 0 !== E.position && (_ = E.position), void 0 !== E.playedThreshold && (l = E.playedThreshold), (o = E.stopPosition);
                                }
                                (this._currentTrack = t), (this._currentTrackOptions = { reason: e, paused: !a, position: _, playedThreshold: l, stopPosition: o });
                                var p = this._handleTrackLoaded.bind(this, { uid: this._uid, track: this._currentTrack, options: this._currentTrackOptions, list: this._loadedList });
                                return this._getTrackPlayer().then(function (e) {
                                    return r._currentSeqId !== n
                                        ? operation_result_1.OperationResult.CANCELLED
                                        : (Promise.resolve(e.load(t, { uriProperty: "playableURI", autoplay: a, position: _, playedThreshold: l, stopPosition: o, continuePrevious: u }, p)).catch(function () {}),
                                          operation_result_1.OperationResult.SUCCESS);
                                });
                            }),
                            (e.prototype._preloadUpcomingTrack = function () {
                                var t = this,
                                    e = this._loadedList;
                                if (!e) return Promise.reject(new playback_1.PlaybackError(errors_1.Errors.LIST_PLAYER_NO_LIST, "Cannot perform operation; no list was loaded."));
                                var n = { reason: reason_1.Reason.TRACK_DONE, listConstants: list_constants_1.ListConstants };
                                return e.peekNext(n).then(function (e) {
                                    return e === list_constants_1.ListConstants.FORBIDDEN
                                        ? operation_result_1.OperationResult.FORBIDDEN
                                        : e === list_constants_1.ListConstants.NULL_VALUE
                                        ? t._preloadUpcomingTrack()
                                        : e === list_constants_1.ListConstants.LIST_END
                                        ? operation_result_1.OperationResult.LIST_END
                                        : isTrack(e) && e.playable
                                        ? t._preloadTrack(e)
                                        : operation_result_1.OperationResult.INVALID;
                                });
                            }),
                            (e.prototype.activateElement = function () {
                                return this._getTrackPlayer().then(function (t) {
                                    return t.activateElement(), operation_result_1.OperationResult.SUCCESS;
                                });
                            }),
                            (e.prototype.load = function (t, e) {
                                var n = createPlaybackOptions(e || this._loadedOptions || {});
                                return this._setListIndex(t, n).then(this._setListOptions).then(this._replaceCurrentList);
                            }),
                            (e.prototype.play = function (t, e) {
                                var n = this;
                                return this.load(t, e).then(function () {
                                    if (n._loadedList !== t) return operation_result_1.OperationResult.CANCELLED;
                                    var e = n._loadedOptions ? n._loadedOptions.reason : reason_1.Reason.UNKNOWN;
                                    return n.next(e);
                                });
                            }),
                            (e.prototype.canChangeTrack = function () {
                                return this._loadedList
                                    ? this._loadedList.peekNext({ reason: reason_1.Reason.FORWARD_BUTTON, listConstants: list_constants_1.ListConstants }).then(function (t) {
                                          return t !== list_constants_1.ListConstants.FORBIDDEN;
                                      })
                                    : Promise.resolve(!0);
                            }),
                            (e.prototype.next = function (t) {
                                var e = this;
                                if (!t) return Promise.reject(new playback_1.PlaybackError(errors_1.Errors.LIST_PLAYER_INVALID_ARGUMENT, "The argument `reason` is required."));
                                var n = this._loadedList;
                                if (!n) return Promise.reject(new playback_1.PlaybackError(errors_1.Errors.LIST_PLAYER_NO_LIST, "Cannot perform operation; no list was loaded."));
                                this.emitSync(event_1.Event.LIST_PLAYER_BEFORE_NEXT, { list: n, reason: t });
                                var r = this._incrementSeqId(),
                                    o = { reason: t, listConstants: list_constants_1.ListConstants };
                                return n.next(o).then(function (o) {
                                    return e._currentSeqId !== r
                                        ? operation_result_1.OperationResult.CANCELLED
                                        : o === list_constants_1.ListConstants.FORBIDDEN
                                        ? operation_result_1.OperationResult.FORBIDDEN
                                        : o === list_constants_1.ListConstants.NULL_VALUE
                                        ? e.next(t)
                                        : o === list_constants_1.ListConstants.LIST_END
                                        ? (e.emit(event_1.Event.LIST_PLAYER_LIST_ENDED, { list: n, reason: reason_1.Reason.END_PLAY }), e.clear(t), operation_result_1.OperationResult.LIST_END)
                                        : isTrack(o)
                                        ? o.playable
                                            ? e._changeTrack(o, t, r)
                                            : (e.emit(event_1.Event.LIST_PLAYER_TRACK_UNPLAYABLE, { track: o, list: n }), e.next(t))
                                        : operation_result_1.OperationResult.INVALID;
                                });
                            }),
                            (e.prototype.previous = function (t) {
                                var e = this;
                                if (!t) return Promise.reject(new playback_1.PlaybackError(errors_1.Errors.LIST_PLAYER_INVALID_ARGUMENT, "The argument `reason` is required."));
                                var n = this._loadedList;
                                if (!n) return Promise.reject(new playback_1.PlaybackError(errors_1.Errors.LIST_PLAYER_NO_LIST, "Cannot perform operation; no list was loaded."));
                                this.emitSync(event_1.Event.LIST_PLAYER_BEFORE_PREVIOUS, { list: n, reason: t });
                                var r = this._incrementSeqId(),
                                    o = { reason: t, listConstants: list_constants_1.ListConstants };
                                return n.previous(o).then(function (o) {
                                    return e._currentSeqId !== r
                                        ? operation_result_1.OperationResult.CANCELLED
                                        : o === list_constants_1.ListConstants.FORBIDDEN
                                        ? operation_result_1.OperationResult.FORBIDDEN
                                        : o === list_constants_1.ListConstants.NULL_VALUE
                                        ? e.previous(t)
                                        : o === list_constants_1.ListConstants.LIST_START
                                        ? (e.emit(event_1.Event.LIST_PLAYER_LIST_ENDED, { list: n, reason: reason_1.Reason.END_PLAY }), e.clear(t), operation_result_1.OperationResult.LIST_END)
                                        : isTrack(o)
                                        ? o.playable
                                            ? e._changeTrack(o, t, r)
                                            : (e.emit(event_1.Event.LIST_PLAYER_TRACK_UNPLAYABLE, { track: o, list: n }), e.previous(t))
                                        : operation_result_1.OperationResult.INVALID;
                                });
                            }),
                            (e.prototype.pause = function () {
                                return this._loadedList
                                    ? this._currentTrack
                                        ? this._getTrackPlayer().then(function (t) {
                                              return t
                                                  .pause()
                                                  .then(function () {
                                                      return operation_result_1.OperationResult.SUCCESS;
                                                  })
                                                  .catch(function (t) {
                                                      return "AbortError" === (null == t ? void 0 : t.name) ? operation_result_1.OperationResult.CANCELLED : operation_result_1.OperationResult.FORBIDDEN;
                                                  });
                                          })
                                        : Promise.resolve(operation_result_1.OperationResult.SUCCESS)
                                    : Promise.reject(new playback_1.PlaybackError(errors_1.Errors.LIST_PLAYER_NO_LIST, "Cannot perform operation; no list was loaded."));
                            }),
                            (e.prototype.resume = function () {
                                return this._loadedList
                                    ? this._currentTrack
                                        ? this._getTrackPlayer().then(function (t) {
                                              return t
                                                  .resume()
                                                  .then(function () {
                                                      return operation_result_1.OperationResult.SUCCESS;
                                                  })
                                                  .catch(function (t) {
                                                      return "AbortError" === (null == t ? void 0 : t.name) ? operation_result_1.OperationResult.CANCELLED : operation_result_1.OperationResult.FORBIDDEN;
                                                  });
                                          })
                                        : Promise.resolve(operation_result_1.OperationResult.SUCCESS)
                                    : Promise.reject(new playback_1.PlaybackError(errors_1.Errors.LIST_PLAYER_NO_LIST, "Cannot perform operation; no list was loaded."));
                            }),
                            (e.prototype.togglePlay = function () {
                                return this._loadedList
                                    ? this._currentTrack
                                        ? this._getTrackPlayer().then(function (t) {
                                              return t
                                                  .togglePlay()
                                                  .then(function () {
                                                      return operation_result_1.OperationResult.SUCCESS;
                                                  })
                                                  .catch(function (t) {
                                                      return "AbortError" === (null == t ? void 0 : t.name) ? operation_result_1.OperationResult.CANCELLED : operation_result_1.OperationResult.FORBIDDEN;
                                                  });
                                          })
                                        : Promise.resolve(operation_result_1.OperationResult.SUCCESS)
                                    : Promise.reject(new playback_1.PlaybackError(errors_1.Errors.LIST_PLAYER_NO_LIST, "Cannot perform operation; no list was loaded."));
                            }),
                            (e.prototype.stop = function (t) {
                                var e = this,
                                    n = { reason: t || reason_1.Reason.UNKNOWN },
                                    r = this._currentTrack;
                                return (
                                    r && r.logData && (n.source = r.logData.source),
                                    this._incrementSeqId(),
                                    this._getTrackPlayer().then(function (t) {
                                        return t.stop(n), e.emit(event_1.Event.LIST_PLAYER_STOPPED, { uid: e._uid, options: e._currentTrackOptions, list: e._loadedList }), operation_result_1.OperationResult.SUCCESS;
                                    })
                                );
                            }),
                            (e.prototype.clear = function (t) {
                                var e = this;
                                return this.stop(t).then(function () {
                                    return (
                                        (e._loadedList = null),
                                        (e._loadedOptions = null),
                                        (e._currentTrack = null),
                                        (e._currentTrackOptions = null),
                                        e.emit(event_1.Event.LIST_PLAYER_CLEARED, null),
                                        operation_result_1.OperationResult.SUCCESS
                                    );
                                });
                            }),
                            (e.prototype.setShuffle = function (t) {
                                var e = !!t;
                                if (this._shuffled !== e) {
                                    (this._shuffled = e), this.emit(event_1.Event.LIST_PLAYER_SHUFFLE_CHANGED, { player: this, shuffled: e });
                                    var n = this._loadedList;
                                    n && n.setShuffle(this._shuffled);
                                }
                                return Promise.resolve(operation_result_1.OperationResult.SUCCESS);
                            }),
                            (e.prototype.setRepeatMode = function (t) {
                                if (!(t in repeat_mode_1.RepeatMode)) return Promise.reject(new playback_1.PlaybackError(errors_1.Errors.LIST_PLAYER_INVALID_ARGUMENT, "The value of repeat mode is not a correct RepeatMode enum value"));
                                if (this._repeatMode !== t) {
                                    (this._repeatMode = t), this.emit(event_1.Event.LIST_PLAYER_REPEAT_MODE_CHANGED, { player: this, repeatMode: t });
                                    var e = this._loadedList;
                                    e && e.setRepeatMode(this._repeatMode);
                                }
                                return Promise.resolve(operation_result_1.OperationResult.SUCCESS);
                            }),
                            (e.prototype.getVolume = function () {
                                return this._getTrackPlayer().then(function (t) {
                                    return t.getVolume();
                                });
                            }),
                            (e.prototype.setVolume = function (t, e) {
                                var n = this;
                                return (
                                    void 0 === e && (e = null),
                                    this._getTrackPlayer().then(function (r) {
                                        return r.setVolume(t, { commandId: null != e ? e : void 0 }), n.emit(event_1.Event.LIST_PLAYER_VOLUME_CHANGED, { volume: t, commandId: e }), operation_result_1.OperationResult.SUCCESS;
                                    })
                                );
                            }),
                            (e.prototype.seek = function (t) {
                                var e,
                                    n,
                                    r = this._loadedList;
                                if (!r) return Promise.reject(new playback_1.PlaybackError(errors_1.Errors.LIST_PLAYER_NO_LIST, "Cannot perform operation; no list was loaded."));
                                if ("function" == typeof r.allowSeeking && !r.allowSeeking()) return Promise.reject(new playback_1.PlaybackError(errors_1.Errors.LIST_PLAYER_FORBIDDEN, "The operation is not allowed."));
                                var o = null !== (n = null === (e = r.handleSeek) || void 0 === e ? void 0 : e.call(r, t)) && void 0 !== n ? n : t;
                                return o === list_constants_1.ListConstants.PAUSE
                                    ? this.pause()
                                    : o === list_constants_1.ListConstants.IGNORE
                                    ? Promise.resolve(operation_result_1.OperationResult.SUCCESS)
                                    : this._currentTrack
                                    ? this._getTrackPlayer().then(function (t) {
                                          return t.seek(o), operation_result_1.OperationResult.SUCCESS;
                                      })
                                    : Promise.resolve(operation_result_1.OperationResult.SUCCESS);
                            }),
                            (e.prototype.getListConstants = function () {
                                return list_constants_1.ListConstants;
                            }),
                            (e.prototype.getLoadedList = function () {
                                return this._loadedList;
                            }),
                            (e.prototype.getLoadedOptions = function () {
                                return this._loadedOptions;
                            }),
                            (e.prototype.getPlayerState = function () {
                                var t = this;
                                return this._getTrackPlayer().then(function (e) {
                                    var n = e.getPlayerState();
                                    return tslib_1.__assign(tslib_1.__assign({}, n), { position: t._translatePosition(n.position), duration: t._translateDuration(n.duration) });
                                });
                            }),
                            (e.prototype.getState = function () {
                                var t = this;
                                return this.getPlayerState().then(function (e) {
                                    return { playbackState: e, track: t._currentTrack, list: t._loadedList, options: t._loadedOptions };
                                });
                            }),
                            (e.prototype.getMediaConfig = function () {
                                return this._getTrackPlayer().then(function (t) {
                                    return t.getMediaConfig();
                                });
                            }),
                            (e.prototype.hideSubtitles = function () {
                                return this._getTrackPlayer()
                                    .then(function (t) {
                                        return t.hideSubtitles();
                                    })
                                    .then(function () {
                                        return operation_result_1.OperationResult.SUCCESS;
                                    });
                            }),
                            (e.prototype.showSubtitles = function () {
                                return this._getTrackPlayer()
                                    .then(function (t) {
                                        return t.showSubtitles();
                                    })
                                    .then(function () {
                                        return operation_result_1.OperationResult.SUCCESS;
                                    });
                            }),
                            (e.prototype.areSubtitlesShown = function () {
                                return this._getTrackPlayer().then(function (t) {
                                    return t.areSubtitlesShown();
                                });
                            }),
                            (e.prototype.getSubtitleLanguages = function () {
                                return this._getTrackPlayer().then(function (t) {
                                    return t.getSubtitleLanguages();
                                });
                            }),
                            (e.prototype.getActiveSubtitleLanguage = function () {
                                return this._getTrackPlayer().then(function (t) {
                                    var e;
                                    return null !== (e = t.getActiveSubtitleLanguage()) && void 0 !== e ? e : null;
                                });
                            }),
                            (e.prototype.setSubtitleLanguage = function (t) {
                                return this._getTrackPlayer()
                                    .then(function (e) {
                                        return e.setSubtitleLanguage(t);
                                    })
                                    .then(function () {
                                        return operation_result_1.OperationResult.SUCCESS;
                                    });
                            }),
                            e
                        );
                    })(emitter_1.EventEmitter);
                exports.ListPlayer = ListPlayer;
            },
            {
                "./_internal/defer": 21,
                "./enums/errors": 44,
                "./enums/event": 45,
                "./enums/list_constants": 47,
                "./enums/operation_result": 50,
                "./enums/reason": 51,
                "./enums/repeat_mode": 52,
                "./error/playback": 61,
                "@spotify-internal/emitter": 71,
                tslib: 190,
            },
        ],
        67: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.default = { tagged: "6.15.0-eb75f68", version: "6.15.0", revision: "eb75f68" });
            },
            {},
        ],
        68: [
            function (require, module, exports) {
                (function (setImmediate) {
                    (function () {
                        "use strict";
                        Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.defer = void 0);
                        var send,
                            hasWindow = "undefined" != typeof window,
                            deferreds = [];
                        function executeDeferreds() {
                            var e = deferreds.splice(0);
                            if (e.length)
                                for (var n = 0, d = e.length; n < d; n++)
                                    try {
                                        e[n]();
                                    } finally {
                                    }
                        }
                        function bindSendDom() {
                            var e = window.location.origin || window.location.protocol + "//" + window.location.hostname;
                            if (((send = window.postMessage.bind(window, "@execute_deferreds", e)), !window.__hasDeferredHandler)) {
                                "function" == typeof Object.defineProperty ? Object.defineProperty(window, "__hasDeferredHandler", { value: !0 }) : (window.__hasDeferredHandler = !0);
                                var n = function (n) {
                                    (n.origin !== e && "@execute_deferreds" !== n.data) || executeDeferreds();
                                };
                                window.addEventListener ? window.addEventListener("message", n) : window.attachEvent && window.attachEvent("onmessage", n);
                            }
                        }
                        function bindSendImmediate() {
                            send = setImmediate.bind(null, executeDeferreds);
                        }
                        function bindSendTimeout() {
                            send = setTimeout.bind(null, executeDeferreds, 10);
                        }
                        function bindSendAuto() {
                            hasWindow && "function" == typeof window.postMessage ? bindSendDom() : "function" != typeof setImmediate ? bindSendImmediate() : bindSendTimeout();
                        }
                        bindSendAuto();
                        var defer = function (e) {
                            var n = !deferreds.length;
                            deferreds.push(e), n && send();
                        };
                        (exports.defer = defer),
                            hasWindow &&
                                ("function" == typeof window.__modDefFn
                                    ? (exports.defer = defer = window.__modDefFn)
                                    : "function" == typeof Object.defineProperty
                                    ? Object.defineProperty(window, "__modDefFn", { value: defer })
                                    : (window.__modDefFn = defer));
                    }.call(this));
                }.call(this, require("timers").setImmediate));
            },
            { timers: 189 },
        ],
        69: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.EmittedEvent = void 0);
                var EmittedEvent = (function () {
                    function t(t, e) {
                        (this.defaultPrevented = !1), (this.immediateStopped = !1), (this.stopped = !1), (this.type = t), (this.data = e);
                    }
                    return (
                        (t.prototype.preventDefault = function () {
                            this.defaultPrevented = !0;
                        }),
                        (t.prototype.stopPropagation = function () {
                            this.stopped = !0;
                        }),
                        (t.prototype.stopImmediatePropagation = function () {
                            this.immediateStopped = !0;
                        }),
                        t
                    );
                })();
                exports.EmittedEvent = EmittedEvent;
            },
            {},
        ],
        70: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.EventEmitter = void 0);
                var emitted_event_1 = require("./emitted_event"),
                    deferred_1 = require("./_internal/deferred");
                function indexOfEntry(e, t, r) {
                    for (var n = 0, i = e.length; n < i; n++) {
                        var o = e[n];
                        if (o.listener === t && o.options.once === r.once) return n;
                    }
                    return -1;
                }
                function isListenerUnique(e, t, r, n) {
                    if ((void 0 === n && (n = {}), !r)) return !1;
                    var i = e[t];
                    return !i || !i.length || -1 === indexOfEntry(i, r, n);
                }
                function appendToStore(e, t, r, n) {
                    if ((void 0 === n && (n = {}), t && r)) {
                        var i = e[t],
                            o = { listener: r, options: n };
                        i ? i.push(o) : (e[t] = [o]);
                    }
                }
                var EventEmitter = (function () {
                    function e() {
                        (this._listeners = {}), (this._metaListeners = { add: {}, remove: {} });
                    }
                    return (
                        (e.prototype._dispatchFromStore = function (e, t) {
                            var r = t.type,
                                n = e[r];
                            if (n)
                                for (var i = 0, o = (n = n.slice(0)); i < o.length; i++) {
                                    var s = o[i];
                                    if ((s.listener.call(this, t), s.options.once && this.removeListener(r, s.listener, s.options), t.immediateStopped)) break;
                                }
                        }),
                        (e.prototype.createEvent = function (e, t) {
                            return new emitted_event_1.EmittedEvent(e, t);
                        }),
                        (e.prototype.on = function (e, t, r) {
                            if ((void 0 === r && (r = {}), !e)) throw new TypeError("Argument `eventType` is required.");
                            if (!t) return this;
                            var n = this._listeners;
                            if (isListenerUnique(n, e, t, r)) {
                                var i = this._metaListeners.add,
                                    o = i[e];
                                if (o && o.length) {
                                    var s = new emitted_event_1.EmittedEvent(e, { listener: t, options: r });
                                    if ((this._dispatchFromStore(i, s), s.defaultPrevented)) return this;
                                }
                                appendToStore(n, e, t, r);
                            }
                            return this;
                        }),
                        (e.prototype.addListener = function (e, t, r) {
                            return void 0 === r && (r = {}), this.on(e, t, r);
                        }),
                        (e.prototype.addListeners = function (e) {
                            for (var t in e) e.hasOwnProperty(t) && this.on(t, e[t]);
                            return this;
                        }),
                        (e.prototype.once = function (e, t) {
                            return this.on(e, t, { once: !0 });
                        }),
                        (e.prototype.removeListener = function (e, t, r) {
                            if ((void 0 === r && (r = {}), !e)) throw new TypeError("Argument `eventType` is required.");
                            if (!t) return this;
                            var n = this._listeners[e];
                            if (!n) return this;
                            var i = indexOfEntry(n, t, r);
                            if (-1 === i) return this;
                            var o = this._metaListeners.remove[e];
                            if (o && o.length) {
                                var s = new emitted_event_1.EmittedEvent(e, { listener: t, options: r });
                                if ((this._dispatchFromStore(this._metaListeners.remove, s), s.defaultPrevented)) return this;
                            }
                            return n.splice(i, 1), this;
                        }),
                        (e.prototype.removeListeners = function (e) {
                            for (var t in e) e.hasOwnProperty(t) && this.removeListener(t, e[t]);
                            return this;
                        }),
                        (e.prototype.removeAllListeners = function (e) {
                            return e ? (this._listeners[e] = []) : (this._listeners = {}), this;
                        }),
                        (e.prototype.emit = function (e, t) {
                            var r = this;
                            if (!e) throw new TypeError("Argument `eventType` is required.");
                            var n = this.createEvent(e, t);
                            return (
                                deferred_1.defer(function () {
                                    return r._dispatchFromStore(r._listeners, n);
                                }),
                                n
                            );
                        }),
                        (e.prototype.emitSync = function (e, t) {
                            if (!e) throw new TypeError("Argument `eventType` is required.");
                            var r = this.createEvent(e, t);
                            return this._dispatchFromStore(this._listeners, r), r;
                        }),
                        (e.prototype.emitEvent = function (e) {
                            var t = this;
                            return (
                                deferred_1.defer(function () {
                                    return t._dispatchFromStore(t._listeners, e);
                                }),
                                e
                            );
                        }),
                        (e.prototype.emitEventSync = function (e) {
                            return this._dispatchFromStore(this._listeners, e), e;
                        }),
                        (e.prototype.emitAndWait = function (e, t, r) {
                            var n = this;
                            if (!e) throw new TypeError("Argument `eventType` is required.");
                            var i = this.createEvent(e, t);
                            return (
                                deferred_1.defer(function () {
                                    n._dispatchFromStore(n._listeners, i), r.call(n, i);
                                }),
                                i
                            );
                        }),
                        (e.prototype.emitEventAndWait = function (e, t) {
                            var r = this;
                            return (
                                deferred_1.defer(function () {
                                    r._dispatchFromStore(r._listeners, e), t.call(r, e);
                                }),
                                e
                            );
                        }),
                        (e.prototype.proxyEmit = function (e, t, r) {
                            var n = this;
                            if (!e || "function" != typeof e.on) throw new TypeError("Proxy source must be an EventEmitter");
                            if (e === this) throw new ReferenceError("Cannot create recursive proxy.");
                            if (!t || !r) throw new TypeError("Parameter sourceType and targetType are required.");
                            var i = function (e) {
                                e.stopped ||
                                    n.emitAndWait(r, e.data, function (t) {
                                        t.defaultPrevented && e.preventDefault();
                                    });
                            };
                            return e.on(t, i), i;
                        }),
                        (e.prototype.proxyEmitSync = function (e, t, r) {
                            var n = this;
                            if (!e || "function" != typeof e.on) throw new TypeError("Proxy source must be an EventEmitter");
                            if (e === this) throw new ReferenceError("Cannot create recursive proxy.");
                            if (!t || !r) throw new TypeError("Parameter sourceType and targetType are required.");
                            var i = function (e) {
                                if (!e.stopped) {
                                    var t = n.createEvent(r, e.data);
                                    n.emitEventSync(t), t.defaultPrevented && e.preventDefault();
                                }
                            };
                            return e.on(t, i), i;
                        }),
                        (e.prototype.proxyEmitAll = function (e, t) {
                            for (var r in t) t.hasOwnProperty(r) && this.proxyEmit(e, r, t[r]);
                        }),
                        (e.prototype.proxyEmitAllSync = function (e, t) {
                            for (var r in t) t.hasOwnProperty(r) && this.proxyEmitSync(e, r, t[r]);
                        }),
                        (e.prototype.onAddListener = function (e, t, r) {
                            void 0 === r && (r = {});
                            var n = this._metaListeners.add;
                            return isListenerUnique(n, e, t, r) && appendToStore(n, e, t, r), this;
                        }),
                        (e.prototype.onRemoveListener = function (e, t, r) {
                            void 0 === r && (r = {});
                            var n = this._metaListeners.remove;
                            return isListenerUnique(n, e, t, r) && appendToStore(n, e, t, r), this;
                        }),
                        e
                    );
                })();
                exports.EventEmitter = EventEmitter;
            },
            { "./_internal/deferred": 68, "./emitted_event": 69 },
        ],
        71: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 });
                var tslib_1 = require("tslib"),
                    emitted_event_1 = require("./emitted_event");
                Object.defineProperty(exports, "EmittedEvent", {
                    enumerable: !0,
                    get: function () {
                        return emitted_event_1.EmittedEvent;
                    },
                }),
                    Object.defineProperty(exports, "Event", {
                        enumerable: !0,
                        get: function () {
                            return emitted_event_1.EmittedEvent;
                        },
                    }),
                    tslib_1.__exportStar(require("./eventemitter"), exports);
            },
            { "./emitted_event": 69, "./eventemitter": 70, tslib: 190 },
        ],
        72: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.HarmonyClient = void 0);
                var tslib_1 = require("tslib"),
                    emitter_1 = require("@spotify-internal/emitter"),
                    logger_1 = require("@spotify-internal/transport/es5/logger"),
                    debug_tools_1 = require("@js-sdk/debug-tools"),
                    product_state_observer_1 = require("@spotify-internal/transport/es5/product_state_observer"),
                    transport_1 = require("@spotify-internal/transport"),
                    typedefs_1 = require("../typedefs"),
                    errors_1 = require("../enums/errors"),
                    error_source_1 = require("../enums/error_source"),
                    manifest_format_1 = require("../enums/manifest_format"),
                    harmony_error_1 = require("../error/harmony_error"),
                    defer_1 = require("./helpers/defer"),
                    device_descriptor_1 = require("./device_descriptor"),
                    interpolate_ua_1 = require("./helpers/interpolate_ua"),
                    version_1 = require("../version"),
                    debugLogger = debug_tools_1.logging.forTag("harmonyclient"),
                    VALID_DEVICE_ID_EXP = /^[a-zA-Z0-9_%:-]{1,40}$/,
                    HarmonyClient = (function (r) {
                        function e(e) {
                            var t = r.call(this) || this;
                            if (((t._systemInfo = defer_1.defer()), (t._clientVersion = defer_1.defer()), !e)) throw new TypeError("Argument `options` is not defined.");
                            if (!e.transport) throw new TypeError("No Transport instance provided");
                            if (!e.transport.hasPlugin("dealer")) throw new TypeError("Transport has no Dealer plugin.");
                            return (
                                (t._transport = e.transport),
                                (t._deviceDescriptor = t._initDeviceDescriptor(e)),
                                (t._logger = new logger_1.Logger({ transport: t._transport, sdkId: t.getSDKId(), platform: t._systemInfo.promise, clientVersion: t._clientVersion.promise })),
                                (t._productStateObserver = product_state_observer_1.ProductStateObserver.create({ transport: t._transport })),
                                (t._onConnected = t._onConnected.bind(t)),
                                (t._onConnectionError = t._onConnectionError.bind(t)),
                                (t._onAuthenticationError = t._onAuthenticationError.bind(t)),
                                (t._onShortSessionDisconnect = t._onShortSessionDisconnect.bind(t)),
                                t._attachListeners(),
                                t
                            );
                        }
                        return (
                            tslib_1.__extends(e, r),
                            (e.create = function (r) {
                                return new e(r);
                            }),
                            (e.of = function (r) {
                                return r._client;
                            }),
                            (e.prototype._createDeviceDescriptor = function (r, e) {
                                var t, o;
                                if ((void 0 === e && (e = {}), (null == e ? void 0 : e.id) && !VALID_DEVICE_ID_EXP.test(e.id)))
                                    throw harmony_error_1.HarmonyError.fatal(errors_1.HarmonyErrors.HARMONY_INVALID_DESCRIPTOR_ID, "Invalid device id.");
                                var n = e.capabilities || {},
                                    i = {
                                        change_volume: null === (t = n.change_volume) || void 0 === t || t,
                                        endsong_snooping: n.endsong_snooping,
                                        enable_play_token: !0,
                                        supports_file_media_type: !0,
                                        play_token_lost_behavior: r.playTokenLostBehavior || "pause",
                                        disable_connect: !!r.hidden,
                                        audio_podcasts: null === (o = n.audio_podcasts) || void 0 === o || o,
                                        video_playback: n.video_playback,
                                        lossless_playback: n.lossless_playback,
                                        volume_steps: void 0 !== n.volume_steps && n.volume_steps >= 0 && n.volume_steps < typedefs_1.GAIA_VOLUME ? n.volume_steps : void 0,
                                        manifest_formats: [manifest_format_1.ManifestFormat.FILE_URLS_MP3],
                                    },
                                    s = device_descriptor_1.DeviceDescriptor.create(tslib_1.__assign(tslib_1.__assign({}, e), { capabilities: i }));
                                return this._systemInfo.resolve(s.getPlatformIdentifier()), this._clientVersion.resolve(s.getPlatformVersion()), this.proxyEmit(s, "descriptor_changed", "descriptor_changed"), s;
                            }),
                            (e.prototype._initDeviceDescriptor = function (r) {
                                var e = this;
                                return Promise.resolve(r.descriptor)
                                    .then(this._createDeviceDescriptor.bind(this, r))
                                    .catch(function (r) {
                                        return e._onError(error_source_1.HarmonyErrorSource.HARMONY, { error: r }), Promise.reject(r);
                                    });
                            }),
                            (e.prototype._attachListeners = function () {
                                var r = this,
                                    e = this._transport;
                                e.on(transport_1.TransportEvent.CONNECTED, this._onConnected),
                                    e.on(transport_1.TransportEvent.CONNECTION_FAILED, this._onConnectionError),
                                    e.on(transport_1.TransportEvent.AUTHENTICATION_FAILED, this._onAuthenticationError),
                                    this.proxyEmit(e, transport_1.TransportEvent.AUTHENTICATED, "authenticated"),
                                    this.proxyEmit(e, transport_1.TransportEvent.RECONNECTING, "reconnecting"),
                                    this.proxyEmit(e, transport_1.TransportEvent.RECONNECTED, "reconnected"),
                                    this.proxyEmit(e, transport_1.TransportEvent.LOGGED_OUT, "logged_out"),
                                    this.proxyEmitSync(e, transport_1.TransportEvent.BEFORE_OFFLINE_DISCONNECT, "before_offline_disconnect"),
                                    this.proxyEmitSync(e, transport_1.TransportEvent.BEFORE_ONLINE_DISCONNECT, "before_disconnect"),
                                    e.on(transport_1.TransportEvent.SHORT_SESSION_DISCONNECTED, this._onShortSessionDisconnect.bind(this)),
                                    this.proxyEmit(this._productStateObserver, transport_1.TransportEvent.PRODUCT_STATE_CHANGED, "product_state_changed"),
                                    this.on("before_disconnect", function (e) {
                                        var t = r._productStateObserver.deregister().catch(function () {});
                                        e.data.awaitPromise(t);
                                    });
                            }),
                            (e.prototype._onError = function (r, e) {
                                this.emit("error", { source: r, error: e.error }), e.error && e.error.unrecoverable && this.emit("unrecoverable_failure", { source: r, error: e.error });
                            }),
                            (e.prototype._onConnected = function () {
                                this.emit("connected", null);
                            }),
                            (e.prototype._onConnectionError = function (r) {
                                this._onError(error_source_1.HarmonyErrorSource.TRANSPORT, { error: r.data.error }), this.emit("connection_error", r.data);
                            }),
                            (e.prototype._onAuthenticationError = function (r) {
                                this._onError(error_source_1.HarmonyErrorSource.TRANSPORT, { error: r.data.error }), this.emit("authentication_error", r.data);
                            }),
                            (e.prototype._onShortSessionDisconnect = function (r) {
                                this._logger &&
                                    this._logger
                                        .logClientEvent(
                                            {
                                                source: "transport",
                                                source_version: version_1.default.tagged,
                                                source_vendor: "spotify",
                                                event: r.type,
                                                event_version: "1.0.0",
                                                json_data: { disconnectCount: r.data.disconnectCount, sessionLength: r.data.sessionLength },
                                            },
                                            "object"
                                        )
                                        .catch(function (e) {
                                            return debugLogger.warn(r.type + " Logging Error:", e);
                                        });
                            }),
                            (e.prototype.getVersionDescriptor = function () {
                                return tslib_1.__assign({}, version_1.default);
                            }),
                            (e.prototype.getSDKId = function () {
                                return "harmony:" + version_1.default.tagged;
                            }),
                            (e.prototype.getUntaggedSDKId = function () {
                                return "harmony:" + version_1.default.version;
                            }),
                            (e.prototype.getLogger = function () {
                                return this._logger;
                            }),
                            (e.prototype.logAppMetrics = function (r, e) {
                                if (!this._logger) throw new TypeError("Invalid logger instance");
                                return this._logger.logMetrics(r, e);
                            }),
                            (e.prototype.request = function (r, e) {
                                return this._transport.request(r, e);
                            }),
                            (e.prototype.getPublicTransport = function () {
                                return this._transport.toPublic();
                            }),
                            (e.prototype.getClientDescriptor = function () {
                                return this._deviceDescriptor.then(function (r) {
                                    return r.toJSON();
                                });
                            }),
                            (e.prototype.getDeviceDescriptor = function () {
                                return this._deviceDescriptor;
                            }),
                            (e.prototype.getUserInfo = function () {
                                return this._transport.request("@webapi/v1/me", { responseType: "json" }).then(function (r) {
                                    var e = r.body;
                                    if (200 !== r.status) {
                                        var t = new harmony_error_1.HarmonyError(errors_1.HarmonyErrors.USER_INFO_REQUEST_FAILED_WITH_STATUS, "User info request failed with status " + r.status);
                                        return (t.status = r.status), Promise.reject(t);
                                    }
                                    return e
                                        ? { display_name: e.display_name, followers: e.followers, id: e.id, images: e.images, uri: e.uri }
                                        : Promise.reject(new harmony_error_1.HarmonyError(errors_1.HarmonyErrors.USER_INFO_REQUEST_EMPTY_RESPONSE, "Unexpected empty response."));
                                });
                            }),
                            (e.prototype.getProductState = function () {
                                return this._productStateObserver.getCurrentState();
                            }),
                            (e.prototype.setName = function (r) {
                                return this._deviceDescriptor.then(function (e) {
                                    return e.setName(r);
                                });
                            }),
                            (e.prototype.setNameTemplate = function (r) {
                                return this.setName(interpolate_ua_1.interpolateUA(r));
                            }),
                            (e.prototype.setCapability = function (r, e) {
                                return this._deviceDescriptor.then(function (t) {
                                    return t.setCapability(r, e);
                                });
                            }),
                            (e.prototype.notifyError = function (r, e) {
                                this._onError(r, { error: e });
                            }),
                            e
                        );
                    })(emitter_1.EventEmitter);
                exports.HarmonyClient = HarmonyClient;
            },
            {
                "../enums/error_source": 94,
                "../enums/errors": 95,
                "../enums/manifest_format": 97,
                "../error/harmony_error": 101,
                "../typedefs": 106,
                "../version": 110,
                "./device_descriptor": 75,
                "./helpers/defer": 78,
                "./helpers/interpolate_ua": 80,
                "@js-sdk/debug-tools": 11,
                "@spotify-internal/emitter": 71,
                "@spotify-internal/transport": 162,
                "@spotify-internal/transport/es5/logger": 163,
                "@spotify-internal/transport/es5/product_state_observer": 169,
                tslib: 190,
            },
        ],
        73: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.PlayerAPIClient = void 0);
                var tslib_1 = require("tslib"),
                    emitter_1 = require("@spotify-internal/emitter"),
                    method_1 = require("@spotify-internal/transport/es5/enums/method"),
                    typedefs_1 = require("../../typedefs"),
                    device_type_1 = require("../../enums/device_type"),
                    errors_1 = require("../../enums/errors"),
                    client_1 = require("../../error/connect_service/client"),
                    defer_1 = require("../helpers/defer"),
                    device_1 = require("../helpers/device"),
                    ENDPOINT = "@webgate/connect-state",
                    URI_FILTER = /connect-state\/v1\/cluster$/,
                    OBSERVER_PREFIX = "hobs_",
                    DEVICE_ID_TRUNCATOR = /^([a-zA-Z0-9_%:-]{1,40}).*$/;
                function isTransferrable(e) {
                    var t, r, n;
                    return !!e.track && 0 === (null !== (n = null === (r = null === (t = e.restrictions) || void 0 === t ? void 0 : t.disallow_transferring_playback_reasons) || void 0 === r ? void 0 : r.length) && void 0 !== n ? n : 0);
                }
                var PlayerAPIClient = (function (e) {
                    function t(t) {
                        var r = e.call(this) || this;
                        return (
                            (r._autoregister = !0),
                            (r._connectionId = ""),
                            (r._localDeviceId = ""),
                            (r._localObserverDeviceId = null),
                            (r._lastActiveDevice = null),
                            (r._lastKnownPlayerState = null),
                            (r._lastKnownDevices = []),
                            (r._localDevice = null),
                            (r._fetchedInitialState = !1),
                            (r._awaitingAcknowledgment = {}),
                            (r._acknowledgementMaps = []),
                            (r._lastProcessedTimestamp = 0),
                            (r._descriptor = t.descriptor),
                            (r._transport = t.transport),
                            (r._endpoint = t.endpoint || ENDPOINT),
                            (r._autoregister = !("autoregister" in t) || !!t.autoregister),
                            (r._onConnectionId = r._onConnectionId.bind(r)),
                            (r._onClusterMessage = r._onClusterMessage.bind(r)),
                            (r._awaitResponseWithAck = r._awaitResponseWithAck.bind(r)),
                            r._transport.on(r._transport.EVENT_CONNECTION_ID, function (e) {
                                r._onConnectionId(e.data.id);
                            }),
                            r._transport.matchMessages(URI_FILTER, r._onClusterMessage),
                            (r._descriptorPromise = Promise.resolve(r._descriptor).then(function (e) {
                                return (r._localDeviceId = e.id || ""), (r._localObserverDeviceId = (OBSERVER_PREFIX + r._localDeviceId).replace(DEVICE_ID_TRUNCATOR, "$1")), !0;
                            })),
                            r
                        );
                    }
                    return (
                        tslib_1.__extends(t, e),
                        (t.create = function (e) {
                            return new t(e);
                        }),
                        (t.prototype._onConnectionId = function (e) {
                            (this._connectionId = e), this._autoregister && this.register();
                        }),
                        (t.prototype._onClusterMessage = function (e) {
                            var t = e.payloads && e.payloads[0];
                            if (t) {
                                if (t.ack_id) {
                                    var r = t.ack_id,
                                        n = this._awaitingAcknowledgment[r];
                                    if (n) n.resolve(!0);
                                    else for (var i = this._acknowledgementMaps, s = 0, o = i.length; s < o; s++) i[s][r] = defer_1.defer();
                                }
                                this._parseCluster(t.cluster);
                            }
                        }),
                        (t.prototype._makeEndpoint = function (e, t, r) {
                            var n = this;
                            return this._descriptorPromise.then(function () {
                                var i = n._localDeviceId,
                                    s = r;
                                return s || (s = n._lastActiveDevice ? n._lastActiveDevice.id : n._localDeviceId), s === typedefs_1.LOCAL_DEVICE_ID && (s = i), n._endpoint + "/" + e + "/" + t + "/from/" + i + "/to/" + s;
                            });
                        }),
                        (t.prototype._sendPlayerCommand = function (e, t, r) {
                            var n = this;
                            return (
                                void 0 === t && (t = null),
                                void 0 === r && (r = {}),
                                (r.endpoint = e),
                                this._makeEndpoint("v1", "player/command", t)
                                    .then(function (e) {
                                        return n._sendRequest(method_1.Method.POST, e, { command: r });
                                    })
                                    .then(this._awaitResponseWithAck)
                            );
                        }),
                        (t.prototype._sendConnectCommand = function (e, t, r) {
                            var n = this;
                            void 0 === t && (t = null), void 0 === r && (r = {});
                            var i = "volume" === e ? method_1.Method.PUT : method_1.Method.POST;
                            return this._makeEndpoint("v1", "connect/" + e, t)
                                .then(function (e) {
                                    return n._sendRequest(i, e, r);
                                })
                                .then(this._awaitResponseWithAck);
                        }),
                        (t.prototype._sendRequest = function (e, t, r) {
                            var n = this._acknowledgementMaps,
                                i = {};
                            n.push(i);
                            var s = function () {
                                var e = n.indexOf(i);
                                -1 !== e && n.splice(e, 1);
                            };
                            return this._transport
                                .request(t, {
                                    method: e,
                                    payload: r ? JSON.stringify(r) : void 0,
                                    responseType: "json",
                                    retry: {
                                        condition: function (e, t) {
                                            var r = e.getStatusFamily();
                                            return r === t.SERVER_ERROR || r === t.CONNECTION_ERROR;
                                        },
                                    },
                                })
                                .then(
                                    function (e) {
                                        return s(), { response: e, map: i };
                                    },
                                    function (e) {
                                        return s(), Promise.reject(e);
                                    }
                                );
                        }),
                        (t.prototype._awaitResponseWithAck = function (e) {
                            if (404 === e.response.status) return Promise.reject(new client_1.PlayerAPIClientError(errors_1.HarmonyErrors.CONNECTAPI_CLIENT_NO_DEVICE, "No such device."));
                            var t = e.response.body && e.response.body.ack_id;
                            if (200 === e.response.status && t) {
                                if (e.map && e.map[t]) return Promise.resolve(!0);
                                var r = defer_1.defer();
                                return (this._awaitingAcknowledgment[t] = r), r.promise;
                            }
                            return Promise.resolve(202 === e.response.status && !t);
                        }),
                        (t.prototype._parseCluster = function (e) {
                            if (e) {
                                var t = parseInt(e.timestamp, 10);
                                this._lastProcessedTimestamp > t || ((this._lastProcessedTimestamp = t), this._parseClusterDevices(e), this._parseClusterPlayerState(e));
                            }
                        }),
                        (t.prototype._parseClusterDevices = function (e) {
                            var t = this._lastActiveDevice;
                            (this._lastActiveDevice = null), (this._lastKnownDevices = []), (this._localDevice = null);
                            var r = [];
                            for (var n in e.devices) e.devices.hasOwnProperty(n) && r.push(n);
                            if ((r.sort(), r.length))
                                for (var i = e.active_device_id, s = 0, o = r.length; s < o; s++) {
                                    var a = e.devices[r[s]],
                                        _ = this._formatClusterDevice(a, i);
                                    this._lastKnownDevices.push(_), _.is_active && (this._lastActiveDevice = _), _.local && (this._localDevice = _);
                                }
                            if (!this._fetchedInitialState || !device_1.areDevicesEqual(this._lastActiveDevice, t)) {
                                var c = e.player_state,
                                    l = c && isTransferrable(c);
                                this.emit("device_state_changed", { deviceState: this._lastActiveDevice, hasOrphanedState: !this._lastActiveDevice && !!l, disappeared: !!t && !this._lastActiveDevice });
                            }
                            this.emit("devices_changed", { devices: this._lastKnownDevices, localDevice: this._localDevice });
                        }),
                        (t.prototype._formatClusterDevice = function (e, t) {
                            var r = {};
                            if (e && Array.isArray(e.metadata))
                                for (var n = 0, i = e.metadata.length; n < i; n++) {
                                    var s = e.metadata[n];
                                    r[s.type] = s.metadata;
                                }
                            var o = e.capabilities || {};
                            return {
                                hidden: !1,
                                id: e.device_id,
                                is_active: e.device_id === t,
                                is_controllable: !!o.is_controllable,
                                is_observable: !!o.is_observable,
                                local: e.device_id === this._localDeviceId,
                                metadata: r,
                                name: e.name,
                                type: (e.device_type || device_type_1.DeviceType.UNKNOWN).toLowerCase(),
                                version: e.device_software_version,
                                volume: o.disable_volume ? -1 : e.volume / typedefs_1.GAIA_VOLUME,
                                capabilities: { supports_lossless_audio: !!o.supports_lossless_audio },
                            };
                        }),
                        (t.prototype._parseClusterPlayerState = function (e) {
                            this._lastKnownPlayerState = null;
                            var t = e.active_device_id,
                                r = t && e.devices[t],
                                n = e.player_state;
                            n &&
                                n.track &&
                                (r && r.capabilities && !r.capabilities.is_observable
                                    ? (n = null)
                                    : (r || ((n.is_paused = !0), n.restrictions && (delete n.restrictions.disallow_resuming_reasons, (n.restrictions.disallow_pausing_reasons = ["already_paused"]))),
                                      (n.duration = parseInt(n.duration, 10)),
                                      (n.position = parseInt(n.position, 10)),
                                      (n.position_as_of_timestamp = parseInt(n.position_as_of_timestamp, 10)),
                                      (n.timestamp = parseInt(n.timestamp, 10)),
                                      (n.next_tracks = n.next_tracks || []),
                                      (n.prev_tracks = n.prev_tracks || [])),
                                (this._lastKnownPlayerState = n));
                            var i = !r && !!this._lastKnownPlayerState;
                            i && n && !isTransferrable(n) && ((this._lastKnownPlayerState = null), (i = !1)),
                                this.emit("player_state_changed", { playerState: this._lastKnownPlayerState, orphaned: i, isLocal: !!t && t === this._localDeviceId });
                        }),
                        (t.prototype._register = function () {
                            var e = this;
                            this._fetchedInitialState = !1;
                            var t = this._endpoint + "/v1/devices/" + this._localObserverDeviceId;
                            return (
                                this._connectionId || Promise.reject(new client_1.PlayerAPIClientError(errors_1.HarmonyErrors.CONNECTAPI_CLIENT_NO_CONNECTION_ID, "Cannot register: no connection id.")),
                                this._transport
                                    .request(t, {
                                        method: "PUT",
                                        headers: { "X-Spotify-Connection-Id": this._connectionId, Accept: "application/json" },
                                        payload: JSON.stringify({ member_type: "CONNECT_STATE", device: { device_info: { capabilities: { can_be_player: !1, hidden: !0, needs_full_player_state: !0 } } } }),
                                        responseType: "json",
                                    })
                                    .then(function (t) {
                                        429 === t.status
                                            ? e.emit("max_subscriptions_reached", { error: new client_1.PlayerAPIClientError(errors_1.HarmonyErrors.CONNECTAPI_MAX_SUBSCRIPTIONS_REACHED, "Max connections reached") })
                                            : 200 === t.status && (e.emit("registered", null), t.body && (e._parseCluster(t.body), (e._fetchedInitialState = !0)));
                                    })
                            );
                        }),
                        (t.prototype.register = function () {
                            return this._connectionId
                                ? this._descriptorPromise.then(this._register.bind(this))
                                : Promise.reject(new client_1.PlayerAPIClientError(errors_1.HarmonyErrors.CONNECTAPI_CLIENT_NO_CONNECTION_ID, "Cannot register: no connection id."));
                        }),
                        (t.prototype.deregister = function () {
                            var e = this,
                                t = this._endpoint + "/v1/devices/" + this._localObserverDeviceId;
                            return this._transport.request(t, { method: "DELETE", responseType: "json" }).then(function (t) {
                                200 === t.status && e.emit("deregistered", null);
                            });
                        }),
                        (t.prototype.getDevices = function () {
                            var e = this;
                            return this._fetchedInitialState
                                ? Promise.resolve({ devices: this._lastKnownDevices, localDevice: this._localDevice })
                                : new Promise(function (t) {
                                      e.once("device_state_changed", function () {
                                          t({ devices: e._lastKnownDevices, localDevice: e._localDevice });
                                      });
                                  });
                        }),
                        (t.prototype.getActiveDevice = function () {
                            var e = this;
                            return this._fetchedInitialState
                                ? Promise.resolve(this._lastActiveDevice)
                                : new Promise(function (t) {
                                      e.once("device_state_changed", function (e) {
                                          t(e.data.deviceState);
                                      });
                                  });
                        }),
                        (t.prototype.getContextPlayerState = function () {
                            var e = this;
                            return this._fetchedInitialState
                                ? Promise.resolve(this._lastKnownPlayerState)
                                : new Promise(function (t) {
                                      e.once("player_state_changed", function (e) {
                                          t(e.data.playerState);
                                      });
                                  });
                        }),
                        (t.prototype.play = function (e, t) {
                            return (
                                void 0 === t && (t = null),
                                e ? this._sendPlayerCommand("play", t, e) : Promise.reject(new client_1.PlayerAPIClientError(errors_1.HarmonyErrors.CONNECTAPI_CLIENT_INVALID_ARGUMENTS, "Descriptor is required for play commands"))
                            );
                        }),
                        (t.prototype.updateCurrentContext = function (e, t) {
                            var r = this;
                            return (
                                void 0 === e && (e = null),
                                void 0 === t && (t = {}),
                                this.getContextPlayerState().then(function (n) {
                                    return n
                                        ? n.session_id
                                            ? n.context_url || t.forceNonUpdateable
                                                ? r._sendPlayerCommand("update_context", e, { context: { url: n.context_url || "context://" + n.context_uri }, session_id: n.session_id })
                                                : Promise.resolve(!1)
                                            : Promise.reject(new client_1.PlayerAPIClientError(errors_1.HarmonyErrors.CONNECTAPI_CLIENT_NO_SESSION_ID, "The current state does not have a session id"))
                                        : Promise.reject(new client_1.PlayerAPIClientError(errors_1.HarmonyErrors.CONNECTAPI_CLIENT_NO_STATE, "Nothing playing"));
                                })
                            );
                        }),
                        (t.prototype.setQueue = function (e, t) {
                            return this._sendPlayerCommand("set_queue", t, e);
                        }),
                        (t.prototype.addToQueue = function (e, t) {
                            return this._sendPlayerCommand("add_to_queue", t, { track: e });
                        }),
                        (t.prototype.togglePlay = function (e) {
                            var t = this;
                            return this.getContextPlayerState().then(function (r) {
                                return r ? (r.is_paused ? t.resume(e) : t.pause(e)) : Promise.reject(new client_1.PlayerAPIClientError(errors_1.HarmonyErrors.CONNECTAPI_CLIENT_NO_STATE, "Nothing playing"));
                            });
                        }),
                        (t.prototype.transfer = function (e, t) {
                            void 0 === t && (t = {});
                            var r = { transfer_options: { restore_paused: "restore" } };
                            return t && "initially_paused" in t && (r.transfer_options.restore_paused = t.initially_paused ? "pause" : "resume"), this._sendConnectCommand("transfer", e || typedefs_1.LOCAL_DEVICE_ID, r);
                        }),
                        (t.prototype.pause = function (e) {
                            return this._sendPlayerCommand("pause", e);
                        }),
                        (t.prototype.resume = function (e) {
                            return this._sendPlayerCommand("resume", e);
                        }),
                        (t.prototype.nextTrack = function (e, t) {
                            return this._sendPlayerCommand("skip_next", e, t);
                        }),
                        (t.prototype.previousTrack = function (e, t) {
                            return this._sendPlayerCommand("skip_prev", e, t);
                        }),
                        (t.prototype.seek = function (e, t) {
                            return isNaN(e) || e < 0 ? Promise.reject(new client_1.PlayerAPIClientError(errors_1.HarmonyErrors.CONNECTAPI_CLIENT_INVALID_POSITION, "Invalid position.")) : this._sendPlayerCommand("seek_to", t, { value: e });
                        }),
                        (t.prototype.setShuffle = function (e, t) {
                            return this._sendPlayerCommand("set_shuffling_context", t, { value: !!e });
                        }),
                        (t.prototype.toggleShuffle = function (e) {
                            var t = this;
                            return this.getContextPlayerState().then(function (r) {
                                if (!r) return Promise.reject(new client_1.PlayerAPIClientError(errors_1.HarmonyErrors.CONNECTAPI_CLIENT_NO_STATE, "Nothing playing"));
                                var n = r.options && r.options.shuffling_context;
                                return t.setShuffle(!n, e);
                            });
                        }),
                        (t.prototype.setRepeatingContext = function (e, t) {
                            return this._sendPlayerCommand("set_repeating_context", t, { value: e });
                        }),
                        (t.prototype.setRepeatingTrack = function (e, t) {
                            return this._sendPlayerCommand("set_repeating_track", t, { value: !!e });
                        }),
                        (t.prototype.setOptions = function (e, t) {
                            return this._sendPlayerCommand("set_options", t, tslib_1.__assign({}, e));
                        }),
                        (t.prototype.setVolume = function (e, t) {
                            if (isNaN(e) || e < 0) return Promise.reject(new client_1.PlayerAPIClientError(errors_1.HarmonyErrors.CONNECTAPI_CLIENT_INVALID_VOLUME, "Invalid volume."));
                            var r = Math.round(e * typedefs_1.GAIA_VOLUME);
                            return this._sendConnectCommand("volume", t, { volume: r });
                        }),
                        (t.prototype.logout = function (e) {
                            return this._sendConnectCommand("logout", e);
                        }),
                        t
                    );
                })(emitter_1.EventEmitter);
                exports.PlayerAPIClient = PlayerAPIClient;
            },
            {
                "../../enums/device_type": 93,
                "../../enums/errors": 95,
                "../../error/connect_service/client": 100,
                "../../typedefs": 106,
                "../helpers/defer": 78,
                "../helpers/device": 79,
                "@spotify-internal/emitter": 71,
                "@spotify-internal/transport/es5/enums/method": 147,
                tslib: 190,
            },
        ],
        74: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.HarmonyController = void 0);
                var tslib_1 = require("tslib"),
                    URI = require("spotify-liburi"),
                    emitter_1 = require("@spotify-internal/emitter"),
                    debug_tools_1 = require("@js-sdk/debug-tools"),
                    repeat_mode_1 = require("../enums/repeat_mode"),
                    errors_1 = require("../enums/errors"),
                    device_deactivated_reason_1 = require("../enums/device_deactivated_reason"),
                    playback_quality_1 = require("../enums/playback_quality"),
                    client_1 = require("../error/connect_service/client"),
                    metadata_decorator_1 = require("./metadata_decorator"),
                    player_queue_1 = require("./player_queue"),
                    debugLogger = debug_tools_1.logging.forTag("harmony.controller"),
                    DEFAULT_WINDOW_LENGTH = 2,
                    TRACKING_INTERVAL = 500,
                    EXTRACT_RESTRICTION_NAME = /^disallow_([^]+)_reasons$/,
                    EXPOSED_RESTRICTIONS = {
                        disallow_pausing_reasons: !0,
                        disallow_peeking_next_reasons: !0,
                        disallow_peeking_prev_reasons: !0,
                        disallow_resuming_reasons: !0,
                        disallow_seeking_reasons: !0,
                        disallow_skipping_next_reasons: !0,
                        disallow_skipping_prev_reasons: !0,
                        disallow_toggling_repeat_context_reasons: !0,
                        disallow_toggling_repeat_track_reasons: !0,
                        disallow_toggling_shuffle_reasons: !0,
                        disallow_transferring_playback_reasons: !0,
                    },
                    Licenses = { PREMIUM: "premium", ON_DEMAND: "on-demand" },
                    CONNECT_TO_PLAYBACK_QUALITY = {
                        unknown: playback_quality_1.PlaybackQuality.UNKNOWN,
                        default: playback_quality_1.PlaybackQuality.DEFAULT,
                        low: playback_quality_1.PlaybackQuality.LOW,
                        normal: playback_quality_1.PlaybackQuality.NORMAL,
                        normalized: playback_quality_1.PlaybackQuality.NORMAL,
                        high: playback_quality_1.PlaybackQuality.HIGH,
                        veryhigh: playback_quality_1.PlaybackQuality.VERY_HIGH,
                        hifi: playback_quality_1.PlaybackQuality.HIFI,
                    },
                    HarmonyController = (function (e) {
                        function t(t) {
                            var r = e.call(this) || this;
                            return (
                                (r._suppressed = !1),
                                (r._lastDeviceInfoData = null),
                                (r._state = null),
                                (r._lastPlayerState = null),
                                (r._isOrphanedState = !1),
                                (r._progressPosition = 0),
                                (r._lastProgressTs = 0),
                                (r._trackingIntervalId = 0),
                                (r._queue = null),
                                (r._client = t.client),
                                (r._serverTime = t.serverTime),
                                (r._version = t.version),
                                (r._playerClient = t.playerClient),
                                (r._disableProgress = !!t.disableProgress),
                                (r._transport = r._client.getPublicTransport()),
                                (r._decorate = !!t.decorateTrackWindow),
                                (r._metadataDecorator = new metadata_decorator_1.MetadataDecorator({ transport: r._transport })),
                                (r._onClientBeforeDisconnect = r._onClientBeforeDisconnect.bind(r)),
                                (r._onDeviceStateChanged = r._onDeviceStateChanged.bind(r)),
                                (r._onPlayerStateChanged = r._onPlayerStateChanged.bind(r)),
                                (r._onProgressTracking = r._onProgressTracking.bind(r)),
                                r._client.on("before_disconnect", r._onClientBeforeDisconnect),
                                r.proxyEmit(r._playerClient, "max_subscriptions_reached", "max_subscriptions_reached"),
                                r.proxyEmit(r._playerClient, "devices_changed", "devices_changed"),
                                r.proxyEmit(r._playerClient, "registered", "registered"),
                                r.proxyEmit(r._playerClient, "deregistered", "deregistered"),
                                r._playerClient.on("device_state_changed", r._onDeviceStateChanged),
                                r._playerClient.on("player_state_changed", r._onPlayerStateChanged),
                                r
                            );
                        }
                        return (
                            tslib_1.__extends(t, e),
                            (t.create = function (e) {
                                return new t(e);
                            }),
                            (t.prototype._onClientBeforeDisconnect = function (e) {
                                e && e.data.awaitPromise(this._playerClient.deregister().catch(function () {}));
                            }),
                            (t.prototype._onDeviceStateChanged = function (e) {
                                var t,
                                    r,
                                    a = this,
                                    i = e.data,
                                    n = i.deviceState,
                                    o = i.hasOrphanedState,
                                    s = !!(null === (r = null === (t = this._lastDeviceInfoData) || void 0 === t ? void 0 : t.deviceInfo) || void 0 === r ? void 0 : r.local);
                                (this._lastDeviceInfoData = { deviceInfo: n, hasOrphanedState: o }),
                                    s &&
                                        !(null == n ? void 0 : n.local) &&
                                        this._playerClient
                                            .getDevices()
                                            .then(function (e) {
                                                var t = e.localDevice,
                                                    r = device_deactivated_reason_1.DeviceDeactivatedReason.STOPPED;
                                                o ? t || (r = device_deactivated_reason_1.DeviceDeactivatedReason.LOCAL_PLAYER_DISABLED) : (r = device_deactivated_reason_1.DeviceDeactivatedReason.REMOTE_ACTIVATED),
                                                    a.emit("device_deactivated", { reason: r });
                                            })
                                            .catch(function (e) {
                                                debugLogger.warn("Device deactivation checking failed.", e);
                                            }),
                                    this._suppressed || this.emit("device_info_changed", this._lastDeviceInfoData);
                            }),
                            (t.prototype._startProgressTracking = function () {
                                this._stopProgressTracking(), (this._lastProgressTs = Date.now()), this._onProgressTracking(), (this._trackingIntervalId = setInterval(this._onProgressTracking, TRACKING_INTERVAL));
                            }),
                            (t.prototype._stopProgressTracking = function () {
                                this._trackingIntervalId && (clearInterval(this._trackingIntervalId), (this._trackingIntervalId = 0));
                            }),
                            (t.prototype._onProgressTracking = function () {
                                var e,
                                    t = Date.now(),
                                    r = (null === (e = this._lastPlayerState) || void 0 === e ? void 0 : e.playback_speed) || 1;
                                (this._progressPosition += r * (t - this._lastProgressTs)), this.emit("progress", { position: this._progressPosition, timestamp: Date.now() }), (this._lastProgressTs = t);
                            }),
                            (t.prototype._getLicense = function () {
                                return this._client
                                    .getProductState()
                                    .then(function (e) {
                                        return "premium" === e.product ? Licenses.PREMIUM : Licenses.ON_DEMAND;
                                    })
                                    .catch(function () {
                                        return Licenses.ON_DEMAND;
                                    });
                            }),
                            (t.prototype._generatePlayOptions = function (e, t) {
                                return this._getLicense().then(function (r) {
                                    var a = { license: r };
                                    if (!e) return a;
                                    if (
                                        (("index" in e || "trackUID" in e || "trackURI" in e) && (a.skip_to = { track_uid: e.trackUID, track_index: e.index, track_uri: e.trackURI }),
                                        "initialOffset" in e && (a.seek_to = e.initialOffset),
                                        "paused" in e && (a.initially_paused = e.paused),
                                        "alwaysPlaySomething" in e && (a.always_play_something = e.alwaysPlaySomething),
                                        t)
                                    )
                                        return a;
                                    a.player_options_override = {};
                                    var i = a.player_options_override;
                                    if (("shuffle" in e && (i.shuffling_context = e.shuffle), "repeatMode" in e))
                                        switch (e.repeatMode) {
                                            case repeat_mode_1.RepeatMode.CONTEXT:
                                                (i.repeating_context = !0), (i.repeating_track = !1);
                                                break;
                                            case repeat_mode_1.RepeatMode.TRACK:
                                                (i.repeating_track = !0), (i.repeating_context = !1);
                                                break;
                                            case repeat_mode_1.RepeatMode.OFF:
                                                (i.repeating_track = !1), (i.repeating_context = !1);
                                        }
                                    return a;
                                });
                            }),
                            (t.prototype._setFilterAndSort = function (e, t) {
                                t && t.filter && e.metadata && (e.metadata["filtering.predicate"] = t.filter), t && t.sort && e.metadata && (e.metadata["sorting.criteria"] = t.sort);
                            }),
                            (t.prototype._setMetadataOptions = function (e, t) {
                                if (t) {
                                    var r = e.metadata || {};
                                    "autoplayCandidate" in t && (r.autoplay_candidate = t.autoplayCandidate ? "true" : "false"), (e.metadata = r);
                                }
                            }),
                            (t.prototype._generatePlayOrigin = function (e) {
                                if (e && e.featureClasses && !Array.isArray(e.featureClasses)) throw new TypeError("PlayOptions playOrigin.featureClasses must be an array of strings.");
                                return {
                                    feature_identifier: (e && e.featureIdentifier) || "harmony",
                                    feature_version: (e && e.featureVersion) || this._version,
                                    feature_classes: e && e.featureClasses,
                                    view_uri: e && e.viewURI,
                                    external_referrer: e && e.externalReferrer,
                                    referrer_identifier: e && e.referrerIdentifier,
                                };
                            }),
                            (t.prototype._generateLoggingParams = function (e) {
                                var t = e.pageInstanceId,
                                    r = e.interactionId;
                                return { page_instance_ids: t ? [t] : [], interaction_ids: r ? [r] : [] };
                            }),
                            (t.prototype._parseRestrictions = function (e) {
                                var t = {};
                                for (var r in e.restrictions) e.restrictions.hasOwnProperty(r) && EXPOSED_RESTRICTIONS[r] ? (t[r] = e.restrictions[r]) : EXPOSED_RESTRICTIONS[r] && (t[r] = []);
                                return t;
                            }),
                            (t.prototype._parseDisallows = function (e) {
                                var t = {},
                                    r = e.restrictions;
                                for (var a in r)
                                    if (r.hasOwnProperty(a) && EXPOSED_RESTRICTIONS[a]) {
                                        var i = r[a],
                                            n = !(!i || !i.length);
                                        t[a.replace(EXTRACT_RESTRICTION_NAME, "$1")] = n;
                                    }
                                return t;
                            }),
                            (t.prototype._onPlayerStateChanged = function (e) {
                                var t = this;
                                (this._isOrphanedState = e.data.orphaned),
                                    this._parsePlayerState(e.data.playerState).then(function (r) {
                                        (t._state = r),
                                            t._suppressed || t.emit("state_changed", { state: r ? tslib_1.__assign({}, r) : null, orphaned: e.data.orphaned }),
                                            !t._disableProgress && r && ((t._progressPosition = r.position), r.paused ? t._stopProgressTracking() : t._startProgressTracking());
                                    });
                            }),
                            (t.prototype._parsePlayerState = function (e) {
                                var t = this;
                                return (
                                    (this._lastPlayerState = e),
                                    e
                                        ? this._getTrackWindow(e).then(function (r) {
                                              var a, i, n, o;
                                              return {
                                                  context: { uri: e.context_uri || null, metadata: e.context_metadata || {} },
                                                  timestamp: e.timestamp,
                                                  duration: e.duration || (r.current_track && "uri" in r.current_track && r.current_track.duration_ms) || 0,
                                                  position: e.is_paused
                                                      ? e.position_as_of_timestamp
                                                      : t._offsetPosition(e.timestamp, e.position_as_of_timestamp, null === (a = t._lastPlayerState) || void 0 === a ? void 0 : a.playback_speed),
                                                  playback_quality:
                                                      null !== (o = CONNECT_TO_PLAYBACK_QUALITY[null !== (n = null === (i = e.playback_quality) || void 0 === i ? void 0 : i.bitrate_level) && void 0 !== n ? n : "unknown"]) && void 0 !== o
                                                          ? o
                                                          : playback_quality_1.PlaybackQuality.UNKNOWN,
                                                  paused: !!e.is_paused,
                                                  shuffle: !(!e.options || !e.options.shuffling_context),
                                                  repeat_mode: t._getStateRepeatMode(e),
                                                  restrictions: t._parseRestrictions(e),
                                                  disallows: t._parseDisallows(e),
                                                  track_window: r,
                                                  bitrate: null,
                                              };
                                          })
                                        : Promise.resolve(null)
                                );
                            }),
                            (t.prototype._offsetPosition = function (e, t, r, a) {
                                void 0 === r && (r = 1);
                                var i = t + ((a || this._serverTime.getApproximate()) - e) * r;
                                return i < 0 ? 0 : i;
                            }),
                            (t.prototype._isRestricted = function (e, t) {
                                if (!e || !e.restrictions) return !1;
                                var r = "disallow_" + t + "_reasons";
                                return !!(e.restrictions[r] || []).length;
                            }),
                            (t.prototype._getTrackWindow = function (e) {
                                var t = { current_track: null, next_tracks: [], previous_tracks: [] },
                                    r = {},
                                    a = [];
                                if (!e.track) return Promise.resolve(t);
                                var i = e.track.uri;
                                if (!i) return Promise.resolve(t);
                                var n = this._metadataDecorator,
                                    o = URI.from(i),
                                    s = n.formatLocalTrack(o, e.track.uid),
                                    _ = n.formatAd(o, e.track);
                                return (
                                    (t.current_track = s || _ || { uri: i, uid: e.track.uid, type: o && o.type ? o.type : "unknown" }),
                                    s || _ || ((r[i] = 1), a.push(i)),
                                    this._isRestricted(e, "peeking_next") || this._fillWindow(a, t.next_tracks, r, e.next_tracks ? e.next_tracks.slice(0, 5) : []),
                                    this._isRestricted(e, "peeking_prev") || this._fillWindow(a, t.previous_tracks, r, e.prev_tracks ? e.prev_tracks.slice(-5) : [], !0),
                                    this._decorate ? this._metadataDecorator.decorateTrackWindow(t, a) : Promise.resolve(t)
                                );
                            }),
                            (t.prototype._fillWindow = function (e, t, r, a, i) {
                                i && a.reverse();
                                for (var n = 0, o = a.length; n < o; n++) {
                                    var s = a[n].uri,
                                        _ = URI.from(s);
                                    if (s && "spotify:delimiter" !== s && (!_ || (_.type !== URI.Type.AD && _.type !== URI.Type.INTERRUPTION))) {
                                        var l = this._metadataDecorator.formatLocalTrack(_, a[n].uid),
                                            p = l || { uri: s, uid: a[n].uid, type: "unknown" };
                                        if ((l || s in r || ((r[s] = 1), e.push(s)), i ? t.unshift(p) : t.push(p), t.length === DEFAULT_WINDOW_LENGTH)) break;
                                    }
                                }
                            }),
                            (t.prototype._getStateRepeatMode = function (e) {
                                var t = e.options;
                                return t && t.repeating_track ? repeat_mode_1.RepeatMode.TRACK : t && t.repeating_context ? repeat_mode_1.RepeatMode.CONTEXT : repeat_mode_1.RepeatMode.OFF;
                            }),
                            (t.prototype._play = function (e, t, r) {
                                var a = this;
                                return (
                                    this._setFilterAndSort(e, r),
                                    this._setMetadataOptions(e, r),
                                    this._generatePlayOptions(r).then(function (i) {
                                        var n = { context: e, play_origin: a._generatePlayOrigin(r && r.playOrigin), options: i };
                                        return (null == r ? void 0 : r.loggingParams) && (n.logging_params = a._generateLoggingParams(r.loggingParams)), a._playerClient.play(n, t);
                                    })
                                );
                            }),
                            (t.prototype._prepareTracks = function (e, t) {
                                for (var r = [], a = [URI.Type.TRACK, URI.Type.EPISODE], i = 0, n = e.length; i < n; i++) {
                                    var o = e[i];
                                    if (!o) return Promise.reject(new TypeError("Null value inside track array."));
                                    var s = void 0;
                                    if (("string" == typeof o ? ((s = URI.from(o)), (o = { uri: o })) : (s = URI.from(o.uri)), !s)) return Promise.reject(new TypeError("Invalid uri string: " + s));
                                    if (-1 === a.indexOf(s.type)) return Promise.reject(new TypeError("Invalid track uri: " + o.uri));
                                    o.metadata || (o.metadata = {}), t && t.queued && (o.metadata.is_queued = "true"), r.push(o);
                                }
                                return Promise.resolve(r);
                            }),
                            (t.prototype.getActiveDevice = function () {
                                return this._playerClient.getActiveDevice();
                            }),
                            (t.prototype.getCurrentState = function (e) {
                                var t;
                                if (e && this._isOrphanedState) return Promise.resolve(null);
                                var r = this._state;
                                if (r && !r.paused) {
                                    var a = this._serverTime.getApproximate();
                                    (r.position = this._offsetPosition(r.timestamp, r.position, null === (t = this._lastPlayerState) || void 0 === t ? void 0 : t.playback_speed, a)), (r.timestamp = a);
                                }
                                return Promise.resolve(r ? tslib_1.__assign({}, r) : null);
                            }),
                            (t.prototype.getContextPlayerState = function () {
                                return debugLogger.warn("The `getContextPlayerState()` method is not well supported. Please avoid using it directly."), this._playerClient.getContextPlayerState();
                            }),
                            (t.prototype.getDevices = function () {
                                return this._playerClient.getDevices();
                            }),
                            (t.prototype.playURI = function (e, t, r) {
                                if (!URI.from(e)) return Promise.reject(new TypeError("Invalid Spotify URI"));
                                var a = { uri: e, url: "context://" + e, metadata: (r && r.contextMetadata) || {} };
                                return this._play(a, t, r);
                            }),
                            (t.prototype.playTracks = function (e, t, r) {
                                var a = this;
                                return Array.isArray(e)
                                    ? this._prepareTracks(e).then(function (e) {
                                          var i = { uri: r && void 0 !== r.contextURI ? r.contextURI : "spotify:app:playerapi-client", metadata: (r && r.contextMetadata) || {}, pages: [{ tracks: e }] };
                                          return a._play(i, t, r);
                                      })
                                    : Promise.reject(new TypeError("Invalid tracks array."));
                            }),
                            (t.prototype.updateCurrentContext = function (e, t) {
                                return void 0 === t && (t = {}), this._playerClient.updateCurrentContext(e, t);
                            }),
                            (t.prototype.setQueue = function (e, t, r) {
                                var a = this;
                                return Array.isArray(e)
                                    ? Array.isArray(t)
                                        ? Promise.all([this._prepareTracks(e), this._prepareTracks(t)]).then(function (e) {
                                              var t = e[0],
                                                  i = e[1],
                                                  n = { next_tracks: t.length ? t : void 0, prev_tracks: i.length ? i : void 0 };
                                              return a._playerClient.setQueue(n, r);
                                          })
                                        : Promise.reject(new TypeError("Invalid previousTracks array."))
                                    : Promise.reject(new TypeError("Invalid nextTracks array."));
                            }),
                            (t.prototype.togglePlay = function (e) {
                                return this._playerClient.togglePlay(e);
                            }),
                            (t.prototype.transfer = function (e, t) {
                                var r = this;
                                return this._generatePlayOptions(t, !0).then(function (t) {
                                    return r._playerClient.transfer(e, t);
                                });
                            }),
                            (t.prototype.pause = function (e) {
                                return this._playerClient.pause(e);
                            }),
                            (t.prototype.resume = function (e) {
                                return this._playerClient.resume(e);
                            }),
                            (t.prototype.nextTrack = function (e, t) {
                                var r = {};
                                return (null == t ? void 0 : t.track) && (r.track = player_queue_1.createContextTracks([t.track])[0]), this._playerClient.nextTrack(e, r);
                            }),
                            (t.prototype.previousTrack = function (e, t) {
                                var r = {};
                                return (null == t ? void 0 : t.track) && (r.track = player_queue_1.createContextTracks([t.track])[0]), this._playerClient.previousTrack(e, r);
                            }),
                            (t.prototype.seek = function (e, t) {
                                return this._playerClient.seek(e, t);
                            }),
                            (t.prototype.setShuffle = function (e, t) {
                                return this._playerClient.setShuffle(e, t);
                            }),
                            (t.prototype.toggleShuffle = function (e) {
                                return this._playerClient.toggleShuffle(e);
                            }),
                            (t.prototype.setVolume = function (e, t) {
                                return this._playerClient.setVolume(e, t);
                            }),
                            (t.prototype.logout = function (e) {
                                return this._playerClient.logout(e);
                            }),
                            (t.prototype.setRepeatMode = function (e, t) {
                                var r = this;
                                return this.getCurrentState().then(function (a) {
                                    if (!a) return Promise.reject(new client_1.PlayerAPIClientError(errors_1.HarmonyErrors.CONNECTAPI_CLIENT_NO_STATE, "Nothing playing"));
                                    var i = r._playerClient,
                                        n = a.disallows;
                                    switch (e) {
                                        case repeat_mode_1.RepeatMode.OFF:
                                            return (
                                                (!n.toggling_repeat_context || !n.toggling_repeat_track) && i.setOptions({ repeating_context: !!n.toggling_repeat_context && void 0, repeating_track: !!n.toggling_repeat_track && void 0 }, t)
                                            );
                                        case repeat_mode_1.RepeatMode.CONTEXT:
                                            return !n.toggling_repeat_context && i.setOptions({ repeating_context: !0, repeating_track: !!n.toggling_repeat_track && void 0 }, t);
                                        case repeat_mode_1.RepeatMode.TRACK:
                                            return !n.toggling_repeat_track && i.setOptions({ repeating_context: !n.toggling_repeat_context || void 0, repeating_track: !0 }, t);
                                        default:
                                            return Promise.reject(new TypeError("Unknown repeat mode."));
                                    }
                                });
                            }),
                            (t.prototype.register = function () {
                                return this._playerClient.register();
                            }),
                            (t.prototype.suppressEvents = function () {
                                this._suppressed = !0;
                            }),
                            (t.prototype.unsuppressEvents = function () {
                                (this._suppressed = !1), this._lastDeviceInfoData && this.emit("device_info_changed", this._lastDeviceInfoData), this._state && this.emit("state_changed", { state: this._state });
                            }),
                            (t.prototype.getQueueManager = function (e, t) {
                                if ((void 0 === t && (t = {}), !this._queue)) {
                                    var r = t.reportInitial ? this._lastPlayerState : null;
                                    this._queue = new player_queue_1.QueueManager(tslib_1.__assign({ connectClient: this._playerClient, initialContextPlayerState: r, runner: e }, t));
                                }
                                return this._queue;
                            }),
                            t
                        );
                    })(emitter_1.EventEmitter);
                exports.HarmonyController = HarmonyController;
            },
            {
                "../enums/device_deactivated_reason": 92,
                "../enums/errors": 95,
                "../enums/playback_quality": 98,
                "../enums/repeat_mode": 99,
                "../error/connect_service/client": 100,
                "./metadata_decorator": 82,
                "./player_queue": 84,
                "@js-sdk/debug-tools": 11,
                "@spotify-internal/emitter": 71,
                "spotify-liburi": 188,
                tslib: 190,
            },
        ],
        75: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.DeviceDescriptor = void 0);
                var tslib_1 = require("tslib"),
                    emitter_1 = require("@spotify-internal/emitter"),
                    device_type_1 = require("../enums/device_type"),
                    device_id_1 = require("../utils/device_id"),
                    interpolate_ua_1 = require("./helpers/interpolate_ua"),
                    capitalize_1 = require("./helpers/capitalize"),
                    DeviceDescriptor = (function (e) {
                        function t(t) {
                            var i,
                                r = e.call(this) || this;
                            if (((r._platformVersion = ""), (r._metadata = {}), (r._manifestPrependOffset = 0), !t)) throw new TypeError("Invalid argument `options`.");
                            if (!t.id) throw new TypeError("Argument `options.id` is required.");
                            if (!t.name || !t.model || !t.type) throw new TypeError("Incomplete `options` value.");
                            return (
                                (r._id = t.id),
                                (r._type = t.type),
                                (r._brand = t.brand),
                                (r._model = t.model),
                                (r._name = t.name),
                                (r._platformIdentifier = t.platform_identifier),
                                (r._platformVersion = t.platform_version || ""),
                                (r._metadata = t.metadata || {}),
                                (r._capabilities = t.capabilities || { manifest_formats: [] }),
                                (r._manifestPrependOffset = (null === (i = r._capabilities.manifest_formats) || void 0 === i ? void 0 : i.length) || 0),
                                r
                            );
                        }
                        return (
                            tslib_1.__extends(t, e),
                            (t.create = function (e) {
                                return new t({
                                    id: device_id_1.DeviceId.get(e.id, e.randomizeId),
                                    model: e.model || interpolate_ua_1.interpolateUA("harmony-{{name}}.{{version}}-{{platform}}").toLowerCase(),
                                    name: e.nameTemplate ? interpolate_ua_1.interpolateUA(e.nameTemplate) : e.name || capitalize_1.capitalize(interpolate_ua_1.interpolateUA("Spotify ({{name}}/{{platform}})")),
                                    type: e.type || device_type_1.DeviceType.COMPUTER,
                                    brand: e.brand || "SpotifyHarmonyGeneric",
                                    platform_identifier: e.platform_identifier,
                                    platform_version: e.platform_version,
                                    metadata: e.metadata || {},
                                    capabilities: e.capabilities || {},
                                });
                            }),
                            (t.prototype.getId = function () {
                                return this._id;
                            }),
                            (t.prototype.setCapability = function (e, t) {
                                switch (e) {
                                    case "manifest_formats":
                                        throw new TypeError('Cannot change capability "manifest_formats"');
                                    default:
                                        return (this._capabilities[e] = t), this.emit("descriptor_changed", { descriptor: this.toJSON() }), !0;
                                }
                            }),
                            (t.prototype.getCapability = function (e) {
                                switch (e) {
                                    case "manifest_formats":
                                        throw new TypeError("Use `descriptor.getManifestFormats()`.");
                                    default:
                                        return this._capabilities[e];
                                }
                            }),
                            (t.prototype.setName = function (e) {
                                return (this._name = e), this.emit("descriptor_changed", { descriptor: this.toJSON() }), !0;
                            }),
                            (t.prototype.getName = function () {
                                return this._name;
                            }),
                            (t.prototype.getPlatformIdentifier = function () {
                                return this._platformIdentifier || "Partner " + this._brand + " " + this._model;
                            }),
                            (t.prototype.getPlatformVersion = function () {
                                return this._platformVersion;
                            }),
                            (t.prototype.getManifestFormats = function () {
                                return this._capabilities.manifest_formats || [];
                            }),
                            (t.prototype.appendManifestFormat = function () {
                                for (var e = [], t = 0; t < arguments.length; t++) e[t] = arguments[t];
                                var i = this._capabilities.manifest_formats;
                                Array.isArray(i) && i.push.apply(i, e);
                            }),
                            (t.prototype.prependManifestFormat = function () {
                                for (var e = [], t = 0; t < arguments.length; t++) e[t] = arguments[t];
                                var i = this._capabilities.manifest_formats;
                                Array.isArray(i) && i.splice.apply(i, tslib_1.__spreadArrays([this._manifestPrependOffset, 0], e));
                            }),
                            (t.prototype.toJSON = function () {
                                return {
                                    brand: this._brand,
                                    capabilities: tslib_1.__assign({}, this._capabilities),
                                    id: this._id,
                                    metadata: tslib_1.__assign({}, this._metadata),
                                    model: this._model,
                                    name: this._name,
                                    platform_identifier: this._platformIdentifier,
                                    platform_version: this._platformVersion,
                                    type: this._type,
                                };
                            }),
                            (t.prototype.toTrackPlaybackDeviceInfo = function () {
                                return {
                                    brand: this._brand,
                                    capabilities: tslib_1.__assign({}, this._capabilities),
                                    device_id: this._id,
                                    device_type: this._type,
                                    metadata: tslib_1.__assign({}, this._metadata),
                                    model: this._model,
                                    name: this._name,
                                    platform_identifier: this._platformIdentifier,
                                };
                            }),
                            t
                        );
                    })(emitter_1.EventEmitter);
                exports.DeviceDescriptor = DeviceDescriptor;
            },
            { "../enums/device_type": 93, "../utils/device_id": 109, "./helpers/capitalize": 77, "./helpers/interpolate_ua": 80, "@spotify-internal/emitter": 71, tslib: 190 },
        ],
        76: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.Harmony = void 0);
                var tslib_1 = require("tslib"),
                    emitter_1 = require("@spotify-internal/emitter"),
                    reason_1 = require("@js-sdk/playback/es5/enums/reason"),
                    typedefs_1 = require("../typedefs"),
                    harmony_event_1 = require("../enums/harmony_event"),
                    errors_1 = require("../enums/errors"),
                    error_source_1 = require("../enums/error_source"),
                    repeat_mode_1 = require("../enums/repeat_mode"),
                    harmony_error_1 = require("../error/harmony_error"),
                    defer_1 = require("./helpers/defer"),
                    device_1 = require("./helpers/device"),
                    player_queue_1 = require("./player_queue"),
                    DEFAULT_SEEK_TIME = 15e3,
                    Harmony = (function (e) {
                        function t(t) {
                            var r = e.call(this) || this;
                            return (
                                (r._hasFakeState = !1),
                                (r._localPlayerEnabled = !1),
                                (r._localPlayback = !1),
                                (r._lastDeviceList = []),
                                (r._deferredStreamer = defer_1.defer()),
                                (r._client = t.client),
                                (r._streamer = t.streamer),
                                (r._controller = t.controller),
                                (r._hidden = !!t.hidden),
                                (r._onlyLocalState = !!t.onlyLocalState),
                                (r._preferController = !r._onlyLocalState && !!t.preferControllerState),
                                (r._claimInactivePlayerStates = !!t.claimInactivePlayerStates),
                                (r._enableControllerWithoutStreamer = !!t.enableControllerWithoutStreamer),
                                (r._autoActivateElement = !!t.autoActivateElement),
                                (r._deactivateOnStop = !!t.experimentalDeactivateOnStop),
                                r._init(),
                                r
                            );
                        }
                        return (
                            tslib_1.__extends(t, e),
                            (t.create = function (e) {
                                return new t(e);
                            }),
                            (t.prototype._init = function () {
                                var e,
                                    t = this;
                                this._createStreamerDeferred();
                                var r = this._client;
                                r.on("error", this._onError.bind(this)),
                                    this.proxyEmit(r, "authenticated", harmony_event_1.HarmonyEvent.AUTHENTICATED),
                                    this.proxyEmit(r, "authentication_error", harmony_event_1.HarmonyEvent.AUTHENTICATION_ERROR),
                                    this.proxyEmit(r, "before_disconnect", harmony_event_1.HarmonyEvent.BEFORE_DISCONNECT),
                                    this.proxyEmit(r, "connected", harmony_event_1.HarmonyEvent.CONNECTED),
                                    this.proxyEmit(r, "connection_error", harmony_event_1.HarmonyEvent.CONNECTION_ERROR),
                                    this.proxyEmit(r, "descriptor_changed", harmony_event_1.HarmonyEvent.DEVICE_DESCRIPTOR_CHANGED),
                                    this.proxyEmit(r, "product_state_changed", harmony_event_1.HarmonyEvent.PRODUCT_STATE_CHANGED),
                                    this.proxyEmit(r, "reconnected", harmony_event_1.HarmonyEvent.RECONNECTED),
                                    this.proxyEmit(r, "reconnecting", harmony_event_1.HarmonyEvent.RECONNECTING),
                                    this.proxyEmit(r, "unrecoverable_failure", harmony_event_1.HarmonyEvent.UNRECOVERABLE_FAILURE),
                                    this.proxyEmit(r, "logged_out", harmony_event_1.HarmonyEvent.LOGGED_OUT);
                                var o = this._controller;
                                o.on("device_info_changed", function (e) {
                                    t._onDeviceStateChanged(e.data);
                                }),
                                    o.on("devices_changed", this._onDevicesChanged.bind(this)),
                                    o.on("state_changed", this._onPlayerStateChanged.bind(this)),
                                    o.on("progress", this._onControllerProgress.bind(this)),
                                    this.proxyEmitAll(o, (((e = {}).max_subscriptions_reached = harmony_event_1.HarmonyEvent.MAX_SUBSCRIPTIONS_REACHED), (e.device_deactivated = harmony_event_1.HarmonyEvent.DEVICE_DEACTIVATED), e)),
                                    o.on("registered", this.emit.bind(this, harmony_event_1.HarmonyEvent.REMOTE_OBSERVER_ENABLED, null)),
                                    o.on("deregistered", this.emit.bind(this, harmony_event_1.HarmonyEvent.REMOTE_OBSERVER_DISABLED, null));
                                var n = this._streamer;
                                n
                                    ? (n.on("deregistered", this._onStreamerDeregistered.bind(this)),
                                      n.on("registered", this._onStreamerRegistered.bind(this)),
                                      n.on("registration_aborted", this._onStreamerRegistrationAborted.bind(this)),
                                      n.on("state_changed", this._onStreamerStateChanged.bind(this)),
                                      n.on("stopped_on_background", this._onStreamerStoppedOnBackground.bind(this)),
                                      this.proxyEmitSync(n, "before_volume_change", harmony_event_1.HarmonyEvent.BEFORE_VOLUME_CHANGE),
                                      this.proxyEmit(n, "autoplay_failed", harmony_event_1.HarmonyEvent.AUTOPLAY_FAILED),
                                      this.proxyEmit(n, "stalled", harmony_event_1.HarmonyEvent.BUFFER_STALLED),
                                      this.proxyEmit(n, "buffering_end", harmony_event_1.HarmonyEvent.BUFFERING_END),
                                      this.proxyEmit(n, "buffering_start", harmony_event_1.HarmonyEvent.BUFFERING_START),
                                      this.proxyEmit(n, "duration_changed", harmony_event_1.HarmonyEvent.DURATION_CHANGED),
                                      this.proxyEmit(n, "max_list_errors_reached", harmony_event_1.HarmonyEvent.MAX_LIST_ERRORS_REACHED),
                                      this.proxyEmit(n, "max_subscriptions_reached", harmony_event_1.HarmonyEvent.MAX_SUBSCRIPTIONS_REACHED),
                                      this.proxyEmit(n, "playback_capped", harmony_event_1.HarmonyEvent.PLAYBACK_CAPPED),
                                      this.proxyEmit(n, "player_initialization_done", harmony_event_1.HarmonyEvent.PLAYER_INITIALIZATION_DONE),
                                      this.proxyEmit(n, "player_initialization_failed", harmony_event_1.HarmonyEvent.PLAYER_INITIALIZATION_FAILED),
                                      this.proxyEmit(n, "progress", harmony_event_1.HarmonyEvent.PROGRESS),
                                      this.proxyEmit(n, "registration_error", harmony_event_1.HarmonyEvent.SERVICE_REGISTRATION_ERROR),
                                      this.proxyEmit(n, "track_ended", harmony_event_1.HarmonyEvent.TRACK_ENDED),
                                      this.proxyEmit(n, "video_element_appended", harmony_event_1.HarmonyEvent.VIDEO_ELEMENT_APPENDED),
                                      this.proxyEmit(n, "video_element_removed", harmony_event_1.HarmonyEvent.VIDEO_ELEMENT_REMOVED),
                                      this.proxyEmit(n, "volume_changed", harmony_event_1.HarmonyEvent.VOLUME_CHANGED),
                                      n.on("context_ended", this.emit.bind(this, harmony_event_1.HarmonyEvent.LOCAL_CONTEXT_ENDED, null)),
                                      n.on("logged_out", this.emit.bind(this, harmony_event_1.HarmonyEvent.LOCAL_PLAYER_LOGGED_OUT, null)))
                                    : (this._disableLocalTarget(),
                                      this.on(harmony_event_1.HarmonyEvent.AUTHENTICATED, function () {
                                          t.emit(harmony_event_1.HarmonyEvent.LOCAL_PLAYER_DISABLED, null);
                                      }));
                            }),
                            (t.prototype._createStreamerDeferred = function () {
                                (this._deferredStreamer = defer_1.defer()), this._deferredStreamer.promise.catch(function () {});
                            }),
                            (t.prototype._isTargetIdLocal = function (e) {
                                return e
                                    ? e === typedefs_1.LOCAL_DEVICE_ID
                                        ? Promise.resolve(!0)
                                        : this._client.getDeviceDescriptor().then(function (t) {
                                              return e === t.getId();
                                          })
                                    : Promise.resolve(!!this._localPlayback);
                            }),
                            (t.prototype._onStreamerRegistered = function (e) {
                                this._deferredStreamer.resolve(e.data),
                                    this._createStreamerDeferred(),
                                    this._deferredStreamer.resolve(e.data),
                                    (this._localPlayerEnabled = !0),
                                    this._controller.register(),
                                    this.emit(harmony_event_1.HarmonyEvent.LOCAL_PLAYER_ENABLED, null);
                            }),
                            (t.prototype._onStreamerDeregistered = function () {
                                this._disableLocalTarget(), this.emit(harmony_event_1.HarmonyEvent.LOCAL_PLAYER_DISABLED, null);
                            }),
                            (t.prototype._onStreamerRegistrationAborted = function () {
                                this._disableLocalTarget(), this._enableControllerWithoutStreamer && this._controller.register(), this.emit(harmony_event_1.HarmonyEvent.LOCAL_PLAYER_DISABLED, null);
                            }),
                            (t.prototype._disableLocalTarget = function () {
                                this._localPlayerEnabled = !1;
                                var e = new harmony_error_1.HarmonyError(errors_1.HarmonyErrors.HARMONY_LOCAL_PLAYER_DISABLED, "Cannot perform command; local player is disabled.");
                                this._deferredStreamer.reject(e), this._createStreamerDeferred(), this._deferredStreamer.reject(e);
                            }),
                            (t.prototype._onStreamerConnect = function () {
                                return this._deferredStreamer.promise;
                            }),
                            (t.prototype._onDeviceStateChanged = function (e) {
                                var t = this,
                                    r = !!this._localPlayback,
                                    o = function (e) {
                                        void 0 === e && (e = !1),
                                            t._generateLocalDeviceInfo(e).then(function (e) {
                                                t.emit(harmony_event_1.HarmonyEvent.LAST_ACTIVE_DEVICE_INFO_CHANGED, { deviceInfo: e, hasOrphanedState: !1 });
                                            });
                                    };
                                if (this._localPlayerEnabled && e.hasOrphanedState && this._claimInactivePlayerStates) return (this._hasFakeState = !0), void o(!0);
                                if (((this._hasFakeState = !1), (this._localPlayback = !(!e.deviceInfo || !e.deviceInfo.local)), this._localPlayback)) {
                                    if (!this._streamer) throw new harmony_error_1.HarmonyError(errors_1.HarmonyErrors.HARMONY_OPERATION_FORBIDDEN, "No streamer provided.");
                                    this._streamer
                                        .getVolume()
                                        .then(function (r) {
                                            e.deviceInfo && (e.deviceInfo.volume = r), t.emit(harmony_event_1.HarmonyEvent.LAST_ACTIVE_DEVICE_INFO_CHANGED, e);
                                        })
                                        .catch(function () {});
                                } else this._onlyLocalState ? (this._localPlayback || r) && o() : this.emit(harmony_event_1.HarmonyEvent.LAST_ACTIVE_DEVICE_INFO_CHANGED, e);
                            }),
                            (t.prototype._onDevicesChanged = function (e) {
                                var t = this,
                                    r = this._lastDeviceList;
                                this._parseDeviceList(e.data).then(function (e) {
                                    device_1.areDeviceListsEqual(r, e) || t.emit(harmony_event_1.HarmonyEvent.DEVICES_CHANGED, { devices: e, localDevice: null });
                                });
                            }),
                            (t.prototype._onError = function (e) {
                                var t = e.data.error;
                                e.data.source === error_source_1.HarmonyErrorSource.PLAYBACK && t && t.unrecoverable && (this._disableLocalTarget(), this._streamer && this._streamer.deregister()),
                                    this.emit(harmony_event_1.HarmonyEvent.ERROR, e.data);
                            }),
                            (t.prototype._onPlayerStateChanged = function (e) {
                                if (!this._onlyLocalState && (this._preferController || !this._localPlayback)) {
                                    var t = void 0;
                                    (t = this._localPlayerEnabled && this._claimInactivePlayerStates ? e.data.state : e.data.orphaned ? null : e.data.state), this.emit(harmony_event_1.HarmonyEvent.STATE_CHANGED, { state: t });
                                }
                            }),
                            (t.prototype._onControllerProgress = function (e) {
                                this._onlyLocalState || this._localPlayback || this.emit(harmony_event_1.HarmonyEvent.PROGRESS, e.data);
                            }),
                            (t.prototype._onStreamerStateChanged = function (e) {
                                this._preferController ||
                                    (this._onlyLocalState ? this._triggerLocalStateChanges(e.data) : this._hidden ? this._handleHidden(e.data) : this._localPlayback && this.emit(harmony_event_1.HarmonyEvent.STATE_CHANGED, e.data));
                            }),
                            (t.prototype._onStreamerStoppedOnBackground = function () {
                                this._deactivateOnStop && (this._localPlayback = !1), this.emit(harmony_event_1.HarmonyEvent.STOPPED_ON_BACKGROUND, null);
                            }),
                            (t.prototype._handleHidden = function (e) {
                                e.state ? (this._controller.suppressEvents(), this._triggerLocalStateChanges(e)) : this._controller.unsuppressEvents();
                            }),
                            (t.prototype._parseDeviceList = function (e) {
                                var t = this,
                                    r = e.devices.slice(0).map(function (e) {
                                        return Promise.resolve(e);
                                    });
                                return (
                                    r.length && e.localDevice ? this._hasFakeState && e.localDevice && (e.localDevice.is_active = !0) : r.push(this._generateLocalDeviceInfo(this._hasFakeState)),
                                    Promise.all(r).then(function (e) {
                                        return (t._lastDeviceList = e), e;
                                    })
                                );
                            }),
                            (t.prototype._triggerLocalStateChanges = function (e) {
                                var t = this;
                                this._generateLocalDeviceInfo().then(function (e) {
                                    t._onDeviceStateChanged({ deviceInfo: e, hasOrphanedState: !1 });
                                }),
                                    this.emit(harmony_event_1.HarmonyEvent.STATE_CHANGED, e);
                            }),
                            (t.prototype._canStartNewContext = function (e) {
                                var t = this;
                                return this._runOnDevice(
                                    e,
                                    function () {
                                        return t._streamer ? Promise.resolve(!0) : Promise.reject(new harmony_error_1.HarmonyError(errors_1.HarmonyErrors.HARMONY_OPERATION_FORBIDDEN, "No streamer provided."));
                                    },
                                    function () {
                                        return Promise.resolve(!0);
                                    },
                                    !0
                                );
                            }),
                            (t.prototype._activateElement = function () {
                                (this._autoActivateElement = !1), this._streamer && this._streamer.activateElement().catch(function () {});
                            }),
                            (t.prototype._runOnDevice = function (e, t, r, o) {
                                var n = this;
                                return (
                                    void 0 === e && (e = void 0),
                                    this._hasFakeState && !o
                                        ? (this._autoActivateElement && this._activateElement(), this._claimStateAndRun(r))
                                        : this._isTargetIdLocal(e).then(function (e) {
                                              return e ? n._onStreamerConnect().then(t) : r();
                                          })
                                );
                            }),
                            (t.prototype._claimStateAndRun = function (e) {
                                var t = this;
                                return this._onStreamerConnect()
                                    .then(function () {
                                        return (
                                            (t._hasFakeState = !1),
                                            Promise.all([
                                                t._controller.transfer(typedefs_1.LOCAL_DEVICE_ID, { paused: !0 }),
                                                new Promise(function (e, r) {
                                                    t._streamer ? t._streamer.once("track_loaded", e) : r(new harmony_error_1.HarmonyError(errors_1.HarmonyErrors.HARMONY_OPERATION_FORBIDDEN, "No streamer provided."));
                                                }),
                                            ])
                                        );
                                    })
                                    .then(function () {
                                        return e();
                                    });
                            }),
                            (t.prototype._generateLocalDeviceInfo = function (e) {
                                var t = this;
                                void 0 === e && (e = !1);
                                var r = this._client,
                                    o = this._streamer,
                                    n = Promise.resolve(!1),
                                    a = Promise.resolve(-1);
                                return (
                                    this._localPlayerEnabled &&
                                        (e
                                            ? (n = Promise.resolve(!0))
                                            : o &&
                                              (n = o.getCurrentState().then(function (e) {
                                                  return !!e;
                                              })),
                                        o && (a = o.getVolume())),
                                    Promise.all([r.getClientDescriptor(), r.getSDKId(), n, a]).then(function (e) {
                                        var r = e[0],
                                            o = e[1],
                                            n = e[2],
                                            a = e[3];
                                        return {
                                            hidden: t._hidden,
                                            id: r.id,
                                            is_active: n,
                                            is_controllable: t._localPlayerEnabled,
                                            is_observable: !!t._localPlayerEnabled && !t._hidden,
                                            local: !0,
                                            metadata: r.metadata || {},
                                            name: r.name,
                                            type: r.type,
                                            version: o,
                                            volume: a,
                                            capabilities: { supports_lossless_audio: !1 },
                                        };
                                    })
                                );
                            }),
                            (t.prototype._movePosition = function (e, t) {
                                var r = this;
                                return this.getCurrentState().then(function (o) {
                                    if (!o || isNaN(o.position)) return Promise.reject(new harmony_error_1.HarmonyError(errors_1.HarmonyErrors.HARMONY_OPERATION_FORBIDDEN, "Seeking not allowed with invalid track."));
                                    var n = e,
                                        a = Math.min(o.duration, Math.max(0, o.position + n));
                                    return r.seek(a, t);
                                });
                            }),
                            (t.prototype._prepareSkipTrack = function (e) {
                                return "string" == typeof e ? player_queue_1.queueTrackFromQid(e) : e;
                            }),
                            (t.prototype._cycleRepeatMode = function (e) {
                                var t = this;
                                return this.getCurrentState().then(function (r) {
                                    if (!r) return Promise.reject(new harmony_error_1.HarmonyError(errors_1.HarmonyErrors.CONNECTAPI_CLIENT_NO_STATE, "Nothing playing"));
                                    var o = null,
                                        n = r.disallows;
                                    switch (r.repeat_mode) {
                                        case repeat_mode_1.RepeatMode.OFF:
                                            if (n.toggling_repeat_context) {
                                                if (n.toggling_repeat_track) return Promise.resolve(!1);
                                                o = repeat_mode_1.RepeatMode.TRACK;
                                            } else o = repeat_mode_1.RepeatMode.CONTEXT;
                                            break;
                                        case repeat_mode_1.RepeatMode.CONTEXT:
                                            o = n.toggling_repeat_track ? repeat_mode_1.RepeatMode.OFF : repeat_mode_1.RepeatMode.TRACK;
                                            break;
                                        case repeat_mode_1.RepeatMode.TRACK:
                                            o = repeat_mode_1.RepeatMode.OFF;
                                            break;
                                        default:
                                            o = repeat_mode_1.RepeatMode.OFF;
                                    }
                                    return t.setRepeatMode(o, e);
                                });
                            }),
                            (t.prototype.getClientDescriptor = function () {
                                return this._client.getClientDescriptor();
                            }),
                            (t.prototype.getProductState = function () {
                                return this._client.getProductState();
                            }),
                            (t.prototype.getPublicTransport = function () {
                                return this._client.getPublicTransport();
                            }),
                            (t.prototype.getUserInfo = function () {
                                return this._client.getUserInfo();
                            }),
                            (t.prototype.getVersionDescriptor = function () {
                                return this._client.getVersionDescriptor();
                            }),
                            (t.prototype.logAppMetrics = function (e, t) {
                                return this._client.logAppMetrics(e, t);
                            }),
                            (t.prototype.setName = function (e) {
                                return this._client.setName(e);
                            }),
                            (t.prototype.setNameTemplate = function (e) {
                                return this._client.setNameTemplate(e);
                            }),
                            (t.prototype.getContextPlayerState = function () {
                                return this._controller.getContextPlayerState();
                            }),
                            (t.prototype.updateCurrentContext = function (e, t) {
                                return this._controller.updateCurrentContext(e, t);
                            }),
                            (t.prototype.getLastActiveDevice = function () {
                                var e = this;
                                return this._onlyLocalState || this._hasFakeState
                                    ? this._generateLocalDeviceInfo(this._hasFakeState)
                                    : this._controller.getActiveDevice().then(function (t) {
                                          return (null == t ? void 0 : t.local) && e._streamer
                                              ? ((t.hidden = e._hidden),
                                                e._streamer.getVolume().then(function (e) {
                                                    return (t.volume = e), t;
                                                }))
                                              : t;
                                      });
                            }),
                            (t.prototype.getCurrentState = function () {
                                var e = this;
                                if (!this._onlyLocalState && (this._preferController || !this._localPlayback)) {
                                    var t = !this._localPlayerEnabled || !this._claimInactivePlayerStates;
                                    return this._controller.getCurrentState(t).then(function (t) {
                                        return !e._preferController && e._localPlayback ? e.getCurrentState() : t;
                                    });
                                }
                                return this._onStreamerConnect().then(this._streamer.getCurrentState.bind(this._streamer));
                            }),
                            (t.prototype.togglePlay = function (e) {
                                var t = this;
                                return this._runOnDevice(
                                    e,
                                    function () {
                                        return t._streamer.togglePlay();
                                    },
                                    this._controller.togglePlay.bind(this._controller, e)
                                );
                            }),
                            (t.prototype.pause = function (e) {
                                var t = this;
                                return this._runOnDevice(
                                    e,
                                    function () {
                                        return t._streamer.pause();
                                    },
                                    this._controller.pause.bind(this._controller, e)
                                );
                            }),
                            (t.prototype.resume = function (e) {
                                var t = this;
                                return this._runOnDevice(
                                    e,
                                    function () {
                                        return t._streamer.resume();
                                    },
                                    this._controller.resume.bind(this._controller, e)
                                );
                            }),
                            (t.prototype.playURI = function (e, t, r) {
                                var o = this;
                                return this._canStartNewContext(t).then(function () {
                                    return o._autoActivateElement && o._activateElement(), o._controller.playURI(e, t, r);
                                });
                            }),
                            (t.prototype.playTracks = function (e, t, r) {
                                var o = this;
                                return this._canStartNewContext(t).then(function () {
                                    return o._autoActivateElement && o._activateElement(), o._controller.playTracks(e, t, r);
                                });
                            }),
                            (t.prototype.nextTrack = function (e, t) {
                                var r = this,
                                    o = {},
                                    n = function () {
                                        return r._streamer.nextTrack(reason_1.Reason.FORWARD_BUTTON);
                                    },
                                    a = this._controller.nextTrack.bind(this._controller, e, o);
                                return (null == t ? void 0 : t.track) && ((n = a), (o.track = this._prepareSkipTrack(t.track))), this._runOnDevice(e, n, a);
                            }),
                            (t.prototype.smartPreviousTrack = function (e) {
                                var t = this;
                                return this.getCurrentState().then(function (r) {
                                    return r
                                        ? (r.disallows || {}).seeking || (r.position < 3e3 && r.track_window && r.track_window.previous_tracks && r.track_window.previous_tracks.length > 0)
                                            ? t.previousTrack(e)
                                            : t.seek(0, e)
                                        : Promise.reject(new harmony_error_1.HarmonyError(errors_1.HarmonyErrors.HARMONY_NO_TRACKS_LOADED, "No current state."));
                                });
                            }),
                            (t.prototype.previousTrack = function (e, t) {
                                var r = this,
                                    o = {},
                                    n = function () {
                                        return r._streamer.previousTrack(reason_1.Reason.FORWARD_BUTTON);
                                    },
                                    a = this._controller.previousTrack.bind(this._controller, e, o);
                                return (null == t ? void 0 : t.track) && ((n = a), (o.track = this._prepareSkipTrack(t.track))), this._runOnDevice(e, n, a);
                            }),
                            (t.prototype.seek = function (e, t) {
                                var r = this;
                                return this._runOnDevice(
                                    t,
                                    function () {
                                        return r._streamer.seek(e);
                                    },
                                    this._controller.seek.bind(this._controller, e, t)
                                );
                            }),
                            (t.prototype.seekForward = function (e, t) {
                                return void 0 === e && (e = DEFAULT_SEEK_TIME), this._movePosition(e, t);
                            }),
                            (t.prototype.seekBackward = function (e, t) {
                                return void 0 === e && (e = DEFAULT_SEEK_TIME), this._movePosition(-1 * e, t);
                            }),
                            (t.prototype.getVolume = function () {
                                return this._streamer ? this._streamer.getVolume() : Promise.resolve(-1);
                            }),
                            (t.prototype.setVolume = function (e, t) {
                                var r = this;
                                return this._runOnDevice(
                                    t,
                                    function () {
                                        return r._streamer.setVolume(e);
                                    },
                                    this._controller.setVolume.bind(this._controller, e),
                                    !0
                                );
                            }),
                            (t.prototype.getVideoProfiles = function () {
                                if (!this._streamer) throw new harmony_error_1.HarmonyError(errors_1.HarmonyErrors.HARMONY_OPERATION_FORBIDDEN, "No streamer provided.");
                                return this._streamer.getVideoVariants();
                            }),
                            (t.prototype.setPreferredBitrate = function (e) {
                                if (!this._streamer) throw new harmony_error_1.HarmonyError(errors_1.HarmonyErrors.HARMONY_OPERATION_FORBIDDEN, "No streamer provided.");
                                return this._streamer.setPreferredBitrate(e);
                            }),
                            (t.prototype.getDevices = function () {
                                return this._controller.getDevices().then(this._parseDeviceList.bind(this));
                            }),
                            (t.prototype.setQueue = function (e, t, r) {
                                console.warn("Harmony.setQueue is deprecated; migrate to new PlayerQueue API");
                                var o = this._controller.setQueue.bind(this._controller, e, t, r);
                                return this._runOnDevice(r, o, o);
                            }),
                            (t.prototype.addToQueue = function (e, t) {
                                var r = e.map(function (e) {
                                    return "string" == typeof e ? e : e.uri;
                                });
                                return this._controller.getQueueManager().addToQueue(r, t);
                            }),
                            (t.prototype.setShuffle = function (e, t) {
                                var r = this._controller.setShuffle.bind(this._controller, e, t);
                                return this._runOnDevice(t, r, r);
                            }),
                            (t.prototype.toggleShuffle = function (e) {
                                var t = this._controller.toggleShuffle.bind(this._controller, e);
                                return this._runOnDevice(e, t, t);
                            }),
                            (t.prototype.setRepeatMode = function (e, t) {
                                var r = this._controller.setRepeatMode.bind(this._controller, e, t);
                                return this._runOnDevice(t, r, r);
                            }),
                            (t.prototype.cycleRepeatMode = function (e) {
                                var t = this._cycleRepeatMode.bind(this, e);
                                return this._runOnDevice(e, t, t);
                            }),
                            (t.prototype.transfer = function (e, t) {
                                var r = e || typedefs_1.LOCAL_DEVICE_ID,
                                    o = this._controller.transfer.bind(this._controller, r, t);
                                return this._autoActivateElement && this._activateElement(), this._runOnDevice(r, o, o, !0);
                            }),
                            (t.prototype.logout = function (e) {
                                return this._controller.logout(e || typedefs_1.LOCAL_DEVICE_ID);
                            }),
                            (t.prototype.activateElement = function () {
                                return this._streamer
                                    ? this._streamer.activateElement()
                                    : Promise.reject(new harmony_error_1.HarmonyError(errors_1.HarmonyErrors.HARMONY_LOCAL_PLAYER_DISABLED, "Cannot activate element; local player is disabled."));
                            }),
                            (t.prototype.getQueueManager = function () {
                                var e = this;
                                return this._controller.getQueueManager(
                                    function (t, r) {
                                        return e._runOnDevice(r, t, t);
                                    },
                                    { reportInactiveQueues: this._claimInactivePlayerStates, onlyLocalQueue: this._onlyLocalState, reportInitial: this._hasFakeState || this._localPlayback }
                                );
                            }),
                            (t.prototype.hideSubtitles = function () {
                                return this._localPlayback
                                    ? this._streamer
                                        ? this._streamer.hideSubtitles()
                                        : Promise.reject(new harmony_error_1.HarmonyError(errors_1.HarmonyErrors.HARMONY_OPERATION_FORBIDDEN, "No streamer provided."))
                                    : Promise.reject(new harmony_error_1.HarmonyError(errors_1.HarmonyErrors.HARMONY_OPERATION_FORBIDDEN, "Cannot hide subtitles on remote player."));
                            }),
                            (t.prototype.showSubtitles = function () {
                                return this._localPlayback
                                    ? this._streamer
                                        ? this._streamer.showSubtitles()
                                        : Promise.reject(new harmony_error_1.HarmonyError(errors_1.HarmonyErrors.HARMONY_OPERATION_FORBIDDEN, "No streamer provided."))
                                    : Promise.reject(new harmony_error_1.HarmonyError(errors_1.HarmonyErrors.HARMONY_OPERATION_FORBIDDEN, "Cannot show subtitles on remote player."));
                            }),
                            (t.prototype.areSubtitlesShown = function () {
                                return this._localPlayback
                                    ? this._streamer
                                        ? this._streamer.areSubtitlesShown()
                                        : Promise.reject(new harmony_error_1.HarmonyError(errors_1.HarmonyErrors.HARMONY_OPERATION_FORBIDDEN, "No streamer provided."))
                                    : Promise.reject(new harmony_error_1.HarmonyError(errors_1.HarmonyErrors.HARMONY_OPERATION_FORBIDDEN, "Cannot show subtitles on remote player."));
                            }),
                            (t.prototype.getSubtitleLanguages = function () {
                                return this._localPlayback
                                    ? this._streamer
                                        ? this._streamer.getSubtitleLanguages()
                                        : Promise.reject(new harmony_error_1.HarmonyError(errors_1.HarmonyErrors.HARMONY_OPERATION_FORBIDDEN, "No streamer provided."))
                                    : Promise.reject(new harmony_error_1.HarmonyError(errors_1.HarmonyErrors.HARMONY_OPERATION_FORBIDDEN, "Cannot get subtitle languages on remote player."));
                            }),
                            (t.prototype.getActiveSubtitleLanguage = function () {
                                return this._localPlayback
                                    ? this._streamer
                                        ? this._streamer.getActiveSubtitleLanguage()
                                        : Promise.reject(new harmony_error_1.HarmonyError(errors_1.HarmonyErrors.HARMONY_OPERATION_FORBIDDEN, "No streamer provided."))
                                    : Promise.reject(new harmony_error_1.HarmonyError(errors_1.HarmonyErrors.HARMONY_OPERATION_FORBIDDEN, "Cannot get subtitle language on remote player."));
                            }),
                            (t.prototype.setSubtitleLanguage = function (e) {
                                return this._localPlayback
                                    ? this._streamer
                                        ? this._streamer.setSubtitleLanguage(e)
                                        : Promise.reject(new harmony_error_1.HarmonyError(errors_1.HarmonyErrors.HARMONY_OPERATION_FORBIDDEN, "No streamer provided."))
                                    : Promise.reject(new harmony_error_1.HarmonyError(errors_1.HarmonyErrors.HARMONY_OPERATION_FORBIDDEN, "Cannot set subtitle languages on remote player."));
                            }),
                            (t.prototype.getMediaConfig = function () {
                                return this._streamer
                                    ? this._streamer.getMediaConfig()
                                    : Promise.reject(new harmony_error_1.HarmonyError(errors_1.HarmonyErrors.HARMONY_LOCAL_PLAYER_DISABLED, "Cannot activate element; local player is disabled."));
                            }),
                            t
                        );
                    })(emitter_1.EventEmitter);
                exports.Harmony = Harmony;
            },
            {
                "../enums/error_source": 94,
                "../enums/errors": 95,
                "../enums/harmony_event": 96,
                "../enums/repeat_mode": 99,
                "../error/harmony_error": 101,
                "../typedefs": 106,
                "./helpers/defer": 78,
                "./helpers/device": 79,
                "./player_queue": 84,
                "@js-sdk/playback/es5/enums/reason": 51,
                "@spotify-internal/emitter": 71,
                tslib: 190,
            },
        ],
        77: [
            function (require, module, exports) {
                "use strict";
                function capitalize(e) {
                    return e.replace(/\b[a-z]/g, function (e) {
                        return e.toUpperCase();
                    });
                }
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.capitalize = void 0), (exports.capitalize = capitalize);
            },
            {},
        ],
        78: [
            function (require, module, exports) {
                arguments[4][21][0].apply(exports, arguments);
            },
            { dup: 21 },
        ],
        79: [
            function (require, module, exports) {
                "use strict";
                function areDevicesEqual(e, r) {
                    return (
                        (!e && !r) ||
                        (!(!e || !r) &&
                            e.id === r.id &&
                            e.is_active === r.is_active &&
                            e.is_controllable === r.is_controllable &&
                            e.is_observable === r.is_observable &&
                            e.local === r.local &&
                            e.name === r.name &&
                            e.type === r.type &&
                            e.version === r.version &&
                            e.volume === r.volume)
                    );
                }
                function areDeviceListsEqual(e, r) {
                    if (!Array.isArray(e) || !Array.isArray(r)) throw new TypeError("Invalid devices list.");
                    if (e.length !== r.length) return !1;
                    for (var i = 0, a = e.length; i < a; i++) if (!areDevicesEqual(e[i], r[i])) return !1;
                    return !0;
                }
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.areDeviceListsEqual = exports.areDevicesEqual = void 0), (exports.areDevicesEqual = areDevicesEqual), (exports.areDeviceListsEqual = areDeviceListsEqual);
            },
            {},
        ],
        80: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.interpolateUA = void 0);
                var parse_ua_1 = require("./parse_ua");
                function hasProperty(r, e) {
                    return e && e.hasOwnProperty(r);
                }
                function interpolateUA(r) {
                    if (!r) return r;
                    var e = parse_ua_1.parseUA(navigator.userAgent, navigator.platform);
                    return r.replace(/\{\{([^}]+?)\}\}/g, function (r, t) {
                        return hasProperty(t, e) ? e[t] : "";
                    });
                }
                exports.interpolateUA = interpolateUA;
            },
            { "./parse_ua": 81 },
        ],
        81: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.parseUA = void 0);
                var EDGE_UA_REGEXP = /(edge)[\s\/:]([\w\d\.]+)/,
                    UA_REGEXP = new RegExp("(opera|ie|firefox|chrome|trident|crios|version)[\\s/:]([\\w\\d\\.]+)?.*?(safari|(?:rv[\\s\\/:]|version[\\s\\/:])([\\w\\d\\.]+)|$)"),
                    cache = {};
                function parseUA(e, r) {
                    var o = e.toLowerCase(),
                        n = r ? r.toLowerCase() : "",
                        a = o + ":" + n;
                    if (a in cache) return cache[a];
                    var i = o.match(EDGE_UA_REGEXP),
                        s = o.match(UA_REGEXP) || [null, "unknown", 0],
                        t = i || s;
                    "trident" === t[1] ? ((t[1] = "ie"), t[4] && (t[2] = t[4])) : "crios" === t[1] && (t[1] = "chrome"),
                        "win" === (n = o.match(/ip(?:ad|od|hone)/) ? "ios" : (o.match(/(?:webos|android)/) || o.match(/mac|win|linux|cros/) || ["other"])[0]) && (n = "windows");
                    var c = "version" === t[1] ? t[3] : t[1],
                        d = "opera" === t[1] && t[4] ? t[4] : t[2],
                        w = { name: c ? c.toString() : "unknown", version: null === d ? "unknown" : d.toString(), platform: n };
                    return (cache[a] = w), w;
                }
                exports.parseUA = parseUA;
            },
            {},
        ],
        82: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.MetadataDecorator = void 0);
                var tslib_1 = require("tslib"),
                    URI = require("spotify-liburi"),
                    linkedlist_1 = require("@spotify-internal/linkedlist"),
                    DEFAULT_CACHE_SIZE = 20,
                    MetadataDecorator = (function () {
                        function t(t) {
                            (this._transport = t.transport), (this._metadataCache = new linkedlist_1.LRUCache(t.cacheSize || DEFAULT_CACHE_SIZE));
                        }
                        return (
                            (t.create = function (r) {
                                return new t(r);
                            }),
                            (t.prototype._decorateTrackWindow = function (t) {
                                var r,
                                    e,
                                    a,
                                    i = this._metadataCache,
                                    u = { current_track: null, next_tracks: [], previous_tracks: [] };
                                t.current_track && ((e = i && t.current_track && "uri" in t.current_track && i.get(t.current_track.uri)), (u.current_track = tslib_1.__assign({ uid: t.current_track.uid }, e || t.current_track))),
                                    (r = t.next_tracks.length);
                                for (; r--; ) (a = t.next_tracks[r]), (e = i && a && "uri" in a && i.get(a.uri)), (u.next_tracks[r] = tslib_1.__assign({ uid: a.uid }, e || a));
                                for (r = t.previous_tracks.length; r--; ) (a = t.previous_tracks[r]), (e = i && a && "uri" in a && i.get(a.uri)), (u.previous_tracks[r] = tslib_1.__assign({ uid: a.uid }, e || a));
                                return u;
                            }),
                            (t.prototype._buildTrackList = function (t) {
                                for (var r = [], e = {}, a = 0, i = tslib_1.__spreadArrays([t.current_track], t.next_tracks, t.previous_tracks); a < i.length; a++) {
                                    var u = i[a];
                                    u && !e[u.uri] && r.push(u.uri);
                                }
                                return r;
                            }),
                            (t.prototype._cacheMetadata = function (t) {
                                for (var r = [], e = [], a = this._metadataCache, i = 0, u = t.length; i < u; i++) {
                                    var n = t[i];
                                    if (!a.get(n)) {
                                        var o = URI.from(n);
                                        if (o) {
                                            var s = URI.hexToId(o.id);
                                            o.type === URI.Type.TRACK ? e.push(s) : o.type === URI.Type.EPISODE && r.push(s);
                                        }
                                    }
                                }
                                return r.length || e.length
                                    ? Promise.all([this._requestMultiData("episodes", r), this._requestMultiData("tracks", e)]).then(function (t) {
                                          var r = t[0],
                                              e = t[1];
                                          return !!r || !!e;
                                      })
                                    : Promise.resolve(!0);
                            }),
                            (t.prototype._requestMultiData = function (t, r) {
                                var e = this;
                                if (!r.length) return Promise.resolve(!1);
                                var a = this._metadataCache,
                                    i = ["https://@webapi/v1/", t, "?ids=", r.join(","), "&market=from_token"].join("");
                                return this._transport.request(i, { responseType: "json" }).then(function (r) {
                                    var i;
                                    if (200 !== r.status) return !1;
                                    var u = null === (i = r.body) || void 0 === i ? void 0 : i[t];
                                    if (!u) return !1;
                                    for (var n = u.length; n--; ) {
                                        var o = u[n];
                                        o &&
                                            ("episodes" === t ? (o = e._formatEpisodeData(o)) : ((o.track_type = "audio"), (o.media_type = "audio")),
                                            a && a.set(o.uri, o),
                                            a && o.linked_from && o.linked_from.uri && a.set(o.linked_from.uri, o));
                                    }
                                    return !0;
                                });
                            }),
                            (t.prototype._formatEpisodeData = function (t) {
                                var r = "audio" === t.show.media_type ? "audio" : "video";
                                return {
                                    id: t.id,
                                    uri: t.uri,
                                    type: "episode",
                                    media_type: r,
                                    track_type: t.show.media_type,
                                    name: t.name,
                                    artists: [{ uri: t.show.uri, name: t.show.publisher }],
                                    album: { uri: t.show.uri, name: t.show.name, images: t.images },
                                    duration_ms: t.duration_ms || 0,
                                    is_playable: !0,
                                };
                            }),
                            (t.prototype.formatLocalTrack = function (t, r) {
                                return t && t.type === URI.Type.LOCAL
                                    ? {
                                          uri: t.toURI(),
                                          type: "local",
                                          uid: r,
                                          media_type: "audio",
                                          track_type: "audio",
                                          name: t.track,
                                          artists: [{ uri: URI.localArtistURI(t.artist).toURI(), name: t.artist }],
                                          album: { uri: URI.localAlbumURI(t.artist, t.album).toURI(), name: t.album, images: [{ url: "" }] },
                                          duration_ms: t.duration ? 1e3 * t.duration : 0,
                                          is_playable: !1,
                                      }
                                    : null;
                            }),
                            (t.prototype.formatAd = function (t, r) {
                                if (!t || (t.type !== URI.Type.AD && t.type !== URI.Type.INTERRUPTION)) return null;
                                if (!r || !r.metadata) return null;
                                var e = r.metadata;
                                return {
                                    id: t.id,
                                    uri: t.toURI(),
                                    type: t.type,
                                    uid: r.uid,
                                    media_type: "audio",
                                    track_type: "audio",
                                    name: e.advertiser,
                                    artists: [{ uri: e.click_url, name: e.buttonMessage || e.advertiser }],
                                    album: { uri: e.click_url, name: e.advertiser, images: [{ url: e.image_url }] },
                                    duration_ms: parseInt(e.duration, 10),
                                    is_playable: !1,
                                };
                            }),
                            (t.prototype.decorateTrackWindow = function (t, r) {
                                var e = this,
                                    a = null != r ? r : this._buildTrackList(t);
                                return this._cacheMetadata(a).then(function (r) {
                                    return r ? e._decorateTrackWindow(t) : t;
                                });
                            }),
                            t
                        );
                    })();
                exports.MetadataDecorator = MetadataDecorator;
            },
            { "@spotify-internal/linkedlist": 137, "spotify-liburi": 188, tslib: 190 },
        ],
        83: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.parseDisallows = exports.parseRestrictions = void 0);
                var EXTRACT_RESTRICTION_NAME = /^disallow_([^]+)_reasons$/;
                function parseRestrictions(s, r) {
                    var e = {};
                    for (var a in s) s.hasOwnProperty(a) && "disallow_resuming_reasons" !== a && "disallow_pausing_reasons" !== a && (e[a] = s[a]);
                    return r ? (e.disallow_pausing_reasons = ["already_paused"]) : (e.disallow_resuming_reasons = ["not_paused"]), e;
                }
                function parseDisallows(s) {
                    var r = {};
                    for (var e in s)
                        if (s.hasOwnProperty(e)) {
                            var a = s[e],
                                o = !(!a || !a.length);
                            r[e.replace(EXTRACT_RESTRICTION_NAME, "$1")] = o;
                        }
                    return r;
                }
                (exports.parseRestrictions = parseRestrictions), (exports.parseDisallows = parseDisallows);
            },
            {},
        ],
        84: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.QueueManager = exports.queueTrackFromQid = exports.createContextTracks = void 0);
                var tslib_1 = require("tslib"),
                    emitter_1 = require("@spotify-internal/emitter"),
                    harmony_event_1 = require("../enums/harmony_event"),
                    errors_1 = require("../enums/errors"),
                    player_queue_1 = require("../error/player_queue"),
                    QID_SEPARATOR = ":::";
                function createQueueItems(e, r) {
                    var t, n, a, u;
                    void 0 === r && (r = { ignoreMetaForTrack: !1 });
                    var i = [],
                        o = [],
                        s = !1,
                        _ = !1;
                    if (!(null == e ? void 0 : e.length)) return { items: i, tracks: o, hasQueuedTracks: s };
                    for (var l = 0, c = e; l < c.length; l++) {
                        var d = c[l],
                            p = "spotify:delimiter" === d.uri || /^spotify:meta:/.test(d.uri) ? "meta" : "track",
                            v = "" + d.uid + QID_SEPARATOR + (null === (t = d.metadata) || void 0 === t ? void 0 : t.iteration),
                            y = {
                                type: p,
                                uri: d.uri,
                                uid: d.uid,
                                qid: v,
                                metadata: d.metadata || {},
                                hidden: "true" === (null === (n = d.metadata) || void 0 === n ? void 0 : n.hidden),
                                queued: "true" === (null === (a = d.metadata) || void 0 === a ? void 0 : a.is_queued),
                                provider: d.provider,
                                removed_reasons: d.removed,
                                $blck_rs: d.blocked,
                            };
                        y.queued && (s = !0), i.push(y), "meta" === y.type ? (_ = !0) : (!r.ignoreMetaForTrack && _) || "track" !== y.type || y.hidden || (null === (u = y.removed_reasons) || void 0 === u ? void 0 : u.length) || o.push(y);
                    }
                    return { items: i, tracks: o, hasQueuedTracks: s };
                }
                function createContextTracks(e, r) {
                    if ((void 0 === r && (r = {}), !Array.isArray(e))) throw new TypeError("Items is not an array.");
                    if (!e.length) return [];
                    for (var t = [], n = 0, a = e; n < a.length; n++) {
                        var u = a[n];
                        if (u) {
                            "string" == typeof u && (u = { type: "track", uri: u });
                            var i = { uri: u.uri, uid: u.uid, metadata: u.metadata || {}, removed: u.removed_reasons, blocked: u.$blck_rs, provider: u.provider };
                            (u.queued || r.queued) && ((i.metadata.is_queued = "true"), (i.provider = "queue")), (u.hidden || "meta" === u.type) && (i.metadata.hidden = "true"), t.push(i);
                        }
                    }
                    return t;
                }
                function queueTrackFromQid(e) {
                    var r = e.split(QID_SEPARATOR),
                        t = r[0],
                        n = r[1],
                        a = { type: "track", uid: t };
                    return n && (a.metadata = { iteration: n }), a;
                }
                (exports.createContextTracks = createContextTracks), (exports.queueTrackFromQid = queueTrackFromQid);
                var QueueManager = (function (e) {
                    function r(r) {
                        var t = e.call(this) || this;
                        return (
                            (t._hasInitialState = !1),
                            (t._reportInactiveQueues = !1),
                            (t._onlyLocalQueue = !1),
                            (t._currentPlayerState = null),
                            (t._currentInternalQueue = null),
                            (t._currentQueue = null),
                            (t._hasQueuedTracks = !1),
                            (t._connectClient = r.connectClient),
                            (t._runner =
                                r.runner ||
                                function (e) {
                                    return e();
                                }),
                            (t._parsePlayerState = t._parsePlayerState.bind(t)),
                            (t._onlyLocalQueue = !!r.onlyLocalQueue),
                            (t._reportInactiveQueues = !!r.reportInactiveQueues),
                            t._connectClient.on("player_state_changed", t._onPlayerStateChanged.bind(t)),
                            "initialContextPlayerState" in r && t._parsePlayerState(r.initialContextPlayerState),
                            t
                        );
                    }
                    return (
                        tslib_1.__extends(r, e),
                        (r.create = function (e) {
                            return new r(e);
                        }),
                        (r.prototype._onPlayerStateChanged = function (e) {
                            var r = e.data,
                                t = r.playerState,
                                n = r.orphaned,
                                a = r.isLocal;
                            (this._onlyLocalQueue && !a) || (!this._reportInactiveQueues && n) || this._parsePlayerState(t);
                        }),
                        (r.prototype._parsePlayerState = function (e) {
                            var r, t, n;
                            if (((this._hasInitialState = !0), (this._currentPlayerState = null != e ? e : null), e)) {
                                if (e.queue_revision === (null === (r = this._currentInternalQueue) || void 0 === r ? void 0 : r.revision)) return null;
                                this._hasQueuedTracks = !1;
                                var a = { ignoreMetaForTrack: null === (t = e.options) || void 0 === t ? void 0 : t.repeating_context },
                                    u = e.queue_revision,
                                    i = createQueueItems([e.track]).items[0],
                                    o = createQueueItems(e.next_tracks, a),
                                    s = createQueueItems(e.prev_tracks, a);
                                this._hasQueuedTracks = o.hasQueuedTracks;
                                var _ = { uri: e.context_uri, metadata: null !== (n = e.context_metadata) && void 0 !== n ? n : void 0 };
                                (this._currentInternalQueue = { revision: u, context: _, current_track: i, next_items: o.items, previous_items: s.items }),
                                    (this._currentQueue = { revision: u, context: _, current_track: i, next_tracks: o.tracks, previous_tracks: s.tracks });
                            } else (this._hasQueuedTracks = !1), (this._currentInternalQueue = null), (this._currentQueue = null);
                            return this.emit(harmony_event_1.HarmonyEvent.PLAYER_QUEUE_CHANGED, { internalPlayerQueue: this._currentInternalQueue, playerQueue: this._currentQueue }), this._currentInternalQueue;
                        }),
                        (r.prototype._setQueueNext = function (e, r) {
                            var t = this,
                                n = this._currentPlayerState;
                            if (!n) return Promise.reject(new player_queue_1.PlayerQueueError(errors_1.HarmonyErrors.QUEUE_MANAGER_NO_STATE, "Cannot perform operation; no current state."));
                            var a = { next_tracks: e, prev_tracks: n.prev_tracks, queue_revision: n.queue_revision };
                            return this._runner(function () {
                                return t._connectClient.setQueue(a, r);
                            }, r);
                        }),
                        (r.prototype._appendQueued = function (e, r) {
                            var t,
                                n,
                                a = this._currentPlayerState;
                            if (!a) return Promise.reject(new player_queue_1.PlayerQueueError(errors_1.HarmonyErrors.QUEUE_MANAGER_NO_STATE, "Cannot perform operation; no current state."));
                            var u = Array.from(null !== (t = a.next_tracks) && void 0 !== t ? t : []);
                            if (this._hasQueuedTracks) {
                                for (var i = !1, o = 0, s = u.length; o < s; o++) {
                                    if ("true" !== (null === (n = u[o].metadata) || void 0 === n ? void 0 : n.is_queued)) {
                                        u.splice.apply(u, tslib_1.__spreadArrays([o, 0], e)), (i = !0);
                                        break;
                                    }
                                }
                                i || u.push.apply(u, e);
                            } else u.unshift.apply(u, e);
                            return this._setQueueNext(u, r);
                        }),
                        (r.prototype.getInternalPlayerQueue = function () {
                            return this._hasInitialState ? Promise.resolve(this._currentInternalQueue) : this._connectClient.getContextPlayerState().then(this._parsePlayerState);
                        }),
                        (r.prototype.getPlayerQueue = function () {
                            var e = this;
                            return this._hasInitialState
                                ? Promise.resolve(this._currentQueue)
                                : this._connectClient
                                      .getContextPlayerState()
                                      .then(this._parsePlayerState)
                                      .then(function () {
                                          return e._currentQueue;
                                      });
                        }),
                        (r.prototype.setInternalPlayerQueue = function (e, r, t) {
                            var n = this;
                            if ((void 0 === t && (t = { ignoreRevision: !1 }), !this._currentPlayerState))
                                return Promise.reject(new player_queue_1.PlayerQueueError(errors_1.HarmonyErrors.QUEUE_MANAGER_NO_STATE, "Cannot perform operation; no current state."));
                            if (e.revision !== this._currentPlayerState.queue_revision && !t.ignoreRevision)
                                return Promise.reject(new player_queue_1.PlayerQueueError(errors_1.HarmonyErrors.QUEUE_OPERATION_STALE_REVISION, "Cannot perform operation; revision is stale."));
                            var a = { next_tracks: createContextTracks(e.next_items), prev_tracks: createContextTracks(e.previous_items), queue_revision: t.ignoreRevision ? void 0 : this._currentPlayerState.queue_revision };
                            return this._runner(function () {
                                return n._connectClient.setQueue(a, r);
                            }, r);
                        }),
                        (r.prototype.addToQueue = function (e, r) {
                            var t = this;
                            if (!Array.isArray(e)) return Promise.reject(new TypeError("Argument `items` must be an array."));
                            var n = createContextTracks(e, { queued: !0 });
                            return n.length
                                ? 1 === n.length
                                    ? this._runner(function () {
                                          return t._connectClient.addToQueue(n[0], r);
                                      }, r)
                                    : this._appendQueued(n, r)
                                : Promise.resolve(!1);
                        }),
                        (r.prototype.removeNext = function (e, r) {
                            var t,
                                n,
                                a,
                                u,
                                i = this._currentPlayerState;
                            if (!i) return Promise.reject(new player_queue_1.PlayerQueueError(errors_1.HarmonyErrors.QUEUE_MANAGER_NO_STATE, "Cannot perform operation; no current state."));
                            u = "string" == typeof e ? queueTrackFromQid(e) : e;
                            for (var o = Array.from(null !== (t = i.next_tracks) && void 0 !== t ? t : []), s = o.length, _ = 0; _ < s; _++) {
                                var l = o[_];
                                if (l.uid === u.uid && (null === (n = l.metadata) || void 0 === n ? void 0 : n.iteration) === (null === (a = u.metadata) || void 0 === a ? void 0 : a.iteration)) {
                                    o.splice(_, 1);
                                    break;
                                }
                            }
                            return o.length === s ? Promise.resolve(!1) : this._setQueueNext(o, r);
                        }),
                        r
                    );
                })(emitter_1.EventEmitter);
                exports.QueueManager = QueueManager;
            },
            { "../enums/errors": 95, "../enums/harmony_event": 96, "../error/player_queue": 102, "@spotify-internal/emitter": 71, tslib: 190 },
        ],
        85: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.HarmonyStreamer = void 0);
                var tslib_1 = require("tslib"),
                    playback_1 = require("@js-sdk/playback"),
                    emitter_1 = require("@spotify-internal/emitter"),
                    error_source_1 = require("../enums/error_source"),
                    client_1 = require("./tp_service/client"),
                    HarmonyStreamer = (function (e) {
                        function t(t) {
                            var r = e.call(this) || this;
                            return (
                                (r._client = t.client),
                                (r._initialVolume = t.initialVolume),
                                (r._listPlayer = t.listPlayer),
                                (r._playerPromise = t.playerPromise),
                                (r._playbackServiceClient = t.playbackServiceClient),
                                (r._playbackStateObserver = t.playbackStateObserver),
                                (r._stopOnBackground = t.stopOnBackground),
                                r._init(),
                                r
                            );
                        }
                        return (
                            tslib_1.__extends(t, e),
                            (t.prototype._init = function () {
                                var e,
                                    t,
                                    r,
                                    i,
                                    n = this;
                                this._client.addListeners((((e = {}).before_disconnect = this._onClientBeforeDisconnect.bind(this)), (e.before_offline_disconnect = this._onClientBeforeOfflineDisconnect.bind(this)), e));
                                var a = this._listPlayer;
                                a.addListeners(
                                    (((t = {})[playback_1.PlaybackEvent.LIST_PLAYER_CAPPED] = this._onCapped.bind(this)),
                                    (t[playback_1.PlaybackEvent.LIST_PLAYER_TRACK_ENDED] = this._onTrackEnded.bind(this)),
                                    (t[playback_1.PlaybackEvent.LIST_PLAYER_BEFORE_VOLUME_CHANGE] = this._onBeforeVolumeChange.bind(this)),
                                    (t[playback_1.PlaybackEvent.LIST_PLAYER_VOLUME_CHANGED] = this._onVolumeChanged.bind(this)),
                                    (t[playback_1.PlaybackEvent.LIST_PLAYER_ERROR] = this._onError.bind(this, error_source_1.HarmonyErrorSource.PLAYBACK)),
                                    t)
                                ),
                                    this.proxyEmitAll(
                                        a,
                                        (((r = {})[playback_1.PlaybackEvent.LIST_PLAYER_AUTOPLAY_FAILED] = "autoplay_failed"),
                                        (r[playback_1.PlaybackEvent.LIST_PLAYER_TRACK_LOADED] = "track_loaded"),
                                        (r[playback_1.PlaybackEvent.LIST_PLAYER_DURATION_CHANGED] = "duration_changed"),
                                        (r[playback_1.PlaybackEvent.LIST_PLAYER_POSITION_CHANGED] = "position_changed"),
                                        (r[playback_1.PlaybackEvent.LIST_PLAYER_PROGRESS] = "progress"),
                                        (r[playback_1.PlaybackEvent.LIST_PLAYER_BUFFER_STALLED] = "stalled"),
                                        (r[playback_1.PlaybackEvent.LIST_PLAYER_BUFFERING_END] = "buffering_end"),
                                        (r[playback_1.PlaybackEvent.LIST_PLAYER_BUFFERING_START] = "buffering_start"),
                                        (r[playback_1.PlaybackEvent.LIST_PLAYER_MAX_LIST_ERRORS_REACHED] = "max_list_errors_reached"),
                                        (r[playback_1.PlaybackEvent.LIST_PLAYER_VIDEO_ELEMENT_APPENDED] = "video_element_appended"),
                                        (r[playback_1.PlaybackEvent.LIST_PLAYER_VIDEO_ELEMENT_REMOVED] = "video_element_removed"),
                                        (r[playback_1.PlaybackEvent.LIST_PLAYER_LIST_ENDED] = "context_ended"),
                                        r)
                                    );
                                var o = this._playbackServiceClient;
                                o instanceof client_1.TrackPlaybackServiceClient &&
                                    (o.addListeners((((i = {}).logout = this._onTPAPILogout.bind(this)), (i.error = this._onError.bind(this, error_source_1.HarmonyErrorSource.TRACK_PLAYBACK)), i)),
                                    this.proxyEmit(o, "max_subscriptions_reached", "max_subscriptions_reached"),
                                    this.proxyEmit(o, "deregistered", "deregistered"),
                                    this.proxyEmit(o, "registered", "registered"),
                                    this.proxyEmit(o, "registration_aborted", "registration_aborted")),
                                    this.proxyEmit(this._playbackStateObserver, "state_changed", "state_changed"),
                                    this._stopOnBackground &&
                                        document.addEventListener &&
                                        document.addEventListener("visibilitychange", function () {
                                            document.hidden && n.stop() && n.emitSync("stopped_on_background", null);
                                        }),
                                    this._playerPromise.then(
                                        function (e) {
                                            e.setVolume(n._initialVolume), n.emit("player_initialization_done", null);
                                        },
                                        function (e) {
                                            n.emit("player_initialization_failed", { reason: e.message, error: e });
                                        }
                                    );
                            }),
                            (t.prototype._assertOperationSuccess = function (e) {
                                return e === playback_1.OperationResult.SUCCESS;
                            }),
                            (t.prototype._onTrackEnded = function () {
                                this.emit("track_ended", null);
                            }),
                            (t.prototype._onClientBeforeDisconnect = function (e) {
                                e.data.awaitPromise(this.deregister().catch(function () {}));
                            }),
                            (t.prototype._onClientBeforeOfflineDisconnect = function (e) {
                                e.data.awaitPromise(this.pause().catch(function () {}));
                            }),
                            (t.prototype._onBeforeVolumeChange = function (e) {
                                var t;
                                this.emitSync("before_volume_change", { volume: e.data.volume, remote: !!(null === (t = e.data.options) || void 0 === t ? void 0 : t.commandId) }).defaultPrevented && e.preventDefault();
                            }),
                            (t.prototype._onVolumeChanged = function (e) {
                                this.emit("volume_changed", { volume: e.data.volume, remote: !!e.data.commandId });
                            }),
                            (t.prototype._onCapped = function () {
                                this.emit("playback_capped", null);
                            }),
                            (t.prototype._onError = function (e, t) {
                                var r = t.data.error;
                                r &&
                                    (r && "registration" in r && r.registration && e === error_source_1.HarmonyErrorSource.TRACK_PLAYBACK && this.emit("registration_error", { error: r }),
                                    this.emit("error", { source: e, error: r }),
                                    this._client.notifyError(e, r));
                            }),
                            (t.prototype._onTPAPILogout = function () {
                                this.emit("logged_out", null);
                            }),
                            (t.prototype.stop = function () {
                                return this._playbackServiceClient.stop();
                            }),
                            (t.prototype.register = function () {
                                return this._playbackServiceClient.register();
                            }),
                            (t.prototype.deregister = function () {
                                return this._playbackServiceClient.deregister();
                            }),
                            (t.prototype.resume = function () {
                                return this._listPlayer.resume().then(this._assertOperationSuccess);
                            }),
                            (t.prototype.pause = function () {
                                return this._listPlayer.pause().then(this._assertOperationSuccess);
                            }),
                            (t.prototype.nextTrack = function (e) {
                                return void 0 === e && (e = playback_1.Reason.FORWARD_BUTTON), this._listPlayer.next(e).then(this._assertOperationSuccess);
                            }),
                            (t.prototype.canChangeTrack = function () {
                                return this._listPlayer.canChangeTrack();
                            }),
                            (t.prototype.previousTrack = function (e) {
                                return void 0 === e && (e = playback_1.Reason.BACK_BUTTON), this._listPlayer.previous(e).then(this._assertOperationSuccess);
                            }),
                            (t.prototype.togglePlay = function () {
                                return this._listPlayer.togglePlay().then(this._assertOperationSuccess);
                            }),
                            (t.prototype.setVolume = function (e) {
                                return this._listPlayer.setVolume(e).then(this._assertOperationSuccess);
                            }),
                            (t.prototype.getVolume = function () {
                                return this._listPlayer.getVolume();
                            }),
                            (t.prototype.seek = function (e) {
                                return this._listPlayer.seek(e).then(this._assertOperationSuccess);
                            }),
                            (t.prototype.getCurrentState = function () {
                                return this._playbackStateObserver.getCurrentState();
                            }),
                            (t.prototype.getVideoVariants = function () {
                                return this._playerPromise.then(function (e) {
                                    return e.getVideoVariants();
                                });
                            }),
                            (t.prototype.setPreferredBitrate = function (e) {
                                var t = this;
                                return this._playerPromise.then(function (r) {
                                    return r.setPreferredBitrate(e).then(t._assertOperationSuccess);
                                });
                            }),
                            (t.prototype.activateElement = function () {
                                return this._playerPromise.then(function (e) {
                                    return e.activateElement();
                                });
                            }),
                            (t.prototype.hideSubtitles = function () {
                                return this._listPlayer.hideSubtitles().then(this._assertOperationSuccess);
                            }),
                            (t.prototype.showSubtitles = function () {
                                return this._listPlayer.showSubtitles().then(this._assertOperationSuccess);
                            }),
                            (t.prototype.areSubtitlesShown = function () {
                                return this._listPlayer.areSubtitlesShown();
                            }),
                            (t.prototype.getSubtitleLanguages = function () {
                                return this._listPlayer.getSubtitleLanguages();
                            }),
                            (t.prototype.getActiveSubtitleLanguage = function () {
                                return this._listPlayer.getActiveSubtitleLanguage();
                            }),
                            (t.prototype.setSubtitleLanguage = function (e) {
                                return this._listPlayer.setSubtitleLanguage(e).then(this._assertOperationSuccess);
                            }),
                            (t.prototype.getMediaConfig = function () {
                                return this._listPlayer.getMediaConfig();
                            }),
                            t
                        );
                    })(emitter_1.EventEmitter);
                exports.HarmonyStreamer = HarmonyStreamer;
            },
            { "../enums/error_source": 94, "./tp_service/client": 86, "@js-sdk/playback": 65, "@spotify-internal/emitter": 71, tslib: 190 },
        ],
        86: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.TrackPlaybackServiceClient = void 0);
                var tslib_1 = require("tslib"),
                    debouncer_1 = require("@js-sdk/debouncer"),
                    emitter_1 = require("@spotify-internal/emitter"),
                    debug_tools_1 = require("@js-sdk/debug-tools"),
                    playback_1 = require("@js-sdk/playback"),
                    typedefs_1 = require("../../typedefs"),
                    errors_1 = require("../../enums/errors"),
                    client_1 = require("../../error/tp_service/client"),
                    version_1 = require("../../version"),
                    defer_1 = require("../helpers/defer"),
                    assert_1 = require("../../utils/assert"),
                    debugLogger = debug_tools_1.logging.forTag("tpapiclient"),
                    endSongLogger = debug_tools_1.logging.forTag("tpapiclient.endsong"),
                    endSongsLogger = debug_tools_1.logging.forTag("tpapiclient.endsongs"),
                    DEFAULT_STREAM_INTERVAL = 500,
                    DEALER_TRACK_PLAYBACK_FILTER = /^hm:\/\/track-playback\/v1/,
                    DEALER_PLAY_LOST_TOKEN_FILTER = /^hm:\/\/play-token\/lost/,
                    ENDPOINT = "http://@webgate/track-playback",
                    maybeRetry = function (t, e) {
                        var i = t.getStatusFamily();
                        return i === e.SERVER_ERROR || i === e.CONNECTION_ERROR;
                    },
                    LONG_BACKOFF = { condition: maybeRetry, maxRetries: 8 },
                    SHORT_BACKOFF = { condition: maybeRetry, maxRetries: 2 },
                    TrackPlaybackServiceClient = (function (t) {
                        function e(e) {
                            var i = t.call(this) || this;
                            return (
                                (i._deviceId = null),
                                (i._manifestFormats = []),
                                (i._sequenceNumber = 0),
                                (i._currentContext = null),
                                (i._loading = !1),
                                (i._lastSentStateUpdatePayload = null),
                                (i._totalStreamTime = 0),
                                (i._isSendingConflict = !1),
                                (i._queuedRejectedStates = []),
                                (i._isSendingUpdate = !1),
                                (i._queueSendUpdate = []),
                                (i._registered = !1),
                                (i._isDeregistering = !1),
                                (i._waitingForTrackingData = defer_1.defer()),
                                (i._lastProcessedStateId = null),
                                (i._limitStateUpdates = !1),
                                (i._lastUpdateStateTime = 0),
                                (i._initialUpdateSent = !1),
                                (i._startedPlayingUpdateSent = !1),
                                (i._nextFinalizedDataPayload = null),
                                (i._switchingContext = !1),
                                (i._connectionId = null),
                                (i._transport = e.transport),
                                (i._logger = e.logger),
                                (i._endpoint = e.endpoint || ENDPOINT),
                                (i._listPlayer = e.listPlayer),
                                (i._ListClass = e.ListClass),
                                (i._currentGaiaVolume = e.initialVolume * typedefs_1.GAIA_VOLUME),
                                (i._clientVersion = e.clientVersion),
                                (i._descriptorPromise = Promise.resolve(e.descriptor)),
                                i._init(),
                                (i._performCommand = i._performCommand.bind(i)),
                                (i._handleRegisterResponse = i._handleRegisterResponse.bind(i)),
                                (i._handleStateConflictResponse = i._handleStateConflictResponse.bind(i)),
                                (i.register = i.register.bind(i)),
                                (i._parseDescriptor = i._parseDescriptor.bind(i)),
                                (i._volumeDebouncer = new debouncer_1.Debouncer(i._sendVolume.bind(i), { blockInitial: !0 })),
                                i
                            );
                        }
                        return (
                            tslib_1.__extends(e, t),
                            (e.create = function (t) {
                                return new e(t);
                            }),
                            (e.prototype._init = function () {
                                var t,
                                    e = this;
                                (this._waitingForTrackingData = defer_1.defer()),
                                    this._waitingForTrackingData.resolve(!0),
                                    this._transport.on(this._transport.EVENT_CONNECTION_ID, this._onConnectionId.bind(this)),
                                    this._transport.matchMessages(DEALER_PLAY_LOST_TOKEN_FILTER, this._onPlayTokenLost.bind(this)),
                                    this._transport.matchMessages(DEALER_TRACK_PLAYBACK_FILTER, this._onTrackPlaybackMessage.bind(this)),
                                    this._listPlayer.addListeners(
                                        (((t = {})[playback_1.PlaybackEvent.LIST_PLAYER_CAPPED] = this._onCapped.bind(this)),
                                        (t[playback_1.PlaybackEvent.LIST_PLAYER_ERROR_SYNC] = this._onError.bind(this)),
                                        (t[playback_1.PlaybackEvent.LIST_PLAYER_BEFORE_NEXT] = this._onBeforeTrackChange.bind(this)),
                                        (t[playback_1.PlaybackEvent.LIST_PLAYER_BEFORE_PREVIOUS] = this._onBeforeTrackChange.bind(this)),
                                        (t[playback_1.PlaybackEvent.LIST_PLAYER_BEFORE_PLAYER_LOAD] = this._onBeforePlayerLoad.bind(this)),
                                        (t[playback_1.PlaybackEvent.LIST_PLAYER_PLAYER_LOAD] = this._onListPlayerLoad.bind(this)),
                                        (t[playback_1.PlaybackEvent.LIST_PLAYER_BEFORE_TRACK_LOAD] = this._onBeforeTrackLoad.bind(this)),
                                        (t[playback_1.PlaybackEvent.LIST_PLAYER_POSITION_CHANGED] = this._onPositionChanged.bind(this)),
                                        (t[playback_1.PlaybackEvent.LIST_PLAYER_DURATION_CHANGED] = this._onDurationChanged.bind(this)),
                                        (t[playback_1.PlaybackEvent.LIST_PLAYER_VOLUME_CHANGED] = this._onVolumeChanged.bind(this)),
                                        (t[playback_1.PlaybackEvent.LIST_PLAYER_PAUSED] = this._onPlayPause.bind(this, !0)),
                                        (t[playback_1.PlaybackEvent.LIST_PLAYER_PLAYING] = this._onPlayPause.bind(this, !1)),
                                        (t[playback_1.PlaybackEvent.LIST_PLAYER_PLAYED_THRESHOLD_REACHED] = this._onPlayThresholdReached.bind(this)),
                                        (t[playback_1.PlaybackEvent.LIST_PLAYER_PROGRESS] = this._onProgress.bind(this)),
                                        (t[playback_1.PlaybackEvent.LIST_PLAYER_TRACKING_DATA_CREATED] = this._onTrackDataCreatedEvent.bind(this)),
                                        (t[playback_1.PlaybackEvent.LIST_PLAYER_TRACKING_DATA_FINALIZED] = this._onTrackDataFinalizedEvent.bind(this)),
                                        t)
                                    ),
                                    this._descriptorPromise.then(function (t) {
                                        t.on("descriptor_changed", function () {
                                            e._parseDescriptor(t), e._updateDeviceInfo();
                                        });
                                    });
                            }),
                            (e.prototype._onBeforeTrackChange = function () {
                                var t, e;
                                if (!this._nextFinalizedDataPayload && !this._switchingContext) {
                                    var i = null !== (e = null === (t = this._currentContext) || void 0 === t ? void 0 : t.getStateRef()) && void 0 !== e ? e : null,
                                        r = this._generateStatePayload(i, "track_data_finalized");
                                    this._setSequenceNumber(r), (this._nextFinalizedDataPayload = r);
                                }
                            }),
                            (e.prototype._onBeforeTrackLoad = function (t) {
                                var e;
                                (this._loading = !0), (this._switchingContext = !1), (this._currentTrackDuration = void 0), (this._stateEventPositionOverride = null === (e = t.data.newTrack.options) || void 0 === e ? void 0 : e.position);
                            }),
                            (e.prototype._onBeforePlayerLoad = function (t) {
                                var e = this._currentContext;
                                if (e) {
                                    var i = e.getCurrentTrack();
                                    (this._currentTrackDuration = (null == i ? void 0 : i.metadata.duration) || 0), (this._currentMediaType = t.data.track.mediaType.toUpperCase());
                                    var r = t.data.options;
                                    e.setPaused(!r.autoplay), this._setCurrentTrackPosition((r && r.position) || 0), this._updateState("before_track_load"), (this._startedPlayingUpdateSent = !1), (this._initialUpdateSent = !1);
                                }
                            }),
                            (e.prototype._onCapped = function () {
                                this._listPlayer.clear(playback_1.Reason.CAPPED),
                                    (this._currentContext = null),
                                    this._updateState(playback_1.Reason.CAPPED),
                                    this._setCurrentTrackPosition(void 0),
                                    (this._lastProcessedStateId = null),
                                    this.emit("state_cleared", null);
                            }),
                            (e.prototype._onConnectionId = function (t) {
                                var e = this;
                                (this._connectionId = t.data.id),
                                    this._isDeregistering ||
                                        ((this._registered = !1),
                                        Promise.all([this._listPlayer.getVolume(), this._descriptorPromise.then(this._parseDescriptor)])
                                            .then(this.register, function (t) {
                                                debugLogger.info("Skipping registration due to error", t), e.emit("registration_aborted", { reason_error: t });
                                            })
                                            .catch(function () {}));
                            }),
                            (e.prototype._onDurationChanged = function (t) {
                                var e,
                                    i = null === (e = this._currentContext) || void 0 === e ? void 0 : e.getCurrentTrack();
                                (null == i ? void 0 : i.metadata.uri) === t.data.track.uri && ((this._currentTrackDuration = t.data.duration), this._emitStateChanged());
                            }),
                            (e.prototype._onError = function (t) {
                                "position" in t.data && (this._setCurrentTrackPosition(t.data.position), this._updateState("error"));
                            }),
                            (e.prototype._onPlayPause = function (t, e) {
                                var i = this._currentContext;
                                i &&
                                    (i.setPaused(t),
                                    "position" in e.data && this._setAllTrackPositions(e.data.position),
                                    e.data.track.stateId && this._shouldSendUpdateForEvent(e.data.track.stateId) ? this._updateState(t ? "pause" : "resume") : ((this._lastProcessedStateId = null), this._emitStateChanged()));
                            }),
                            (e.prototype._onPlayThresholdReached = function (t) {
                                (this._initialUpdateSent = !0), this._setAllTrackPositions(t.data.position), this._updateState("played_threshold_reached");
                            }),
                            (e.prototype._onPlayTokenLost = function () {
                                this._listPlayer.pause().catch(function () {});
                            }),
                            (e.prototype._onPositionChanged = function (t) {
                                this._loading ||
                                    (this._setCurrentTrackPosition(t.data.position),
                                    t.data.track && this._shouldSendUpdateForEvent(t.data.track.stateId) ? this._updateState("position_changed") : ((this._lastProcessedStateId = null), this._emitStateChanged()));
                            }),
                            (e.prototype._onProgress = function (t) {
                                var e;
                                if (!this._loading && this._currentContext) {
                                    this._setAllTrackPositions(t.data.position), !this._startedPlayingUpdateSent && t.data.played > 1e3 && ((this._startedPlayingUpdateSent = !0), this._updateState("started_playing"));
                                    var i = t.data.logData;
                                    if (i) {
                                        i.noLog || (this._totalStreamTime += null !== (e = t.data.interval) && void 0 !== e ? e : DEFAULT_STREAM_INTERVAL);
                                        var r = this._currentContext.getCurrentTrack(),
                                            a = r && "number" == typeof r.ms_playing_update_interval ? r.ms_playing_update_interval : null;
                                        this._initialUpdateSent && null !== a && a > 0 && Date.now() - this._lastUpdateStateTime > a && this._updateState("progress");
                                    }
                                }
                            }),
                            (e.prototype._onTrackDataCreatedEvent = function () {
                                this._waitingForTrackingData = defer_1.defer();
                            }),
                            (e.prototype._onTrackDataFinalizedEvent = function (t) {
                                var e = this._nextFinalizedDataPayload;
                                e && ((e.playback_stats = t.data.playbackStats), this._updateState("track_data_finalized", e)),
                                    (this._nextFinalizedDataPayload = null),
                                    this._waitingForTrackingData && this._waitingForTrackingData.resolve(!0);
                            }),
                            (e.prototype._onListPlayerLoad = function (t) {
                                this._loading = !1;
                                var e = this._currentContext;
                                e && (e.setPaused(!t.data.autoplay), this._setCurrentTrackPosition(t.data.position || 0));
                            }),
                            (e.prototype._onTrackPlaybackMessage = function (t) {
                                var e = t.payloads;
                                Array.isArray(e) && e.length && this._performCommand(e[0]);
                            }),
                            (e.prototype._onVolumeChanged = function (t) {
                                var e;
                                if (((this._currentGaiaVolume = t.data.volume * typedefs_1.GAIA_VOLUME), this._registered)) {
                                    var i = null !== (e = t.data.commandId) && void 0 !== e ? e : "",
                                        r = { seq_num: void 0, volume: this._currentGaiaVolume, command_id: i };
                                    this._volumeDebouncer.async(r);
                                }
                            }),
                            (e.prototype._clearSessionData = function () {
                                (this._connectionId = null),
                                    (this._sequenceNumber = 0),
                                    (this._currentContext = null),
                                    (this._lastSentStateUpdatePayload = null),
                                    (this._totalStreamTime = 0),
                                    (this._isSendingConflict = !1),
                                    (this._isSendingUpdate = !1),
                                    (this._queueSendUpdate = []),
                                    (this._previousTrackPosition = void 0),
                                    (this._currentTrackPosition = void 0),
                                    (this._currentTrackDuration = void 0),
                                    (this._currentMediaType = void 0),
                                    (this._lastProcessedStateId = null),
                                    this.emit("state_cleared", null);
                            }),
                            (e.prototype._createStateRef = function (t, e) {
                                if (!e) return null;
                                var i = t.states[e.state_index];
                                if (!i) throw new client_1.TrackPlayerAPIClientError(errors_1.HarmonyErrors.TP_CANNOT_CREATE_STATE_REF, "Invalid state reference.");
                                return { state_machine_id: t.state_machine_id, state_id: i.state_id, paused: e.paused };
                            }),
                            (e.prototype._deregisterFromService = function (t) {
                                var e = this,
                                    i = null,
                                    r = this._currentContext;
                                r && (t && (r.setPaused(!t.playing), this._setAllTrackPositions(t.position)), (i = r.getStateRef()));
                                var a = this._generateStatePayload(i, "deregister");
                                this._setSequenceNumber(a);
                                var n = this._endpoint + "/v1/devices/" + this._deviceId;
                                return this._transport.request(n, { authorize: !0, method: "DELETE", payload: JSON.stringify(a), responseType: "json", retry: SHORT_BACKOFF }).then(function (t) {
                                    if (200 !== t.status && 204 !== t.status) return (e._registered = !0), !1;
                                    var i = t.body;
                                    return i && (i.endsong && endSongLogger.log(i.endsong), i.endsongs && endSongsLogger.log(i.endsongs)), e._clearSessionData(), e.emit("deregistered", null), !0;
                                });
                            }),
                            (e.prototype._emitError = function (t, e) {
                                void 0 === e && (e = {}),
                                    this._logger
                                        .logJSSDKError({ source: "tpapi-client", source_version: version_1.default.tagged, type: t.code, message: t && t.message, stack: t && t.stack, json_data: e, json_data_version: "1.0.0" }, "object")
                                        .catch(function (t) {
                                            debugLogger.error("Track-Playback Logging Error", t);
                                        }),
                                    this.emit("error", { error: t, data: e });
                            }),
                            (e.prototype._emitStateChanged = function () {
                                var t = this._currentContext;
                                if (t) {
                                    var e = this._currentTrackPosition || 0;
                                    void 0 !== this._stateEventPositionOverride && ((e = this._stateEventPositionOverride), (this._stateEventPositionOverride = void 0)),
                                        this.emit("state_changed", { position: e, stateMachine: t.getStateMachine(), stateRef: t.getInternalStateRef(), duration: this._currentTrackDuration || 0, paused: t.isPaused() });
                                }
                            }),
                            (e.prototype._generateStatePayload = function (t, e) {
                                return {
                                    seq_num: void 0,
                                    seq_nums: void 0,
                                    state_ref: t,
                                    sub_state: {
                                        playback_speed: t && !t.paused ? 1 : 0,
                                        position: this._currentTrackPosition,
                                        duration: this._currentTrackDuration || void 0,
                                        stream_time: this._totalStreamTime,
                                        media_type: this._currentMediaType,
                                    },
                                    previous_position: this._previousTrackPosition,
                                    playback_stats: void 0,
                                    rejected_state_refs: void 0,
                                    debug_source: e,
                                };
                            }),
                            (e.prototype._handleRegisterResponse = function (t) {
                                var e;
                                if (429 === t.status)
                                    return (
                                        ((e = client_1.TrackPlayerAPIClientError.fatal(errors_1.HarmonyErrors.TP_MAX_SUBSCRIPTIONS_REACHED, "Max connections reached")).maxedSubscriptions = !0),
                                        (e.status = t.status),
                                        this.emit("max_subscriptions_reached", { error: e }),
                                        Promise.reject(e)
                                    );
                                if (
                                    (403 === t.status && t.body && "PREMIUM_REQUIRED" === t.body.error_type
                                        ? (e = client_1.TrackPlayerAPIClientError.fatal(errors_1.HarmonyErrors.TP_REGISTRATION_FAILED_NON_PREMIUM, "Cannot register to Track Playback with non-premium user."))
                                        : 200 !== t.status
                                        ? (e = client_1.TrackPlayerAPIClientError.fatal(errors_1.HarmonyErrors.TP_REGISTRATION_FAILED_WITH_STATUS, "track-playback service responded with status " + t.status + " when registering device"))
                                        : t.body || (e = client_1.TrackPlayerAPIClientError.fatal(errors_1.HarmonyErrors.TP_NO_RESPONSE_BODY, "Unexpected empty response body from registration request.")),
                                    e)
                                )
                                    return (e.status = t.status), Promise.reject(e);
                                var i = t.body;
                                return (
                                    i.endsong && endSongLogger.log(i.endsong),
                                    i.endsongs && endSongsLogger.log(i.endsongs),
                                    (this._sequenceNumber = i.initial_seq_num),
                                    (this._registered = !0),
                                    this.emit("registered", { deviceId: this._deviceId }),
                                    Promise.resolve(!0)
                                );
                            }),
                            (e.prototype._handleStateConflictResponse = function (t) {
                                var e;
                                if (t.status >= 200 && t.status < 300) {
                                    var i = null === (e = t.body) || void 0 === e ? void 0 : e.commands;
                                    if (!i || !i.length) return;
                                    for (var r = 0, a = i.length; r < a; r++) this._performCommand(i[r]);
                                } else {
                                    var n = new client_1.TrackPlayerAPIClientError(errors_1.HarmonyErrors.TP_CONFLICT_REQUEST_FAILED_WITH_STATUS, "Track-Playback service responded with " + t.status);
                                    (n.status = t.status), this._emitError(n);
                                }
                            }),
                            (e.prototype._handleStateUpdateResponse = function (t, e) {
                                var i;
                                if (200 !== e.status)
                                    return ((i = new client_1.TrackPlayerAPIClientError(errors_1.HarmonyErrors.TP_PARSE_STATE_UPDATE_FAILED_WITH_STATUS, "Service responded with status " + e.status)).status = e.status), Promise.reject(i);
                                if (!e.body)
                                    return (
                                        ((i = new client_1.TrackPlayerAPIClientError(errors_1.HarmonyErrors.TP_UPDATE_REQUEST_EMPTY_RESPONSE, "Unexpected empty response body from state update request.")).status = e.status),
                                        Promise.reject(i)
                                    );
                                var r = e.body;
                                r.endsong && endSongLogger.log(r.endsong), r.endsongs && endSongsLogger.log(r.endsongs);
                                var a = this._currentContext;
                                if (!a) return Promise.resolve();
                                var n = r.state_machine,
                                    s = r.updated_state_ref;
                                return this._isCurrentStateRef(t) ? (a.setStateMachine(n), a.setCurrentState(s), this._emitStateChanged(), Promise.resolve()) : Promise.resolve();
                            }),
                            (e.prototype._isCurrentStateRef = function (t) {
                                var e = this._currentContext ? this._currentContext.getStateRef() : null;
                                return (!e && !t) || (!(!e || !t) && e.state_machine_id === t.state_machine_id && e.state_id === t.state_id && e.paused === t.paused);
                            }),
                            (e.prototype._logUnsentStateUpdate = function (t) {
                                debugLogger.info("Unsent state update.", t),
                                    this._logger
                                        .logClientEvent({ source: "tpapi-client", source_version: version_1.default.tagged, source_vendor: "spotify", event: "unsent-state-update", event_version: "1.0.0", json_data: t }, "object")
                                        .catch(function (t) {
                                            debugLogger.error("Track-Playback Logging Error", t);
                                        });
                            }),
                            (e.prototype._logout = function () {
                                var t = this;
                                this._listPlayer.pause().catch(function () {}),
                                    this.emit("state_cleared", null),
                                    this.deregister().then(function (e) {
                                        (t._currentContext = null), t._setCurrentTrackPosition(void 0), e && t.emit("logout", null);
                                    });
                            }),
                            (e.prototype._parseDescriptor = function (t) {
                                return (this._deviceId = t.getId()), (this._deviceInfo = t.toTrackPlaybackDeviceInfo()), (this._manifestFormats = t.getManifestFormats()), !0;
                            }),
                            (e.prototype._performCommand = function (t) {
                                switch (t.type) {
                                    case "set_volume":
                                        this._setVolume(t);
                                        break;
                                    case "log_out":
                                        this._logout();
                                        break;
                                    case "replace_state":
                                        this._replaceState(t);
                                        break;
                                    case "ping":
                                        this._updateState("ping");
                                        break;
                                    default:
                                        this._emitError(new client_1.TrackPlayerAPIClientError(errors_1.HarmonyErrors.TP_UNKNOWN_COMMAND, "Received unknown command."), { command: t });
                                }
                            }),
                            (e.prototype._rejectState = function (t) {
                                var e = this,
                                    i = this._queuedRejectedStates;
                                if ((void 0 !== t && i.push(t), this._registered && !this._isSendingConflict && i.length)) {
                                    this._isSendingConflict = !0;
                                    var r = i.splice(0, 5),
                                        a = this._currentContext ? this._currentContext.getStateRef() : null,
                                        n = this._generateStatePayload(a);
                                    (n.rejected_state_refs = r), this._setSequenceNumbers(n, r.length);
                                    var s = function () {
                                            (e._isSendingConflict = !1), e._rejectState();
                                        },
                                        o = this._endpoint + "/v1/devices/" + this._deviceId + "/state_conflict";
                                    this._transport
                                        .request(o, { authorize: !0, method: "POST", headers: { "Content-Type": "application/json" }, responseType: "json", payload: JSON.stringify(n), retry: SHORT_BACKOFF })
                                        .then(this._handleStateConflictResponse)
                                        .then(s, s);
                                }
                            }),
                            (e.prototype._replaceState = function (t) {
                                var e,
                                    i,
                                    r,
                                    a = this._listPlayer,
                                    n = t.state_machine,
                                    s = t.state_ref,
                                    o = this._createStateRef(n, s);
                                if (this._isCurrentStateRef(t.prev_state_ref))
                                    if (s) {
                                        var _ = null !== (i = null === (e = this._currentContext) || void 0 === e ? void 0 : e.getStateRef()) && void 0 !== i ? i : null;
                                        if ((assert_1.assert(null !== o, "New state reference is null"), this._currentContext && (null == _ ? void 0 : _.state_id) === o.state_id)) {
                                            var d = this._currentContext;
                                            d.setStateMachine(n), d.setCurrentState(s);
                                            var c = !1;
                                            d.isPaused() !== s.paused && (c = !0), s.paused ? (d.setPaused(!0), a.pause()) : (d.setPaused(!1), a.resume());
                                            var l = parseInt(t.seek_to, 10);
                                            d.allowSeeking() && !isNaN(l) && (a.seek(l), this._setCurrentTrackPosition(l), (c = !0)),
                                                c ? this._emitStateChanged() : ((this._lastProcessedStateId = null), this._updateState("modify_current_state"));
                                        } else {
                                            (this._lastProcessedStateId = null !== (r = o.state_id) && void 0 !== r ? r : null), this._currentContext && this._onBeforeTrackChange();
                                            var u = this._ListClass.create("spotify:app:jsspeaker", this._manifestFormats);
                                            u.setStateMachine(n), u.startAtState(s), this._deviceId && u.setDeviceId(this._deviceId), (this._currentContext = u);
                                            var h = t.seek_to || 0;
                                            u.setInitialPosition(h), (this._loading = !0), (this._switchingContext = !0), a.play(u, { reason: playback_1.Reason.REMOTE });
                                        }
                                    } else this._clearContextAndState();
                                else this._rejectState(o);
                            }),
                            (e.prototype._clearContextAndState = function () {
                                var t = this._listPlayer;
                                t.pause().catch(function () {}),
                                    t.clear(playback_1.Reason.REMOTE),
                                    (this._currentContext = null),
                                    this._updateState("state_clear"),
                                    this._setAllTrackPositions(void 0),
                                    (this._lastProcessedStateId = null),
                                    this.emit("state_cleared", null),
                                    (this._loading = !0);
                            }),
                            (e.prototype._sendDevicesRequest = function (t, e) {
                                var i = this._endpoint + "/v1/devices";
                                return (
                                    "PUT" === t && (i = i + "/" + this._deviceId),
                                    this._transport.request(i, { authorize: !0, method: t || "POST", headers: { "Content-Type": "application/json" }, responseType: "json", payload: JSON.stringify(e), retry: LONG_BACKOFF })
                                );
                            }),
                            (e.prototype._sendVolume = function (t) {
                                var e = this._endpoint + "/v1/devices/" + this._deviceId + "/volume";
                                return this._setSequenceNumber(t), this._transport.request(e, { authorize: !0, method: "PUT", headers: { "Content-Type": "application/json" }, payload: JSON.stringify(t) });
                            }),
                            (e.prototype._setAllTrackPositions = function (t) {
                                (this._previousTrackPosition = t), (this._currentTrackPosition = t);
                            }),
                            (e.prototype._setCurrentTrackPosition = function (t) {
                                (this._previousTrackPosition = this._currentTrackPosition), (this._currentTrackPosition = t);
                            }),
                            (e.prototype._setSequenceNumber = function (t) {
                                return void 0 === t.seq_num && (t.seq_num = ++this._sequenceNumber), t;
                            }),
                            (e.prototype._setSequenceNumbers = function (t, e) {
                                t.seq_nums = [];
                                for (var i = 0; i < e; i++) t.seq_nums.push(++this._sequenceNumber);
                                return t;
                            }),
                            (e.prototype._setVolume = function (t) {
                                var e,
                                    i = t.volume / typedefs_1.GAIA_VOLUME;
                                this._listPlayer.setVolume(i, null !== (e = t.command_id) && void 0 !== e ? e : "tpcommand-" + Date.now());
                            }),
                            (e.prototype._shouldSendUpdateForEvent = function (t) {
                                return !(!t || t === this._lastProcessedStateId);
                            }),
                            (e.prototype._updateDeviceInfo = function () {
                                var t = this;
                                this._registered &&
                                    this._deviceInfo &&
                                    this._sendDevicesRequest("PUT", this._deviceInfo).then(function (e) {
                                        204 === e.status && t.emit("registration_updated", null);
                                    });
                            }),
                            (e.prototype._updateState = function (t, e) {
                                var i,
                                    r,
                                    a,
                                    n,
                                    s = this;
                                if (this._registered)
                                    if (
                                        (e
                                            ? ((a = e.state_ref), (n = e))
                                            : ((a = null !== (r = null === (i = this._currentContext) || void 0 === i ? void 0 : i.getStateRef()) && void 0 !== r ? r : null), (n = this._generateStatePayload(a, t))),
                                        this._wasStatePayloadSentRecently(n))
                                    ) {
                                        if ((this._emitStateChanged(), this._isSendingUpdate && this._limitStateUpdates)) return this._logUnsentStateUpdate(n), void this._queueSendUpdate.push(t);
                                        (this._isSendingUpdate = !0), (this._queueSendUpdate = []), this._setSequenceNumber(n), (this._lastSentStateUpdatePayload = n);
                                        var o = function () {
                                                (s._isSendingUpdate = !1), s._queueSendUpdate.length && s._updateState(s._queueSendUpdate.join(",")), debugLogger.info("State update sent.", t, n);
                                            },
                                            _ = this._endpoint + "/v1/devices/" + this._deviceId + "/state";
                                        (this._lastUpdateStateTime = Date.now()),
                                            this._transport
                                                .request(_, { authorize: !0, method: "PUT", headers: { "Content-Type": "application/json" }, responseType: "json", payload: JSON.stringify(n), retry: LONG_BACKOFF })
                                                .then(this._handleStateUpdateResponse.bind(this, a))
                                                .then(o, function (t) {
                                                    s._emitError(t), o();
                                                });
                                    } else debugLogger.info("State update ignored (duplicate).", n);
                            }),
                            (e.prototype._wasStatePayloadSentRecently = function (t) {
                                var e = this._lastSentStateUpdatePayload;
                                if (!e || !e.state_ref || !t.state_ref) return !0;
                                var i = t.state_ref,
                                    r = e.state_ref;
                                if (i.paused !== r.paused || i.state_id !== r.state_id || i.state_machine_id !== r.state_machine_id) return !0;
                                var a = t.sub_state,
                                    n = e.sub_state;
                                return a.playback_speed !== n.playback_speed || a.position !== n.position || a.duration !== n.duration || t.previous_position !== e.previous_position;
                            }),
                            (e.prototype.stop = function () {
                                return !(!this._registered || !this._currentContext) && (this._clearContextAndState(), !0);
                            }),
                            (e.prototype.deregister = function () {
                                var t = this;
                                return this._registered
                                    ? ((this._isDeregistering = !0),
                                      (this._registered = !1),
                                      this._listPlayer.getPlayerState().then(
                                          function (e) {
                                              return Promise.all([t._deregisterFromService(e), t._waitingForTrackingData.promise, t._listPlayer.stop().catch(function () {})]).then(function (e) {
                                                  var i = e[0];
                                                  return (t._isDeregistering = !1), i;
                                              });
                                          },
                                          function () {
                                              return (t._isDeregistering = !1), (t._registered = !0), !1;
                                          }
                                      ))
                                    : Promise.resolve(!1);
                            }),
                            (e.prototype.register = function () {
                                var t,
                                    e = this;
                                if (this._registered) return Promise.resolve(!1);
                                if (!this._deviceInfo) return Promise.reject(new Error("Need DeviceInfo for device registration."));
                                if (!this._connectionId) return Promise.reject(new Error("Need connection-id for device registration"));
                                var i = this._currentContext;
                                return (
                                    i && ((t = this._generateStatePayload(i.getStateRef(), "register")), this._setSequenceNumber(t)),
                                    this._sendDevicesRequest("POST", { device: this._deviceInfo, connection_id: this._connectionId, client_version: this._clientVersion, previous_session_state: t, volume: this._currentGaiaVolume })
                                        .then(this._handleRegisterResponse)
                                        .catch(function (t) {
                                            return t && !t.maxedSubscriptions && ((t.registration = !0), e._emitError(t)), !1;
                                        })
                                );
                            }),
                            e
                        );
                    })(emitter_1.EventEmitter);
                exports.TrackPlaybackServiceClient = TrackPlaybackServiceClient;
            },
            {
                "../../enums/errors": 95,
                "../../error/tp_service/client": 103,
                "../../typedefs": 106,
                "../../utils/assert": 107,
                "../../version": 110,
                "../helpers/defer": 78,
                "@js-sdk/debouncer": 6,
                "@js-sdk/debug-tools": 11,
                "@js-sdk/playback": 65,
                "@spotify-internal/emitter": 71,
                tslib: 190,
            },
        ],
        87: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.TrackPlayerServiceContext = void 0);
                var playback_1 = require("@js-sdk/playback"),
                    errors_1 = require("../../enums/errors"),
                    client_1 = require("../../error/tp_service/client"),
                    resolve_manifest_file_1 = require("./resolve_manifest_file"),
                    TrackPlayerServiceContext = (function () {
                        function t(t, e) {
                            (this._stateMachine = null), (this._currentState = null), (this._currentStateIndex = null), (this._pausedState = !1), (this._initialPlaybackPosition = null), (this._uri = t), (this._manifestFormats = e);
                        }
                        return (
                            (t.create = function (e, r) {
                                return new t(e, r);
                            }),
                            (t.prototype.setPaused = function (t) {
                                this._pausedState = t;
                            }),
                            (t.prototype.isPaused = function () {
                                return this._currentStateIndex && this._currentStateIndex < 0 && this._currentState && this._currentState.transitions.advance ? !!this._currentState.transitions.advance.paused : this._pausedState;
                            }),
                            (t.prototype.setInitialPosition = function (t) {
                                this._initialPlaybackPosition = t;
                            }),
                            (t.prototype.setStateMachine = function (t) {
                                this._stateMachine = t;
                            }),
                            (t.prototype.setDeviceId = function (t) {
                                this._deviceId = t;
                            }),
                            (t.prototype.startAtState = function (t) {
                                var e = this._stateMachine && this._stateMachine.states[t.state_index];
                                if (!e) throw new client_1.TrackPlayerAPIClientError(errors_1.HarmonyErrors.TP_MISSING_INITIAL_STATE, "Invalid state reference.");
                                var r = e.transitions;
                                (this._currentStateIndex = -1),
                                    (this._currentState = { decoy: !0, paused: !!t.paused, track: -1, state_id: null, transitions: { advance: t, show_next: r.show_next, show_prev: r.show_prev, skip_next: t, skip_prev: r.skip_prev } });
                            }),
                            (t.prototype.setCurrentState = function (t) {
                                var e = t.state_index;
                                (this._currentStateIndex = e), (this._currentState = this._stateMachine && this._stateMachine.states[e]);
                            }),
                            (t.prototype.getStateMachine = function () {
                                return this._stateMachine;
                            }),
                            (t.prototype.getInternalStateRef = function () {
                                var t = this._pausedState,
                                    e = this._currentStateIndex;
                                if (!e) return null;
                                if (e && e < 0) {
                                    var r = this._currentState && this._currentState.transitions.advance;
                                    r && ((e = r.state_index), (t = !!r.paused));
                                }
                                return { paused: t, state_index: e };
                            }),
                            (t.prototype.getStateRef = function () {
                                var t,
                                    e,
                                    r = this._stateMachine;
                                if (!r || null === this._currentStateIndex) return null;
                                if (this._currentStateIndex < 0) {
                                    var a = this._currentState && this._currentState.transitions.advance;
                                    a && ((t = r.states[a.state_index]), (e = a.paused));
                                } else (t = r.states[this._currentStateIndex]), (e = this._pausedState);
                                return t ? { state_machine_id: r.state_machine_id, state_id: t.state_id, paused: !!e } : null;
                            }),
                            (t.prototype.getCurrentTrack = function () {
                                var t,
                                    e = this._stateMachine;
                                if (!e || null === this._currentStateIndex) return null;
                                if (this._currentStateIndex < 0) {
                                    var r = this._currentState && this._currentState.transitions.advance;
                                    r && (t = e.states[r.state_index]);
                                } else t = e.states[this._currentStateIndex];
                                return t ? e.tracks[t.track] : null;
                            }),
                            (t.prototype.startAt = function () {
                                return Promise.resolve(playback_1.OperationResult.SUCCESS);
                            }),
                            (t.prototype.setShuffle = function () {
                                return Promise.resolve(playback_1.OperationResult.SUCCESS);
                            }),
                            (t.prototype.setRepeatMode = function () {
                                return Promise.resolve(playback_1.OperationResult.SUCCESS);
                            }),
                            (t.prototype.next = function (t) {
                                var e = this._currentState,
                                    r = null;
                                if (e) {
                                    var a = e.transitions;
                                    switch (t.reason) {
                                        case playback_1.Reason.FORWARD_BUTTON:
                                            "skip_next" in a && (r = a.skip_next);
                                            break;
                                        default:
                                            "advance" in a && (r = a.advance);
                                    }
                                }
                                return this._transitionTo(t, r, !1);
                            }),
                            (t.prototype.peekNext = function (t) {
                                var e = this._currentState,
                                    r = null;
                                if (e) {
                                    var a = e.transitions;
                                    switch (t.reason) {
                                        case playback_1.Reason.FORWARD_BUTTON:
                                            "skip_next" in a && (r = a.skip_next);
                                            break;
                                        default:
                                            "advance" in a && (r = a.advance);
                                    }
                                }
                                return this._transitionTo(t, r, !0);
                            }),
                            (t.prototype.previous = function (t) {
                                var e = this._currentState,
                                    r = null;
                                e && (r = e.transitions.skip_prev);
                                return this._transitionTo(t, r, !1);
                            }),
                            (t.prototype.allowSeeking = function () {
                                return !!this._currentState && !this._currentState.disallow_seeking;
                            }),
                            (t.prototype._transitionTo = function (t, e, r) {
                                void 0 === r && (r = !1);
                                var a = t.reason,
                                    i = t.listConstants;
                                if (!e) return Promise.resolve(i.FORBIDDEN);
                                var n = this._stateMachine;
                                if (!n) return Promise.resolve(i.NULL_VALUE);
                                var s = n.states[e.state_index];
                                if (!s) return Promise.resolve(i.NULL_VALUE);
                                var o = n.tracks[s.track];
                                if (!o || !o.metadata || !o.metadata.uri) return Promise.resolve(i.NULL_VALUE);
                                if (!this._currentState) return Promise.resolve(i.NULL_VALUE);
                                var u = this._currentState,
                                    _ = u.decoy ? !!u.paused : e.paused;
                                r || ((this._currentState = s), (this._currentStateIndex = e.state_index), (this._pausedState = !!_));
                                var c = 0;
                                r || null === this._initialPlaybackPosition ? "initial_playback_position" in s && (c = s.initial_playback_position || 0) : ((c = this._initialPlaybackPosition), (this._initialPlaybackPosition = null));
                                var l = resolve_manifest_file_1.resolveManifestFile(this._manifestFormats, o);
                                if (!l) return Promise.resolve(i.NULL_VALUE);
                                var p = this._uri;
                                o.metadata && o.metadata.context_uri && (p = o.metadata.context_uri);
                                var d = a,
                                    h = o.ms_played_until_update,
                                    v = {
                                        uri: l.uri,
                                        playableURI: l.uri,
                                        fileId: l.fileId,
                                        resolvedURL: l.resolvedURL,
                                        playable: l.playable,
                                        isAd: l.isAd,
                                        format: l.format,
                                        fileFormat: l.fileFormat,
                                        mediaType: l.mediaType,
                                        noManifest: l.noManifest,
                                        options: { position: c, paused: _, playedThreshold: h },
                                        logData: {
                                            noLog: !!l.noLog,
                                            noTSV: !!l.noTSV,
                                            noStats: !!l.noStats,
                                            deviceId: this._deviceId,
                                            playbackId: s.state_id ? s.state_id : void 0,
                                            reason: d,
                                            displayTrack: l.uri,
                                            playContext: p,
                                            impressionURL: l.impressionURL,
                                            impressionURLs: l.impressionURLs,
                                            format: { codec: l.format, bitrate: l.bitrate },
                                            uriType: l.uriType,
                                        },
                                        stateId: s.state_id ? s.state_id : void 0,
                                    };
                                return Promise.resolve(v);
                            }),
                            t
                        );
                    })();
                exports.TrackPlayerServiceContext = TrackPlayerServiceContext;
            },
            { "../../enums/errors": 95, "../../error/tp_service/client": 103, "./resolve_manifest_file": 89, "@js-sdk/playback": 65 },
        ],
        88: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.TPPlaybackStateObserver = void 0);
                var tslib_1 = require("tslib"),
                    URI = require("spotify-liburi"),
                    emitter_1 = require("@spotify-internal/emitter"),
                    debug_tools_1 = require("@js-sdk/debug-tools"),
                    repeat_mode_1 = require("../../enums/repeat_mode"),
                    playback_state_observer_1 = require("../playback_state_observer"),
                    debugLogger = debug_tools_1.logging.forTag("tp.stream.PlaybackStateObserver"),
                    TPPlaybackStateObserver = (function (t) {
                        function e(e, a) {
                            void 0 === a && (a = {});
                            var r = t.call(this) || this;
                            return (r._tpApiClient = e), (r._numPreviousTracks = a.numPrevious || 2), (r._numNextTracks = a.numNextTracks || 2), (r._state = null), r._init(), r;
                        }
                        return (
                            tslib_1.__extends(e, t),
                            (e.create = function (t, a) {
                                return new e(t, a);
                            }),
                            (e.prototype._init = function () {
                                this._tpApiClient.on("state_changed", this._onStateChanged.bind(this)), this._tpApiClient.on("state_cleared", this._onStateCleared.bind(this));
                            }),
                            (e.prototype._onStateChanged = function (t) {
                                var e,
                                    a,
                                    r = this,
                                    i = t.data,
                                    n = i.position,
                                    s = i.paused,
                                    o = i.stateMachine,
                                    _ = i.stateRef,
                                    u = (o && o.states) || [];
                                if (o && u.length && _) {
                                    var l = t.data.duration,
                                        d = Date.now(),
                                        p = u[_.state_index],
                                        c = playback_state_observer_1.parseRestrictions((p && p.restrictions) || {}, s),
                                        m = playback_state_observer_1.parseDisallows(c),
                                        f = {
                                            current_track: this._getTrackMetadata(o, p, l),
                                            next_tracks: this._getNextStates(p, u)
                                                .map(function (t) {
                                                    return r._getTrackMetadata(o, t, null);
                                                })
                                                .filter(function (t) {
                                                    return !!t;
                                                }),
                                            previous_tracks: this._getPreviousStates(p, u)
                                                .map(function (t) {
                                                    return r._getTrackMetadata(o, t, null);
                                                })
                                                .filter(function (t) {
                                                    return !!t;
                                                }),
                                        };
                                    l || (l = f.current_track && f.current_track.duration_ms ? f.current_track.duration_ms : 0);
                                    var h,
                                        g = o.tracks[p.track];
                                    (null === (a = null === (e = g.manifest) || void 0 === e ? void 0 : e.file_ids_mp4) || void 0 === a ? void 0 : a.length) > 0 && (h = g.manifest.file_ids_mp4[0].audio_quality);
                                    var v = this._getRepeatSetting(o),
                                        k = {
                                            context: { uri: null, metadata: {} },
                                            position: n,
                                            duration: l,
                                            paused: s,
                                            playback_quality: h,
                                            shuffle: this._getShuffleSetting(o),
                                            repeat_mode: v,
                                            track_window: f,
                                            timestamp: d,
                                            restrictions: c,
                                            disallows: m,
                                        };
                                    g && g.metadata && (g.metadata.context_uri && (k.context.uri = g.metadata.context_uri), g.metadata.context_description && (k.context.metadata.context_description = g.metadata.context_description)),
                                        (this._state = k),
                                        this.emit("state_changed", { state: k ? tslib_1.__assign({}, k) : null });
                                } else debugLogger.warn("_onStateChanged called with no current state", t);
                            }),
                            (e.prototype._onStateCleared = function () {
                                (this._state = null), this.emit("state_changed", { state: null });
                            }),
                            (e.prototype._getRepeatSetting = function (t) {
                                var e = t.attributes.options;
                                return e.repeating_track ? repeat_mode_1.RepeatMode.TRACK : e.repeating_context ? repeat_mode_1.RepeatMode.CONTEXT : repeat_mode_1.RepeatMode.OFF;
                            }),
                            (e.prototype._getShuffleSetting = function (t) {
                                return t.attributes.options.shuffling_context;
                            }),
                            (e.prototype._getNextStates = function (t, e) {
                                for (var a = this._numNextTracks, r = [], i = t; i && "show_next" in i.transitions && i.transitions.show_next; ) {
                                    var n = e[i.transitions.show_next.state_index];
                                    if ((r.push(n), (i = n), r.length >= a)) break;
                                }
                                return r;
                            }),
                            (e.prototype._getPreviousStates = function (t, e) {
                                for (var a = this._numPreviousTracks, r = [], i = t; i && "show_prev" in i.transitions && i.transitions.show_prev; ) {
                                    var n = e[i.transitions.show_prev.state_index];
                                    if ((r.unshift(n), (i = n), r.length >= a)) break;
                                }
                                return r;
                            }),
                            (e.prototype._getTrackMetadata = function (t, e, a) {
                                var r = t && t.tracks[e.track];
                                if (!r || !r.metadata) return null;
                                var i = r.metadata,
                                    n = r.manifest && "manifest_ids_video" in r.manifest,
                                    s = r.track_type.toLowerCase(),
                                    o = URI.from(i.uri),
                                    _ = i.linked_from_uri ? URI.from(i.linked_from_uri) : null;
                                return {
                                    id: o ? URI.hexToId(o.id) : null,
                                    uri: i.uri,
                                    type: o && o.type ? o.type : "unknown",
                                    uid: e.track_uid,
                                    linked_from: { uri: i.linked_from_uri || null, id: _ ? URI.hexToId(_.id) : null },
                                    media_type: n ? "video" : "audio",
                                    track_type: s,
                                    name: i.name,
                                    duration_ms: a || i.duration,
                                    artists: i.authors,
                                    album: { uri: i.group_uri, name: i.group_name, images: i.images },
                                    is_playable: !0,
                                };
                            }),
                            (e.prototype.getCurrentState = function () {
                                var t = this._state;
                                if (t && !t.paused) {
                                    var e = Date.now(),
                                        a = t.position + (e - t.timestamp);
                                    (t.position = a), (t.timestamp = e);
                                }
                                return Promise.resolve(this._state ? tslib_1.__assign({}, this._state) : null);
                            }),
                            e
                        );
                    })(emitter_1.EventEmitter);
                exports.TPPlaybackStateObserver = TPPlaybackStateObserver;
            },
            { "../../enums/repeat_mode": 99, "../playback_state_observer": 83, "@js-sdk/debug-tools": 11, "@spotify-internal/emitter": 71, "spotify-liburi": 188, tslib: 190 },
        ],
        89: [
            function (require, module, exports) {
                "use strict";
                var _a;
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.resolveManifestFile = void 0);
                var URI = require("spotify-liburi"),
                    playback_1 = require("@js-sdk/playback"),
                    manifest_format_1 = require("../../enums/manifest_format"),
                    HTTPS_EXP = /^https:\/\//,
                    FILE_ID_EXP = /^(.+?)\/([^./]+)(\.[^/]*)?$/,
                    _containerFormat =
                        (((_a = {})[manifest_format_1.ManifestFormat.FILE_URLS_MP3] = playback_1.MediaFormat.MP3),
                        (_a[manifest_format_1.ManifestFormat.FILE_URLS_EXTERNAL] = playback_1.MediaFormat.MP3),
                        (_a[manifest_format_1.ManifestFormat.FILE_IDS_MP4] = playback_1.MediaFormat.MP4),
                        (_a[manifest_format_1.ManifestFormat.FILE_IDS_MP4_DUAL] = playback_1.MediaFormat.MP4),
                        (_a[manifest_format_1.ManifestFormat.FILE_IDS_CBCS] = playback_1.MediaFormat.MP4_CBCS),
                        (_a[manifest_format_1.ManifestFormat.FILE_IDS_MP4FLAC] = playback_1.MediaFormat.MP4_FLAC),
                        (_a[manifest_format_1.ManifestFormat.MANIFEST_IDS_VIDEO] = playback_1.MediaFormat.MANIFEST_ID),
                        _a);
                function resolveManifestFile(a, e) {
                    for (var t = e.manifest, i = e.metadata.uri, r = URI.from(i), _ = !(!r || (r.type !== URI.Type.AD && r.type !== URI.Type.INTERRUPTION)), o = 0, f = a.length; o < f; o++) {
                        var s = a[o];
                        if (s in t) {
                            var m = t[s];
                            if (m.length) {
                                var n = m[0];
                                if (n.file_id || n.file_url) {
                                    var l = n.file_url,
                                        F = n.file_id || "";
                                    if (l && s === manifest_format_1.ManifestFormat.FILE_URLS_MP3 && _) {
                                        if ((F = l.replace(FILE_ID_EXP, "$2")) === l) continue;
                                        l = void 0;
                                    }
                                    if ((l && !HTTPS_EXP.test(l) && (l = void 0), F || l)) {
                                        var M = void 0;
                                        M = n.track_type ? n.track_type.toLowerCase() : s === manifest_format_1.ManifestFormat.MANIFEST_IDS_VIDEO ? "video" : "audio";
                                        var p = void 0;
                                        if (n.format) {
                                            var I = parseInt(n.format, 10);
                                            playback_1.AudioFileFormat[I] && (p = I);
                                        }
                                        return {
                                            uri: i,
                                            uriType: r && r.type ? r.type : void 0,
                                            fileId: F,
                                            resolvedURL: l,
                                            mediaType: M,
                                            format: _containerFormat[s],
                                            bitrate: n.bitrate || 128e3,
                                            fileFormat: null != p ? p : void 0,
                                            impressionURL: n.impression_url,
                                            impressionURLs: n.impression_urls,
                                            isAd: _,
                                            noLog: !1,
                                            noTSV: _,
                                            noStats: _,
                                            noManifest: !!n.file_url,
                                            playable: !0,
                                        };
                                    }
                                }
                            }
                        }
                    }
                    return null;
                }
                exports.resolveManifestFile = resolveManifestFile;
            },
            { "../../enums/manifest_format": 97, "@js-sdk/playback": 65, "spotify-liburi": 188 },
        ],
        90: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.createHarmonyClient = void 0);
                var client_1 = require("./_internal/client");
                function createHarmonyClient(e) {
                    return client_1.HarmonyClient.create(e);
                }
                exports.createHarmonyClient = createHarmonyClient;
            },
            { "./_internal/client": 72 },
        ],
        91: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.createControllerForClient = void 0);
                var server_time_1 = require("@spotify-internal/transport/es5/server_time"),
                    controller_1 = require("./_internal/controller"),
                    client_1 = require("./_internal/connect_service/client");
                function createControllerForClient(e, r) {
                    void 0 === r && (r = {});
                    var t = e.getPublicTransport(),
                        o = e.getVersionDescriptor().tagged,
                        i = client_1.PlayerAPIClient.create({ autoregister: !("autoregister" in r) || r.autoregister, descriptor: e.getClientDescriptor(), transport: t });
                    return controller_1.HarmonyController.create({
                        client: e,
                        playerClient: i,
                        version: o,
                        serverTime: server_time_1.ServerTime.create(t),
                        decorateTrackWindow: "boolean" != typeof r.decorateTrackWindow || r.decorateTrackWindow,
                        disableProgress: r.disableProgress,
                    });
                }
                exports.createControllerForClient = createControllerForClient;
            },
            { "./_internal/connect_service/client": 73, "./_internal/controller": 74, "@spotify-internal/transport/es5/server_time": 171 },
        ],
        92: [
            function (require, module, exports) {
                "use strict";
                var DeviceDeactivatedReason;
                Object.defineProperty(exports, "__esModule", { value: !0 }),
                    (exports.DeviceDeactivatedReason = void 0),
                    (function (e) {
                        (e.LOCAL_PLAYER_DISABLED = "local_player_disabled"), (e.STOPPED = "stopped"), (e.REMOTE_ACTIVATED = "remote_activated"), (e.UNKNOWN = "unknown");
                    })((DeviceDeactivatedReason = exports.DeviceDeactivatedReason || (exports.DeviceDeactivatedReason = {})));
            },
            {},
        ],
        93: [
            function (require, module, exports) {
                "use strict";
                var DeviceType;
                Object.defineProperty(exports, "__esModule", { value: !0 }),
                    (exports.DeviceType = void 0),
                    (function (e) {
                        (e.UNKNOWN = "unknown"),
                            (e.COMPUTER = "computer"),
                            (e.TABLET = "tablet"),
                            (e.SMARTPHONE = "smartphone"),
                            (e.SPEAKER = "speaker"),
                            (e.TV = "tv"),
                            (e.AVR = "avr"),
                            (e.STB = "stb"),
                            (e.AUDIO_DONGLE = "audio_dongle"),
                            (e.GAME_CONSOLE = "game_console"),
                            (e.CAST_VIDEO = "cast_video"),
                            (e.CAST_AUDIO = "cast_audio"),
                            (e.AUTOMOBILE = "automobile"),
                            (e.SMARTWATCH = "smartwatch"),
                            (e.CHROMEBOOK = "chromebook");
                    })((DeviceType = exports.DeviceType || (exports.DeviceType = {})));
            },
            {},
        ],
        94: [
            function (require, module, exports) {
                "use strict";
                var HarmonyErrorSource;
                Object.defineProperty(exports, "__esModule", { value: !0 }),
                    (exports.HarmonyErrorSource = void 0),
                    (function (r) {
                        (r.CONNECT_API = "connect-api"), (r.HARMONY = "harmony"), (r.PLAYBACK = "playback"), (r.TRACK_PLAYBACK = "track-playback"), (r.TRANSPORT = "transport");
                    })((HarmonyErrorSource = exports.HarmonyErrorSource || (exports.HarmonyErrorSource = {})));
            },
            {},
        ],
        95: [
            function (require, module, exports) {
                "use strict";
                var HarmonyErrors;
                Object.defineProperty(exports, "__esModule", { value: !0 }),
                    (exports.HarmonyErrors = void 0),
                    (function (_) {
                        (_.USER_INFO_REQUEST_EMPTY_RESPONSE = "USER_INFO_REQUEST_EMPTY_RESPONSE"),
                            (_.USER_INFO_REQUEST_FAILED_WITH_STATUS = "USER_INFO_REQUEST_FAILED_WITH_STATUS"),
                            (_.HARMONY_NO_TRACKS_LOADED = "HARMONY_NO_TRACKS_LOADED"),
                            (_.HARMONY_OPERATION_FORBIDDEN = "HARMONY_OPERATION_FORBIDDEN"),
                            (_.HARMONY_LOCAL_PLAYER_DISABLED = "HARMONY_LOCAL_PLAYER_DISABLED"),
                            (_.HARMONY_INVALID_DESCRIPTOR_ID = "HARMONY_INVALID_DESCRIPTOR_ID"),
                            (_.CONNECTAPI_CLIENT_INVALID_ARGUMENTS = "CONNECTAPI_CLIENT_INVALID_ARGUMENTS"),
                            (_.CONNECTAPI_CLIENT_NO_CONNECTION_ID = "CONNECT_API_CLIENT_NO_CONNECTION_ID"),
                            (_.CONNECTAPI_CLIENT_NO_DEVICE = "CONNECTAPI_CLIENT_NO_DEVICE"),
                            (_.CONNECTAPI_CLIENT_NO_SESSION_ID = "CONNECTAPI_CLIENT_NO_SESSION_ID"),
                            (_.CONNECTAPI_CLIENT_NO_STATE = "CONNECTAPI_CLIENT_NO_STATE"),
                            (_.CONNECTAPI_CLIENT_INVALID_POSITION = "CONNECT_API_CLIENT_INVALID_POSITION"),
                            (_.CONNECTAPI_CLIENT_INVALID_VOLUME = "CONNECT_API_CLIENT_INVALID_VOLUME"),
                            (_.CONNECTAPI_MAX_SUBSCRIPTIONS_REACHED = "CONNECTAPI_MAX_SUBSCRIPTIONS_REACHED"),
                            (_.CONNECTAPI_REGISTRATION_FAILED_WITH_STATUS = "CONNECTAPI_REGISTRATION_FAILED_WITH_STATUS"),
                            (_.CP_NO_DEVICE_DESCRIPTOR = "CP_NO_DEVICE_DESCRIPTOR"),
                            (_.CP_NO_CONNECTION_ID = "CP_NO_CONNECTION_ID"),
                            (_.CP_REGISTRATION_FAILED_WITH_STATUS = "CP_REGISTRATION_FAILED_WITH_STATUS"),
                            (_.CP_REQUEST_FAILED_WITH_STATUS = "CP_REQUEST_FAILED_WITH_STATUS"),
                            (_.CP_NO_DEVICE_ID = "CP_NO_DEVICE_ID"),
                            (_.CP_NO_RESPONSE_BODY = "CP_NO_RESPONSE_BODY"),
                            (_.CP_NO_TRACKING_DATA = "CP_NO_TRACKING_DATA"),
                            (_.QUEUE_MANAGER_NO_STATE = "QUEUE_MANAGER_NO_STATE"),
                            (_.QUEUE_OPERATION_STALE_REVISION = "QUEUE_OPERATION_STALE_REVISION"),
                            (_.TP_NO_RESPONSE_BODY = "TP_NO_RESPONSE_BODY"),
                            (_.TP_REGISTRATION_FAILED_NON_PREMIUM = "TP_REGISTRATION_FAILED_NON_PREMIUM"),
                            (_.TP_REGISTRATION_FAILED_WITH_STATUS = "TP_REGISTRATION_FAILED_WITH_STATUS"),
                            (_.TP_MAX_SUBSCRIPTIONS_REACHED = "TP_MAX_SUBSCRIPTIONS_REACHED"),
                            (_.TP_UPDATE_REQUEST_EMPTY_RESPONSE = "TP_UPDATE_REQUEST_EMPTY_RESPONSE"),
                            (_.TP_PARSE_STATE_UPDATE_FAILED_WITH_STATUS = "TP_PARSE_STATE_UPDATE_FAILED_WITH_STATUS"),
                            (_.TP_UNKNOWN_COMMAND = "TP_UNKNOWN_COMMAND"),
                            (_.TP_CANNOT_CREATE_STATE_REF = "TP_CANNOT_CREATE_STATE_REF"),
                            (_.TP_MISSING_INITIAL_STATE = "TP_MISSING_INITIAL_STATE"),
                            (_.TP_INVALID_STATE_REFERENCE = "TP_INVALID_STATE_REFERENCE"),
                            (_.TP_CONFLICT_REQUEST_FAILED_WITH_STATUS = "TP_CONFLICT_REQUEST_FAILED_WITH_STATUS");
                    })((HarmonyErrors = exports.HarmonyErrors || (exports.HarmonyErrors = {})));
            },
            {},
        ],
        96: [
            function (require, module, exports) {
                "use strict";
                var HarmonyEvent;
                Object.defineProperty(exports, "__esModule", { value: !0 }),
                    (exports.HarmonyEvent = void 0),
                    (function (e) {
                        (e.AUTHENTICATED = "authenticated"),
                            (e.AUTHENTICATION_ERROR = "authentication_error"),
                            (e.AUTOPLAY_FAILED = "autoplay_failed"),
                            (e.BEFORE_DISCONNECT = "before_disconnect"),
                            (e.BEFORE_VOLUME_CHANGE = "before_volume_change"),
                            (e.BUFFER_STALLED = "stalled"),
                            (e.BUFFERING_END = "buffering_end"),
                            (e.BUFFERING_START = "buffering_start"),
                            (e.CONNECTED = "connected"),
                            (e.CONNECTION_ERROR = "connection_error"),
                            (e.DEVICES_CHANGED = "devices_changed"),
                            (e.DEVICE_DEACTIVATED = "device_deactivated"),
                            (e.DEVICE_DESCRIPTOR_CHANGED = "descriptor_changed"),
                            (e.DISCONNECTED = "disconnected"),
                            (e.DURATION_CHANGED = "duration_changed"),
                            (e.ERROR = "error"),
                            (e.LAST_ACTIVE_DEVICE_INFO_CHANGED = "last_active_device_info_changed"),
                            (e.LOCAL_CONTEXT_ENDED = "local_context_ended"),
                            (e.LOCAL_PLAYER_DISABLED = "local_player_disabled"),
                            (e.LOCAL_PLAYER_ENABLED = "local_player_enabled"),
                            (e.LOCAL_PLAYER_LOGGED_OUT = "local_player_logged_out"),
                            (e.LOGGED_OUT = "logged_out"),
                            (e.MAX_LIST_ERRORS_REACHED = "max_list_errors_reached"),
                            (e.MAX_SUBSCRIPTIONS_REACHED = "max_subscriptions_reached"),
                            (e.PLAYBACK_CAPPED = "playback_capped"),
                            (e.PLAYER_INITIALIZATION_DONE = "player_initialization_done"),
                            (e.PLAYER_INITIALIZATION_FAILED = "player_initialization_failed"),
                            (e.PRODUCT_STATE_CHANGED = "product_state_changed"),
                            (e.PROGRESS = "progress"),
                            (e.PLAYER_QUEUE_CHANGED = "player_queue_changed"),
                            (e.RECONNECTED = "reconnected"),
                            (e.RECONNECTING = "reconnecting"),
                            (e.REMOTE_OBSERVER_DISABLED = "remote_observer_disabled"),
                            (e.REMOTE_OBSERVER_ENABLED = "remote_observer_enabled"),
                            (e.SERVICE_REGISTRATION_ERROR = "service_registration_error"),
                            (e.STATE_CHANGED = "state_changed"),
                            (e.STOPPED_ON_BACKGROUND = "stopped_on_background"),
                            (e.TRACK_ENDED = "track_ended"),
                            (e.UNRECOVERABLE_FAILURE = "unrecoverable_failure"),
                            (e.VIDEO_ELEMENT_APPENDED = "video_element_appended"),
                            (e.VIDEO_ELEMENT_REMOVED = "video_element_removed"),
                            (e.VOLUME_CHANGED = "volume_changed");
                    })((HarmonyEvent = exports.HarmonyEvent || (exports.HarmonyEvent = {})));
            },
            {},
        ],
        97: [
            function (require, module, exports) {
                "use strict";
                var ManifestFormat;
                Object.defineProperty(exports, "__esModule", { value: !0 }),
                    (exports.ManifestFormat = void 0),
                    (function (_) {
                        (_.FILE_URLS_MP3 = "file_urls_mp3"),
                            (_.FILE_URLS_EXTERNAL = "file_urls_external"),
                            (_.FILE_IDS_MP4 = "file_ids_mp4"),
                            (_.FILE_IDS_MP4_DUAL = "file_ids_mp4_dual"),
                            (_.FILE_IDS_CBCS = "file_ids_mp4_cbcs"),
                            (_.FILE_IDS_MP4FLAC = "file_ids_mp4flac"),
                            (_.MANIFEST_IDS_VIDEO = "manifest_ids_video");
                    })((ManifestFormat = exports.ManifestFormat || (exports.ManifestFormat = {})));
            },
            {},
        ],
        98: [
            function (require, module, exports) {
                "use strict";
                var PlaybackQuality;
                Object.defineProperty(exports, "__esModule", { value: !0 }),
                    (exports.PlaybackQuality = void 0),
                    (function (a) {
                        (a.UNKNOWN = "UNKNOWN"), (a.DEFAULT = "DEFAULT"), (a.LOW = "LOW"), (a.NORMAL = "NORMAL"), (a.HIGH = "HIGH"), (a.VERY_HIGH = "VERY_HIGH"), (a.HIFI = "HIFI");
                    })((PlaybackQuality = exports.PlaybackQuality || (exports.PlaybackQuality = {})));
            },
            {},
        ],
        99: [
            function (require, module, exports) {
                "use strict";
                var RepeatMode;
                Object.defineProperty(exports, "__esModule", { value: !0 }),
                    (exports.RepeatMode = void 0),
                    (function (e) {
                        (e[(e.OFF = 0)] = "OFF"), (e[(e.CONTEXT = 1)] = "CONTEXT"), (e[(e.TRACK = 2)] = "TRACK");
                    })((RepeatMode = exports.RepeatMode || (exports.RepeatMode = {})));
            },
            {},
        ],
        100: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.PlayerAPIClientError = void 0);
                var tslib_1 = require("tslib"),
                    PlayerAPIClientError = (function (r) {
                        function e(e, t) {
                            var n = r.call(this, t) || this;
                            return (n.status = -1), (n.maxedSubscriptions = !1), (n.unrecoverable = !1), (n.debug = {}), (n.code = e), (n.name = "PlayerAPIClientError"), n;
                        }
                        return (
                            tslib_1.__extends(e, r),
                            (e.fatal = function (r, t) {
                                var n = new e(r, t);
                                return (n.unrecoverable = !0), n;
                            }),
                            e
                        );
                    })(Error);
                exports.PlayerAPIClientError = PlayerAPIClientError;
            },
            { tslib: 190 },
        ],
        101: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.HarmonyError = void 0);
                var tslib_1 = require("tslib"),
                    HarmonyError = (function (r) {
                        function e(e, o) {
                            var t = r.call(this, o) || this;
                            return (t.status = -1), (t.unrecoverable = !1), (t.debug = {}), (t.code = e), (t.name = "HarmonyError"), t;
                        }
                        return (
                            tslib_1.__extends(e, r),
                            (e.fatal = function (r, o) {
                                var t = new e(r, o);
                                return (t.unrecoverable = !0), t;
                            }),
                            e
                        );
                    })(Error);
                exports.HarmonyError = HarmonyError;
            },
            { tslib: 190 },
        ],
        102: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.PlayerQueueError = void 0);
                var tslib_1 = require("tslib"),
                    PlayerQueueError = (function (r) {
                        function e(e, u) {
                            var t = r.call(this, u) || this;
                            return (t.unrecoverable = !1), (t.code = e), (t.name = "PlayerQueueError"), t;
                        }
                        return tslib_1.__extends(e, r), e;
                    })(Error);
                exports.PlayerQueueError = PlayerQueueError;
            },
            { tslib: 190 },
        ],
        103: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.TrackPlayerAPIClientError = void 0);
                var tslib_1 = require("tslib"),
                    TrackPlayerAPIClientError = (function (r) {
                        function e(e, t) {
                            var a = r.call(this, t) || this;
                            return (a.status = -1), (a.maxedSubscriptions = !1), (a.unrecoverable = !1), (a.debug = {}), (a.registration = !1), (a.code = e), (a.name = "TrackPlayerAPIClientError"), a;
                        }
                        return (
                            tslib_1.__extends(e, r),
                            (e.fatal = function (r, t) {
                                var a = new e(r, t);
                                return (a.unrecoverable = !0), a;
                            }),
                            e
                        );
                    })(Error);
                exports.TrackPlayerAPIClientError = TrackPlayerAPIClientError;
            },
            { tslib: 190 },
        ],
        104: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.createHarmonyAndTransport = exports.createHarmony = exports.HarmonyError = void 0);
                var tslib_1 = require("tslib"),
                    errors_1 = require("@js-sdk/playback/es5/enums/errors"),
                    errors_2 = require("@spotify-internal/transport/es5/enums/errors"),
                    errors_3 = require("./enums/errors"),
                    create_transport_1 = require("./utils/create_transport"),
                    harmony_1 = require("./_internal/harmony"),
                    client_1 = require("./client"),
                    streamer_1 = require("./streamer"),
                    controller_1 = require("./controller"),
                    playback_1 = require("@js-sdk/playback");
                Object.defineProperty(exports, "KeySystem", {
                    enumerable: !0,
                    get: function () {
                        return playback_1.KeySystem;
                    },
                }),
                    Object.defineProperty(exports, "MediaCodec", {
                        enumerable: !0,
                        get: function () {
                            return playback_1.MediaCodec;
                        },
                    }),
                    Object.defineProperty(exports, "Robustness", {
                        enumerable: !0,
                        get: function () {
                            return playback_1.Robustness;
                        },
                    });
                var device_type_1 = require("./enums/device_type");
                Object.defineProperty(exports, "DeviceType", {
                    enumerable: !0,
                    get: function () {
                        return device_type_1.DeviceType;
                    },
                });
                var error_source_1 = require("./enums/error_source");
                Object.defineProperty(exports, "HarmonyErrorSource", {
                    enumerable: !0,
                    get: function () {
                        return error_source_1.HarmonyErrorSource;
                    },
                });
                var harmony_event_1 = require("./enums/harmony_event");
                Object.defineProperty(exports, "HarmonyEvent", {
                    enumerable: !0,
                    get: function () {
                        return harmony_event_1.HarmonyEvent;
                    },
                });
                var repeat_mode_1 = require("./enums/repeat_mode");
                Object.defineProperty(exports, "RepeatMode", {
                    enumerable: !0,
                    get: function () {
                        return repeat_mode_1.RepeatMode;
                    },
                });
                var device_deactivated_reason_1 = require("./enums/device_deactivated_reason");
                Object.defineProperty(exports, "DeviceDeactivatedReason", {
                    enumerable: !0,
                    get: function () {
                        return device_deactivated_reason_1.DeviceDeactivatedReason;
                    },
                });
                var playback_quality_1 = require("./enums/playback_quality");
                Object.defineProperty(exports, "PlaybackQuality", {
                    enumerable: !0,
                    get: function () {
                        return playback_quality_1.PlaybackQuality;
                    },
                });
                var typedefs_1 = require("./typedefs");
                function createHarmony(e) {
                    var r,
                        t = e.transport;
                    if (!t) throw new TypeError("No Transport instance provided");
                    var a = tslib_1.__assign(tslib_1.__assign({}, e.client), { transport: t, hidden: !!e.hidden, playTokenLostBehavior: e.hidden && !e.onlyLocalState ? "stop" : "pause" }),
                        n = client_1.createHarmonyClient(a),
                        o = e.streamer || {},
                        s = e.controller || {},
                        i = void 0,
                        c = !1;
                    e.streamer && e.streamer.disabled
                        ? ((e.hidden = !0), (e.onlyLocalState = !1), (e.claimInactivePlayerStates = !1), (c = !0))
                        : ((i = streamer_1.createStreamerForClient(n, o)), (s.autoregister = !1), e.onlyLocalState && ((s.decorateTrackWindow = !1), (s.disableProgress = !0)));
                    var l = controller_1.createControllerForClient(n, s);
                    return harmony_1.Harmony.create({
                        transport: t,
                        client: n,
                        streamer: i,
                        controller: l,
                        enableControllerWithoutStreamer: c,
                        hidden: e.hidden,
                        onlyLocalState: e.onlyLocalState,
                        claimInactivePlayerStates: e.claimInactivePlayerStates,
                        autoActivateElement: null !== (r = e.autoActivateElement) && void 0 !== r ? r : "undefined" != typeof WebKitMediaKeys,
                        experimentalDeactivateOnStop: e.experimentalDeactivateOnStop,
                    });
                }
                function createHarmonyAndTransport(e) {
                    var r = create_transport_1.createTransportForHarmony(e);
                    return { harmony: createHarmony(tslib_1.__assign(tslib_1.__assign({}, e), { transport: r })), transport: r };
                }
                Object.defineProperty(exports, "LOCAL_DEVICE_ID", {
                    enumerable: !0,
                    get: function () {
                        return typedefs_1.LOCAL_DEVICE_ID;
                    },
                }),
                    (exports.HarmonyError = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, errors_3.HarmonyErrors), errors_2.TransportErrors), errors_1.Errors)),
                    (exports.createHarmony = createHarmony),
                    (exports.createHarmonyAndTransport = createHarmonyAndTransport);
            },
            {
                "./_internal/harmony": 76,
                "./client": 90,
                "./controller": 91,
                "./enums/device_deactivated_reason": 92,
                "./enums/device_type": 93,
                "./enums/error_source": 94,
                "./enums/errors": 95,
                "./enums/harmony_event": 96,
                "./enums/playback_quality": 98,
                "./enums/repeat_mode": 99,
                "./streamer": 105,
                "./typedefs": 106,
                "./utils/create_transport": 108,
                "@js-sdk/playback": 65,
                "@js-sdk/playback/es5/enums/errors": 44,
                "@spotify-internal/transport/es5/enums/errors": 144,
                tslib: 190,
            },
        ],
        105: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.of = exports.createStreamerForClient = exports.HarmonyStreamer = void 0);
                var tslib_1 = require("tslib"),
                    playback_1 = require("@js-sdk/playback"),
                    manifest_format_1 = require("./enums/manifest_format"),
                    streamer_1 = require("./_internal/streamer");
                Object.defineProperty(exports, "HarmonyStreamer", {
                    enumerable: !0,
                    get: function () {
                        return streamer_1.HarmonyStreamer;
                    },
                });
                var client_1 = require("./_internal/tp_service/client"),
                    context_1 = require("./_internal/tp_service/context"),
                    playback_state_observer_1 = require("./_internal/tp_service/playback_state_observer");
                function createStreamerForClient(e, t) {
                    void 0 === t && (t = {});
                    var r = e.getSDKId(),
                        a = e.getPublicTransport(),
                        i = e.getLogger(),
                        n = e.getDeviceDescriptor(),
                        o = "initialVolume" in t && void 0 !== t.initialVolume ? t.initialVolume : 1,
                        s = tslib_1.__assign(tslib_1.__assign({}, t), { transport: a, logger: i, sdkId: e.getUntaggedSDKId() }),
                        _ = playback_1.createPlayer(s).then(function (e) {
                            return e.player;
                        }),
                        l = _.then(function (e) {
                            return e.getMediaConfig();
                        }),
                        m = Promise.all([n, l]).then(function (e) {
                            var r = e[0],
                                a = e[1];
                            return (
                                r.getCapability("audio_podcasts") && !t.disableExternalFiles && r.appendManifestFormat(manifest_format_1.ManifestFormat.FILE_URLS_EXTERNAL),
                                a.keysystem === playback_1.KeySystem.FAIRPLAY
                                    ? r.appendManifestFormat(manifest_format_1.ManifestFormat.FILE_IDS_CBCS)
                                    : a.keysystem !== playback_1.KeySystem.WIDEVINE || t.preferMultiDRMFormat
                                    ? r.appendManifestFormat(manifest_format_1.ManifestFormat.FILE_IDS_MP4_DUAL, manifest_format_1.ManifestFormat.FILE_IDS_MP4)
                                    : (-1 !== a.formats.audio.indexOf('audio/mp4; codecs="flac"') && r.getCapability("lossless_playback") && r.appendManifestFormat(manifest_format_1.ManifestFormat.FILE_IDS_MP4FLAC),
                                      r.appendManifestFormat(manifest_format_1.ManifestFormat.FILE_IDS_MP4, manifest_format_1.ManifestFormat.FILE_IDS_MP4_DUAL)),
                                a.supports.protected_video && r.getCapability("video_playback") && r.prependManifestFormat(manifest_format_1.ManifestFormat.MANIFEST_IDS_VIDEO),
                                r
                            );
                        }),
                        c = playback_1.ListPlayer.create({ trackPlayer: _ }),
                        p = client_1.TrackPlaybackServiceClient.create({ initialVolume: o, listPlayer: c, logger: i, transport: a, clientVersion: r, descriptor: m, endpoint: t.endpoint, ListClass: context_1.TrackPlayerServiceContext }),
                        f = playback_state_observer_1.TPPlaybackStateObserver.create(p),
                        y = "stopOnBackground" in t ? t.stopOnBackground : "undefined" == typeof MediaSource;
                    return new streamer_1.HarmonyStreamer({ client: e, playbackServiceClient: p, playbackStateObserver: f, initialVolume: o, playerPromise: _, listPlayer: c, stopOnBackground: y });
                }
                function of(e) {
                    var t = e._streamer;
                    if (!(t instanceof streamer_1.HarmonyStreamer)) throw new Error("The harmony instance has an invalid `_streamer`.");
                    return t;
                }
                (exports.createStreamerForClient = createStreamerForClient), (exports.of = of);
            },
            { "./_internal/streamer": 85, "./_internal/tp_service/client": 86, "./_internal/tp_service/context": 87, "./_internal/tp_service/playback_state_observer": 88, "./enums/manifest_format": 97, "@js-sdk/playback": 65, tslib: 190 },
        ],
        106: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.GAIA_VOLUME = exports.LOCAL_DEVICE_ID = void 0), (exports.LOCAL_DEVICE_ID = "@local"), (exports.GAIA_VOLUME = 65535);
            },
            {},
        ],
        107: [
            function (require, module, exports) {
                "use strict";
                function assert(e, s) {
                    if (!e) throw new Error("Assertion failed: " + s);
                }
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.assert = void 0), (exports.assert = assert);
            },
            {},
        ],
        108: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.createTransportForHarmony = void 0);
                var xresolve_1 = require("@spotify-internal/transport/es5/providers/endpoints/xresolve"),
                    transport_1 = require("@spotify-internal/transport");
                function hasEndpoint(e) {
                    return "string" == typeof e;
                }
                function createTransportForHarmony(e) {
                    if ("function" != typeof e.getToken) throw new TypeError("Argument options.getToken must be a function");
                    var r = xresolve_1.createProvider(e.xresolve);
                    return transport_1.createTransport({
                        providers: {
                            endpoints: function (o) {
                                return r(o).then(function (r) {
                                    var o = e.endpoints;
                                    if (o)
                                        for (var n in o)
                                            if (o.hasOwnProperty(n)) {
                                                var t = o[n];
                                                hasEndpoint(t) && (r[n] = t);
                                            }
                                    return r;
                                });
                            },
                            token: function () {
                                return new Promise(function (r) {
                                    e.getToken(function (e, o) {
                                        r(void 0 === o ? e : [e, o]);
                                    });
                                });
                            },
                        },
                        disconnectBeforeUnload: e.disconnectBeforeUnload,
                        forcePolyfillTypes: e.forcePolyfillTypes,
                        reconnectionRetries: e.reconnectionRetries,
                        requestMode: e.requestMode || "fetch",
                    });
                }
                exports.createTransportForHarmony = createTransportForHarmony;
            },
            { "@spotify-internal/transport": 162, "@spotify-internal/transport/es5/providers/endpoints/xresolve": 170 },
        ],
        109: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.DeviceId = void 0);
                var encoding_1 = require("@js-sdk/encoding"),
                    hasAPI = "undefined" != typeof crypto && "function" == typeof crypto.getRandomValues;
                function generateIdWithCrypto() {
                    var e = new Uint8Array(16);
                    return crypto.getRandomValues(e), encoding_1.Base62.toHex(e.join(""), 40).slice(0, 40);
                }
                function generateIdWithRandom() {
                    for (var e = new Array(27), t = e.length; t--; ) e[t] = Math.floor(8 * Math.random());
                    return encoding_1.Base62.toHex(e.join(""), 40);
                }
                var generate = hasAPI ? generateIdWithCrypto : generateIdWithRandom,
                    DEFAULT_DEVICE_ID_KEY = "_spharmony_device_id";
                function getDeviceId(e, t) {
                    if ((void 0 === t && (t = !1), e && "string" == typeof e)) return e;
                    if (t) return generate();
                    var r = localStorage.getItem(DEFAULT_DEVICE_ID_KEY);
                    return r || ((r = generate()), localStorage.setItem(DEFAULT_DEVICE_ID_KEY, r)), r;
                }
                exports.DeviceId = { get: getDeviceId, generate: generate, generateWithCrypto: generateIdWithCrypto, generateWithRandom: generateIdWithRandom };
            },
            { "@js-sdk/encoding": 15 },
        ],
        110: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.default = { tagged: "4.12.0-38fc756", version: "4.12.0", revision: "38fc756" });
            },
            {},
        ],
        111: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.HarmonyClient = void 0);
                var _emitter = require("@spotify-internal/emitter"),
                    _logger = require("@spotify-internal/transport/lib/logger"),
                    _debugTools = require("@js-sdk/debug-tools"),
                    _product_state_observer = require("@spotify-internal/transport/lib/product_state_observer"),
                    _transport = require("@spotify-internal/transport"),
                    _typedefs = require("../typedefs"),
                    _errors = require("../enums/errors"),
                    _error_source = require("../enums/error_source"),
                    _manifest_format = require("../enums/manifest_format"),
                    _harmony_error = require("../error/harmony_error"),
                    _defer = require("./helpers/defer"),
                    _device_descriptor = require("./device_descriptor"),
                    _interpolate_ua = require("./helpers/interpolate_ua"),
                    _version = _interopRequireDefault(require("../version"));
                function _interopRequireDefault(e) {
                    return e && e.__esModule ? e : { default: e };
                }
                function _typeof(e) {
                    return (_typeof =
                        "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                            ? function (e) {
                                  return typeof e;
                              }
                            : function (e) {
                                  return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                              })(e);
                }
                function _classCallCheck(e, r) {
                    if (!(e instanceof r)) throw new TypeError("Cannot call a class as a function");
                }
                function _defineProperties(e, r) {
                    for (var t = 0; t < r.length; t++) {
                        var o = r[t];
                        (o.enumerable = o.enumerable || !1), (o.configurable = !0), "value" in o && (o.writable = !0), Object.defineProperty(e, o.key, o);
                    }
                }
                function _createClass(e, r, t) {
                    return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), e;
                }
                function _inherits(e, r) {
                    if ("function" != typeof r && null !== r) throw new TypeError("Super expression must either be null or a function");
                    (e.prototype = Object.create(r && r.prototype, { constructor: { value: e, writable: !0, configurable: !0 } })), r && _setPrototypeOf(e, r);
                }
                function _setPrototypeOf(e, r) {
                    return (_setPrototypeOf =
                        Object.setPrototypeOf ||
                        function (e, r) {
                            return (e.__proto__ = r), e;
                        })(e, r);
                }
                function _createSuper(e) {
                    var r = _isNativeReflectConstruct();
                    return function () {
                        var t,
                            o = _getPrototypeOf(e);
                        if (r) {
                            var n = _getPrototypeOf(this).constructor;
                            t = Reflect.construct(o, arguments, n);
                        } else t = o.apply(this, arguments);
                        return _possibleConstructorReturn(this, t);
                    };
                }
                function _possibleConstructorReturn(e, r) {
                    return !r || ("object" !== _typeof(r) && "function" != typeof r) ? _assertThisInitialized(e) : r;
                }
                function _assertThisInitialized(e) {
                    if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return e;
                }
                function _isNativeReflectConstruct() {
                    if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
                    if (Reflect.construct.sham) return !1;
                    if ("function" == typeof Proxy) return !0;
                    try {
                        return Date.prototype.toString.call(Reflect.construct(Date, [], function () {})), !0;
                    } catch (e) {
                        return !1;
                    }
                }
                function _getPrototypeOf(e) {
                    return (_getPrototypeOf = Object.setPrototypeOf
                        ? Object.getPrototypeOf
                        : function (e) {
                              return e.__proto__ || Object.getPrototypeOf(e);
                          })(e);
                }
                var debugLogger = _debugTools.logging.forTag("harmonyclient"),
                    VALID_DEVICE_ID_EXP = /^[a-zA-Z0-9_%:-]{1,40}$/,
                    HarmonyClient = (function (e) {
                        _inherits(t, _emitter.EventEmitter);
                        var r = _createSuper(t);
                        function t(e) {
                            var o;
                            if ((_classCallCheck(this, t), ((o = r.call(this))._systemInfo = (0, _defer.defer)()), (o._clientVersion = (0, _defer.defer)()), !e)) throw new TypeError("Argument `options` is not defined.");
                            if (!e.transport) throw new TypeError("No Transport instance provided");
                            if (!e.transport.hasPlugin("dealer")) throw new TypeError("Transport has no Dealer plugin.");
                            return (
                                (o._transport = e.transport),
                                (o._deviceDescriptor = o._initDeviceDescriptor(e)),
                                (o._logger = new _logger.Logger({ transport: o._transport, sdkId: o.getSDKId(), platform: o._systemInfo.promise, clientVersion: o._clientVersion.promise })),
                                (o._productStateObserver = _product_state_observer.ProductStateObserver.create({ transport: o._transport })),
                                (o._onConnected = o._onConnected.bind(_assertThisInitialized(o))),
                                (o._onConnectionError = o._onConnectionError.bind(_assertThisInitialized(o))),
                                (o._onAuthenticationError = o._onAuthenticationError.bind(_assertThisInitialized(o))),
                                (o._onShortSessionDisconnect = o._onShortSessionDisconnect.bind(_assertThisInitialized(o))),
                                o._attachListeners(),
                                o
                            );
                        }
                        return (
                            _createClass(
                                t,
                                [
                                    {
                                        key: "_createDeviceDescriptor",
                                        value: function (e) {
                                            var r,
                                                t,
                                                o = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                                            if ((null == o ? void 0 : o.id) && !VALID_DEVICE_ID_EXP.test(o.id)) throw _harmony_error.HarmonyError.fatal(_errors.HarmonyErrors.HARMONY_INVALID_DESCRIPTOR_ID, "Invalid device id.");
                                            var n = o.capabilities || {},
                                                i = {
                                                    change_volume: null === (r = n.change_volume) || void 0 === r || r,
                                                    endsong_snooping: n.endsong_snooping,
                                                    enable_play_token: !0,
                                                    supports_file_media_type: !0,
                                                    play_token_lost_behavior: e.playTokenLostBehavior || "pause",
                                                    disable_connect: !!e.hidden,
                                                    audio_podcasts: null === (t = n.audio_podcasts) || void 0 === t || t,
                                                    video_playback: n.video_playback,
                                                    lossless_playback: n.lossless_playback,
                                                    volume_steps: void 0 !== n.volume_steps && n.volume_steps >= 0 && n.volume_steps < _typedefs.GAIA_VOLUME ? n.volume_steps : void 0,
                                                    manifest_formats: [_manifest_format.ManifestFormat.FILE_URLS_MP3],
                                                },
                                                s = _device_descriptor.DeviceDescriptor.create(Object.assign(Object.assign({}, o), { capabilities: i }));
                                            return this._systemInfo.resolve(s.getPlatformIdentifier()), this._clientVersion.resolve(s.getPlatformVersion()), this.proxyEmit(s, "descriptor_changed", "descriptor_changed"), s;
                                        },
                                    },
                                    {
                                        key: "_initDeviceDescriptor",
                                        value: function (e) {
                                            var r = this;
                                            return Promise.resolve(e.descriptor)
                                                .then(this._createDeviceDescriptor.bind(this, e))
                                                .catch(function (e) {
                                                    return r._onError(_error_source.HarmonyErrorSource.HARMONY, { error: e }), Promise.reject(e);
                                                });
                                        },
                                    },
                                    {
                                        key: "_attachListeners",
                                        value: function () {
                                            var e = this,
                                                r = this._transport;
                                            r.on(_transport.TransportEvent.CONNECTED, this._onConnected),
                                                r.on(_transport.TransportEvent.CONNECTION_FAILED, this._onConnectionError),
                                                r.on(_transport.TransportEvent.AUTHENTICATION_FAILED, this._onAuthenticationError),
                                                this.proxyEmit(r, _transport.TransportEvent.AUTHENTICATED, "authenticated"),
                                                this.proxyEmit(r, _transport.TransportEvent.RECONNECTING, "reconnecting"),
                                                this.proxyEmit(r, _transport.TransportEvent.RECONNECTED, "reconnected"),
                                                this.proxyEmit(r, _transport.TransportEvent.LOGGED_OUT, "logged_out"),
                                                this.proxyEmitSync(r, _transport.TransportEvent.BEFORE_OFFLINE_DISCONNECT, "before_offline_disconnect"),
                                                this.proxyEmitSync(r, _transport.TransportEvent.BEFORE_ONLINE_DISCONNECT, "before_disconnect"),
                                                r.on(_transport.TransportEvent.SHORT_SESSION_DISCONNECTED, this._onShortSessionDisconnect.bind(this)),
                                                this.proxyEmit(this._productStateObserver, _transport.TransportEvent.PRODUCT_STATE_CHANGED, "product_state_changed"),
                                                this.on("before_disconnect", function (r) {
                                                    var t = e._productStateObserver.deregister().catch(function () {});
                                                    r.data.awaitPromise(t);
                                                });
                                        },
                                    },
                                    {
                                        key: "_onError",
                                        value: function (e, r) {
                                            this.emit("error", { source: e, error: r.error }), r.error && r.error.unrecoverable && this.emit("unrecoverable_failure", { source: e, error: r.error });
                                        },
                                    },
                                    {
                                        key: "_onConnected",
                                        value: function () {
                                            this.emit("connected", null);
                                        },
                                    },
                                    {
                                        key: "_onConnectionError",
                                        value: function (e) {
                                            this._onError(_error_source.HarmonyErrorSource.TRANSPORT, { error: e.data.error }), this.emit("connection_error", e.data);
                                        },
                                    },
                                    {
                                        key: "_onAuthenticationError",
                                        value: function (e) {
                                            this._onError(_error_source.HarmonyErrorSource.TRANSPORT, { error: e.data.error }), this.emit("authentication_error", e.data);
                                        },
                                    },
                                    {
                                        key: "_onShortSessionDisconnect",
                                        value: function (e) {
                                            this._logger &&
                                                this._logger
                                                    .logClientEvent(
                                                        {
                                                            source: "transport",
                                                            source_version: _version.default.tagged,
                                                            source_vendor: "spotify",
                                                            event: e.type,
                                                            event_version: "1.0.0",
                                                            json_data: { disconnectCount: e.data.disconnectCount, sessionLength: e.data.sessionLength },
                                                        },
                                                        "object"
                                                    )
                                                    .catch(function (r) {
                                                        return debugLogger.warn("".concat(e.type, " Logging Error:"), r);
                                                    });
                                        },
                                    },
                                    {
                                        key: "getVersionDescriptor",
                                        value: function () {
                                            return Object.assign({}, _version.default);
                                        },
                                    },
                                    {
                                        key: "getSDKId",
                                        value: function () {
                                            return "harmony:".concat(_version.default.tagged);
                                        },
                                    },
                                    {
                                        key: "getUntaggedSDKId",
                                        value: function () {
                                            return "harmony:".concat(_version.default.version);
                                        },
                                    },
                                    {
                                        key: "getLogger",
                                        value: function () {
                                            return this._logger;
                                        },
                                    },
                                    {
                                        key: "logAppMetrics",
                                        value: function (e, r) {
                                            if (!this._logger) throw new TypeError("Invalid logger instance");
                                            return this._logger.logMetrics(e, r);
                                        },
                                    },
                                    {
                                        key: "request",
                                        value: function (e, r) {
                                            return this._transport.request(e, r);
                                        },
                                    },
                                    {
                                        key: "getPublicTransport",
                                        value: function () {
                                            return this._transport.toPublic();
                                        },
                                    },
                                    {
                                        key: "getClientDescriptor",
                                        value: function () {
                                            return this._deviceDescriptor.then(function (e) {
                                                return e.toJSON();
                                            });
                                        },
                                    },
                                    {
                                        key: "getDeviceDescriptor",
                                        value: function () {
                                            return this._deviceDescriptor;
                                        },
                                    },
                                    {
                                        key: "getUserInfo",
                                        value: function () {
                                            return this._transport.request("@webapi/v1/me", { responseType: "json" }).then(function (e) {
                                                var r = e.body;
                                                if (200 !== e.status) {
                                                    var t = new _harmony_error.HarmonyError(_errors.HarmonyErrors.USER_INFO_REQUEST_FAILED_WITH_STATUS, "User info request failed with status ".concat(e.status));
                                                    return (t.status = e.status), Promise.reject(t);
                                                }
                                                return r
                                                    ? { display_name: r.display_name, followers: r.followers, id: r.id, images: r.images, uri: r.uri }
                                                    : Promise.reject(new _harmony_error.HarmonyError(_errors.HarmonyErrors.USER_INFO_REQUEST_EMPTY_RESPONSE, "Unexpected empty response."));
                                            });
                                        },
                                    },
                                    {
                                        key: "getProductState",
                                        value: function () {
                                            return this._productStateObserver.getCurrentState();
                                        },
                                    },
                                    {
                                        key: "setName",
                                        value: function (e) {
                                            return this._deviceDescriptor.then(function (r) {
                                                return r.setName(e);
                                            });
                                        },
                                    },
                                    {
                                        key: "setNameTemplate",
                                        value: function (e) {
                                            return this.setName((0, _interpolate_ua.interpolateUA)(e));
                                        },
                                    },
                                    {
                                        key: "setCapability",
                                        value: function (e, r) {
                                            return this._deviceDescriptor.then(function (t) {
                                                return t.setCapability(e, r);
                                            });
                                        },
                                    },
                                    {
                                        key: "notifyError",
                                        value: function (e, r) {
                                            this._onError(e, { error: r });
                                        },
                                    },
                                ],
                                [
                                    {
                                        key: "create",
                                        value: function (e) {
                                            return new t(e);
                                        },
                                    },
                                    {
                                        key: "of",
                                        value: function (e) {
                                            return e._client;
                                        },
                                    },
                                ]
                            ),
                            t
                        );
                    })();
                exports.HarmonyClient = HarmonyClient;
            },
            {
                "../enums/error_source": 125,
                "../enums/errors": 126,
                "../enums/manifest_format": 127,
                "../error/harmony_error": 129,
                "../typedefs": 132,
                "../version": 136,
                "./device_descriptor": 112,
                "./helpers/defer": 114,
                "./helpers/interpolate_ua": 115,
                "@js-sdk/debug-tools": 11,
                "@spotify-internal/emitter": 71,
                "@spotify-internal/transport": 162,
                "@spotify-internal/transport/lib/logger": 180,
                "@spotify-internal/transport/lib/product_state_observer": 181,
            },
        ],
        112: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.DeviceDescriptor = void 0);
                var _emitter = require("@spotify-internal/emitter"),
                    _device_type = require("../enums/device_type"),
                    _device_id = require("../utils/device_id"),
                    _interpolate_ua = require("./helpers/interpolate_ua"),
                    _capitalize = require("./helpers/capitalize");
                function _typeof(e) {
                    return (_typeof =
                        "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                            ? function (e) {
                                  return typeof e;
                              }
                            : function (e) {
                                  return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                              })(e);
                }
                function _classCallCheck(e, t) {
                    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
                }
                function _defineProperties(e, t) {
                    for (var i = 0; i < t.length; i++) {
                        var r = t[i];
                        (r.enumerable = r.enumerable || !1), (r.configurable = !0), "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
                    }
                }
                function _createClass(e, t, i) {
                    return t && _defineProperties(e.prototype, t), i && _defineProperties(e, i), e;
                }
                function _inherits(e, t) {
                    if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function");
                    (e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } })), t && _setPrototypeOf(e, t);
                }
                function _setPrototypeOf(e, t) {
                    return (_setPrototypeOf =
                        Object.setPrototypeOf ||
                        function (e, t) {
                            return (e.__proto__ = t), e;
                        })(e, t);
                }
                function _createSuper(e) {
                    var t = _isNativeReflectConstruct();
                    return function () {
                        var i,
                            r = _getPrototypeOf(e);
                        if (t) {
                            var n = _getPrototypeOf(this).constructor;
                            i = Reflect.construct(r, arguments, n);
                        } else i = r.apply(this, arguments);
                        return _possibleConstructorReturn(this, i);
                    };
                }
                function _possibleConstructorReturn(e, t) {
                    return !t || ("object" !== _typeof(t) && "function" != typeof t) ? _assertThisInitialized(e) : t;
                }
                function _assertThisInitialized(e) {
                    if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return e;
                }
                function _isNativeReflectConstruct() {
                    if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
                    if (Reflect.construct.sham) return !1;
                    if ("function" == typeof Proxy) return !0;
                    try {
                        return Date.prototype.toString.call(Reflect.construct(Date, [], function () {})), !0;
                    } catch (e) {
                        return !1;
                    }
                }
                function _getPrototypeOf(e) {
                    return (_getPrototypeOf = Object.setPrototypeOf
                        ? Object.getPrototypeOf
                        : function (e) {
                              return e.__proto__ || Object.getPrototypeOf(e);
                          })(e);
                }
                var DeviceDescriptor = (function (e) {
                    _inherits(i, _emitter.EventEmitter);
                    var t = _createSuper(i);
                    function i(e) {
                        var r, n;
                        if ((_classCallCheck(this, i), ((r = t.call(this))._platformVersion = ""), (r._metadata = {}), (r._manifestPrependOffset = 0), !e)) throw new TypeError("Invalid argument `options`.");
                        if (!e.id) throw new TypeError("Argument `options.id` is required.");
                        if (!e.name || !e.model || !e.type) throw new TypeError("Incomplete `options` value.");
                        return (
                            (r._id = e.id),
                            (r._type = e.type),
                            (r._brand = e.brand),
                            (r._model = e.model),
                            (r._name = e.name),
                            (r._platformIdentifier = e.platform_identifier),
                            (r._platformVersion = e.platform_version || ""),
                            (r._metadata = e.metadata || {}),
                            (r._capabilities = e.capabilities || { manifest_formats: [] }),
                            (r._manifestPrependOffset = (null === (n = r._capabilities.manifest_formats) || void 0 === n ? void 0 : n.length) || 0),
                            r
                        );
                    }
                    return (
                        _createClass(
                            i,
                            [
                                {
                                    key: "getId",
                                    value: function () {
                                        return this._id;
                                    },
                                },
                                {
                                    key: "setCapability",
                                    value: function (e, t) {
                                        switch (e) {
                                            case "manifest_formats":
                                                throw new TypeError('Cannot change capability "manifest_formats"');
                                            default:
                                                return (this._capabilities[e] = t), this.emit("descriptor_changed", { descriptor: this.toJSON() }), !0;
                                        }
                                    },
                                },
                                {
                                    key: "getCapability",
                                    value: function (e) {
                                        switch (e) {
                                            case "manifest_formats":
                                                throw new TypeError("Use `descriptor.getManifestFormats()`.");
                                            default:
                                                return this._capabilities[e];
                                        }
                                    },
                                },
                                {
                                    key: "setName",
                                    value: function (e) {
                                        return (this._name = e), this.emit("descriptor_changed", { descriptor: this.toJSON() }), !0;
                                    },
                                },
                                {
                                    key: "getName",
                                    value: function () {
                                        return this._name;
                                    },
                                },
                                {
                                    key: "getPlatformIdentifier",
                                    value: function () {
                                        return this._platformIdentifier || "Partner ".concat(this._brand, " ").concat(this._model);
                                    },
                                },
                                {
                                    key: "getPlatformVersion",
                                    value: function () {
                                        return this._platformVersion;
                                    },
                                },
                                {
                                    key: "getManifestFormats",
                                    value: function () {
                                        return this._capabilities.manifest_formats || [];
                                    },
                                },
                                {
                                    key: "appendManifestFormat",
                                    value: function () {
                                        var e = this._capabilities.manifest_formats;
                                        Array.isArray(e) && e.push.apply(e, arguments);
                                    },
                                },
                                {
                                    key: "prependManifestFormat",
                                    value: function () {
                                        var e = this._capabilities.manifest_formats;
                                        if (Array.isArray(e)) {
                                            for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++) i[r] = arguments[r];
                                            e.splice.apply(e, [this._manifestPrependOffset, 0].concat(i));
                                        }
                                    },
                                },
                                {
                                    key: "toJSON",
                                    value: function () {
                                        return {
                                            brand: this._brand,
                                            capabilities: Object.assign({}, this._capabilities),
                                            id: this._id,
                                            metadata: Object.assign({}, this._metadata),
                                            model: this._model,
                                            name: this._name,
                                            platform_identifier: this._platformIdentifier,
                                            platform_version: this._platformVersion,
                                            type: this._type,
                                        };
                                    },
                                },
                                {
                                    key: "toTrackPlaybackDeviceInfo",
                                    value: function () {
                                        return {
                                            brand: this._brand,
                                            capabilities: Object.assign({}, this._capabilities),
                                            device_id: this._id,
                                            device_type: this._type,
                                            metadata: Object.assign({}, this._metadata),
                                            model: this._model,
                                            name: this._name,
                                            platform_identifier: this._platformIdentifier,
                                        };
                                    },
                                },
                            ],
                            [
                                {
                                    key: "create",
                                    value: function (e) {
                                        return new i({
                                            id: _device_id.DeviceId.get(e.id, e.randomizeId),
                                            model: e.model || (0, _interpolate_ua.interpolateUA)("harmony-{{name}}.{{version}}-{{platform}}").toLowerCase(),
                                            name: e.nameTemplate ? (0, _interpolate_ua.interpolateUA)(e.nameTemplate) : e.name || (0, _capitalize.capitalize)((0, _interpolate_ua.interpolateUA)("Spotify ({{name}}/{{platform}})")),
                                            type: e.type || _device_type.DeviceType.COMPUTER,
                                            brand: e.brand || "SpotifyHarmonyGeneric",
                                            platform_identifier: e.platform_identifier,
                                            platform_version: e.platform_version,
                                            metadata: e.metadata || {},
                                            capabilities: e.capabilities || {},
                                        });
                                    },
                                },
                            ]
                        ),
                        i
                    );
                })();
                exports.DeviceDescriptor = DeviceDescriptor;
            },
            { "../enums/device_type": 124, "../utils/device_id": 135, "./helpers/capitalize": 113, "./helpers/interpolate_ua": 115, "@spotify-internal/emitter": 71 },
        ],
        113: [
            function (require, module, exports) {
                "use strict";
                function capitalize(e) {
                    return e.replace(/\b[a-z]/g, function (e) {
                        return e.toUpperCase();
                    });
                }
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.capitalize = capitalize);
            },
            {},
        ],
        114: [
            function (require, module, exports) {
                arguments[4][5][0].apply(exports, arguments);
            },
            { dup: 5 },
        ],
        115: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.interpolateUA = interpolateUA);
                var _parse_ua = require("./parse_ua");
                function hasProperty(r, e) {
                    return e && e.hasOwnProperty(r);
                }
                function interpolateUA(r) {
                    if (!r) return r;
                    var e = (0, _parse_ua.parseUA)(navigator.userAgent, navigator.platform);
                    return r.replace(/\{\{([^}]+?)\}\}/g, function (r, t) {
                        return hasProperty(t, e) ? e[t] : "";
                    });
                }
            },
            { "./parse_ua": 116 },
        ],
        116: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.parseUA = parseUA);
                var EDGE_UA_REGEXP = /(edge)[\s\/:]([\w\d\.]+)/,
                    UA_REGEXP = new RegExp("(opera|ie|firefox|chrome|trident|crios|version)[\\s/:]([\\w\\d\\.]+)?.*?(safari|(?:rv[\\s\\/:]|version[\\s\\/:])([\\w\\d\\.]+)|$)"),
                    cache = {};
                function parseUA(e, r) {
                    var o = e.toLowerCase(),
                        n = r ? r.toLowerCase() : "",
                        a = "".concat(o, ":").concat(n);
                    if (a in cache) return cache[a];
                    var t = o.match(EDGE_UA_REGEXP),
                        c = o.match(UA_REGEXP) || [null, "unknown", 0],
                        i = t || c;
                    "trident" === i[1] ? ((i[1] = "ie"), i[4] && (i[2] = i[4])) : "crios" === i[1] && (i[1] = "chrome"),
                        "win" === (n = o.match(/ip(?:ad|od|hone)/) ? "ios" : (o.match(/(?:webos|android)/) || o.match(/mac|win|linux|cros/) || ["other"])[0]) && (n = "windows");
                    var s = "version" === i[1] ? i[3] : i[1],
                        w = "opera" === i[1] && i[4] ? i[4] : i[2],
                        d = { name: s ? s.toString() : "unknown", version: null === w ? "unknown" : w.toString(), platform: n };
                    return (cache[a] = d), d;
                }
            },
            {},
        ],
        117: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.parseRestrictions = parseRestrictions), (exports.parseDisallows = parseDisallows);
                var EXTRACT_RESTRICTION_NAME = /^disallow_([^]+)_reasons$/;
                function parseRestrictions(s, r) {
                    var e = {};
                    for (var a in s) s.hasOwnProperty(a) && "disallow_resuming_reasons" !== a && "disallow_pausing_reasons" !== a && (e[a] = s[a]);
                    return r ? (e.disallow_pausing_reasons = ["already_paused"]) : (e.disallow_resuming_reasons = ["not_paused"]), e;
                }
                function parseDisallows(s) {
                    var r = {};
                    for (var e in s)
                        if (s.hasOwnProperty(e)) {
                            var a = s[e],
                                o = !(!a || !a.length);
                            r[e.replace(EXTRACT_RESTRICTION_NAME, "$1")] = o;
                        }
                    return r;
                }
            },
            {},
        ],
        118: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.HarmonyStreamer = void 0);
                var _playback = require("@js-sdk/playback"),
                    _emitter = require("@spotify-internal/emitter"),
                    _error_source = require("../enums/error_source"),
                    _client = require("./tp_service/client");
                function _typeof(e) {
                    return (_typeof =
                        "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                            ? function (e) {
                                  return typeof e;
                              }
                            : function (e) {
                                  return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                              })(e);
                }
                function _defineProperty(e, t, r) {
                    return t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : (e[t] = r), e;
                }
                function _classCallCheck(e, t) {
                    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
                }
                function _defineProperties(e, t) {
                    for (var r = 0; r < t.length; r++) {
                        var n = t[r];
                        (n.enumerable = n.enumerable || !1), (n.configurable = !0), "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
                    }
                }
                function _createClass(e, t, r) {
                    return t && _defineProperties(e.prototype, t), r && _defineProperties(e, r), e;
                }
                function _inherits(e, t) {
                    if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function");
                    (e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } })), t && _setPrototypeOf(e, t);
                }
                function _setPrototypeOf(e, t) {
                    return (_setPrototypeOf =
                        Object.setPrototypeOf ||
                        function (e, t) {
                            return (e.__proto__ = t), e;
                        })(e, t);
                }
                function _createSuper(e) {
                    var t = _isNativeReflectConstruct();
                    return function () {
                        var r,
                            n = _getPrototypeOf(e);
                        if (t) {
                            var i = _getPrototypeOf(this).constructor;
                            r = Reflect.construct(n, arguments, i);
                        } else r = n.apply(this, arguments);
                        return _possibleConstructorReturn(this, r);
                    };
                }
                function _possibleConstructorReturn(e, t) {
                    return !t || ("object" !== _typeof(t) && "function" != typeof t) ? _assertThisInitialized(e) : t;
                }
                function _assertThisInitialized(e) {
                    if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return e;
                }
                function _isNativeReflectConstruct() {
                    if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
                    if (Reflect.construct.sham) return !1;
                    if ("function" == typeof Proxy) return !0;
                    try {
                        return Date.prototype.toString.call(Reflect.construct(Date, [], function () {})), !0;
                    } catch (e) {
                        return !1;
                    }
                }
                function _getPrototypeOf(e) {
                    return (_getPrototypeOf = Object.setPrototypeOf
                        ? Object.getPrototypeOf
                        : function (e) {
                              return e.__proto__ || Object.getPrototypeOf(e);
                          })(e);
                }
                var HarmonyStreamer = (function (e) {
                    _inherits(r, _emitter.EventEmitter);
                    var t = _createSuper(r);
                    function r(e) {
                        var n;
                        return (
                            _classCallCheck(this, r),
                            ((n = t.call(this))._client = e.client),
                            (n._initialVolume = e.initialVolume),
                            (n._listPlayer = e.listPlayer),
                            (n._playerPromise = e.playerPromise),
                            (n._playbackServiceClient = e.playbackServiceClient),
                            (n._playbackStateObserver = e.playbackStateObserver),
                            (n._stopOnBackground = e.stopOnBackground),
                            n._init(),
                            n
                        );
                    }
                    return (
                        _createClass(r, [
                            {
                                key: "_init",
                                value: function () {
                                    var e,
                                        t,
                                        r,
                                        n = this;
                                    this._client.addListeners(
                                        (_defineProperty((e = {}), "before_disconnect", this._onClientBeforeDisconnect.bind(this)), _defineProperty(e, "before_offline_disconnect", this._onClientBeforeOfflineDisconnect.bind(this)), e)
                                    );
                                    var i = this._listPlayer;
                                    i.addListeners(
                                        (_defineProperty((t = {}), _playback.PlaybackEvent.LIST_PLAYER_CAPPED, this._onCapped.bind(this)),
                                        _defineProperty(t, _playback.PlaybackEvent.LIST_PLAYER_TRACK_ENDED, this._onTrackEnded.bind(this)),
                                        _defineProperty(t, _playback.PlaybackEvent.LIST_PLAYER_BEFORE_VOLUME_CHANGE, this._onBeforeVolumeChange.bind(this)),
                                        _defineProperty(t, _playback.PlaybackEvent.LIST_PLAYER_VOLUME_CHANGED, this._onVolumeChanged.bind(this)),
                                        _defineProperty(t, _playback.PlaybackEvent.LIST_PLAYER_ERROR, this._onError.bind(this, _error_source.HarmonyErrorSource.PLAYBACK)),
                                        t)
                                    ),
                                        this.proxyEmitAll(
                                            i,
                                            (_defineProperty((r = {}), _playback.PlaybackEvent.LIST_PLAYER_AUTOPLAY_FAILED, "autoplay_failed"),
                                            _defineProperty(r, _playback.PlaybackEvent.LIST_PLAYER_TRACK_LOADED, "track_loaded"),
                                            _defineProperty(r, _playback.PlaybackEvent.LIST_PLAYER_DURATION_CHANGED, "duration_changed"),
                                            _defineProperty(r, _playback.PlaybackEvent.LIST_PLAYER_POSITION_CHANGED, "position_changed"),
                                            _defineProperty(r, _playback.PlaybackEvent.LIST_PLAYER_PROGRESS, "progress"),
                                            _defineProperty(r, _playback.PlaybackEvent.LIST_PLAYER_BUFFER_STALLED, "stalled"),
                                            _defineProperty(r, _playback.PlaybackEvent.LIST_PLAYER_BUFFERING_END, "buffering_end"),
                                            _defineProperty(r, _playback.PlaybackEvent.LIST_PLAYER_BUFFERING_START, "buffering_start"),
                                            _defineProperty(r, _playback.PlaybackEvent.LIST_PLAYER_MAX_LIST_ERRORS_REACHED, "max_list_errors_reached"),
                                            _defineProperty(r, _playback.PlaybackEvent.LIST_PLAYER_VIDEO_ELEMENT_APPENDED, "video_element_appended"),
                                            _defineProperty(r, _playback.PlaybackEvent.LIST_PLAYER_VIDEO_ELEMENT_REMOVED, "video_element_removed"),
                                            _defineProperty(r, _playback.PlaybackEvent.LIST_PLAYER_LIST_ENDED, "context_ended"),
                                            r)
                                        );
                                    var a,
                                        o = this._playbackServiceClient;
                                    o instanceof _client.TrackPlaybackServiceClient &&
                                        (o.addListeners((_defineProperty((a = {}), "logout", this._onTPAPILogout.bind(this)), _defineProperty(a, "error", this._onError.bind(this, _error_source.HarmonyErrorSource.TRACK_PLAYBACK)), a)),
                                        this.proxyEmit(o, "max_subscriptions_reached", "max_subscriptions_reached"),
                                        this.proxyEmit(o, "deregistered", "deregistered"),
                                        this.proxyEmit(o, "registered", "registered"),
                                        this.proxyEmit(o, "registration_aborted", "registration_aborted"));
                                    this.proxyEmit(this._playbackStateObserver, "state_changed", "state_changed"),
                                        this._stopOnBackground &&
                                            document.addEventListener &&
                                            document.addEventListener("visibilitychange", function () {
                                                document.hidden && n.stop() && n.emitSync("stopped_on_background", null);
                                            }),
                                        this._playerPromise.then(
                                            function (e) {
                                                e.setVolume(n._initialVolume), n.emit("player_initialization_done", null);
                                            },
                                            function (e) {
                                                n.emit("player_initialization_failed", { reason: e.message, error: e });
                                            }
                                        );
                                },
                            },
                            {
                                key: "_assertOperationSuccess",
                                value: function (e) {
                                    return e === _playback.OperationResult.SUCCESS;
                                },
                            },
                            {
                                key: "_onTrackEnded",
                                value: function () {
                                    this.emit("track_ended", null);
                                },
                            },
                            {
                                key: "_onClientBeforeDisconnect",
                                value: function (e) {
                                    e.data.awaitPromise(this.deregister().catch(function () {}));
                                },
                            },
                            {
                                key: "_onClientBeforeOfflineDisconnect",
                                value: function (e) {
                                    e.data.awaitPromise(this.pause().catch(function () {}));
                                },
                            },
                            {
                                key: "_onBeforeVolumeChange",
                                value: function (e) {
                                    var t;
                                    this.emitSync("before_volume_change", { volume: e.data.volume, remote: !!(null === (t = e.data.options) || void 0 === t ? void 0 : t.commandId) }).defaultPrevented && e.preventDefault();
                                },
                            },
                            {
                                key: "_onVolumeChanged",
                                value: function (e) {
                                    this.emit("volume_changed", { volume: e.data.volume, remote: !!e.data.commandId });
                                },
                            },
                            {
                                key: "_onCapped",
                                value: function () {
                                    this.emit("playback_capped", null);
                                },
                            },
                            {
                                key: "_onError",
                                value: function (e, t) {
                                    var r = t.data.error;
                                    r &&
                                        (r && "registration" in r && r.registration && e === _error_source.HarmonyErrorSource.TRACK_PLAYBACK && this.emit("registration_error", { error: r }),
                                        this.emit("error", { source: e, error: r }),
                                        this._client.notifyError(e, r));
                                },
                            },
                            {
                                key: "_onTPAPILogout",
                                value: function () {
                                    this.emit("logged_out", null);
                                },
                            },
                            {
                                key: "stop",
                                value: function () {
                                    return this._playbackServiceClient.stop();
                                },
                            },
                            {
                                key: "register",
                                value: function () {
                                    return this._playbackServiceClient.register();
                                },
                            },
                            {
                                key: "deregister",
                                value: function () {
                                    return this._playbackServiceClient.deregister();
                                },
                            },
                            {
                                key: "resume",
                                value: function () {
                                    return this._listPlayer.resume().then(this._assertOperationSuccess);
                                },
                            },
                            {
                                key: "pause",
                                value: function () {
                                    return this._listPlayer.pause().then(this._assertOperationSuccess);
                                },
                            },
                            {
                                key: "nextTrack",
                                value: function () {
                                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : _playback.Reason.FORWARD_BUTTON;
                                    return this._listPlayer.next(e).then(this._assertOperationSuccess);
                                },
                            },
                            {
                                key: "canChangeTrack",
                                value: function () {
                                    return this._listPlayer.canChangeTrack();
                                },
                            },
                            {
                                key: "previousTrack",
                                value: function () {
                                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : _playback.Reason.BACK_BUTTON;
                                    return this._listPlayer.previous(e).then(this._assertOperationSuccess);
                                },
                            },
                            {
                                key: "togglePlay",
                                value: function () {
                                    return this._listPlayer.togglePlay().then(this._assertOperationSuccess);
                                },
                            },
                            {
                                key: "setVolume",
                                value: function (e) {
                                    return this._listPlayer.setVolume(e).then(this._assertOperationSuccess);
                                },
                            },
                            {
                                key: "getVolume",
                                value: function () {
                                    return this._listPlayer.getVolume();
                                },
                            },
                            {
                                key: "seek",
                                value: function (e) {
                                    return this._listPlayer.seek(e).then(this._assertOperationSuccess);
                                },
                            },
                            {
                                key: "getCurrentState",
                                value: function () {
                                    return this._playbackStateObserver.getCurrentState();
                                },
                            },
                            {
                                key: "getVideoVariants",
                                value: function () {
                                    return this._playerPromise.then(function (e) {
                                        return e.getVideoVariants();
                                    });
                                },
                            },
                            {
                                key: "setPreferredBitrate",
                                value: function (e) {
                                    var t = this;
                                    return this._playerPromise.then(function (r) {
                                        return r.setPreferredBitrate(e).then(t._assertOperationSuccess);
                                    });
                                },
                            },
                            {
                                key: "activateElement",
                                value: function () {
                                    return this._playerPromise.then(function (e) {
                                        return e.activateElement();
                                    });
                                },
                            },
                            {
                                key: "hideSubtitles",
                                value: function () {
                                    return this._listPlayer.hideSubtitles().then(this._assertOperationSuccess);
                                },
                            },
                            {
                                key: "showSubtitles",
                                value: function () {
                                    return this._listPlayer.showSubtitles().then(this._assertOperationSuccess);
                                },
                            },
                            {
                                key: "areSubtitlesShown",
                                value: function () {
                                    return this._listPlayer.areSubtitlesShown();
                                },
                            },
                            {
                                key: "getSubtitleLanguages",
                                value: function () {
                                    return this._listPlayer.getSubtitleLanguages();
                                },
                            },
                            {
                                key: "getActiveSubtitleLanguage",
                                value: function () {
                                    return this._listPlayer.getActiveSubtitleLanguage();
                                },
                            },
                            {
                                key: "setSubtitleLanguage",
                                value: function (e) {
                                    return this._listPlayer.setSubtitleLanguage(e).then(this._assertOperationSuccess);
                                },
                            },
                            {
                                key: "getMediaConfig",
                                value: function () {
                                    return this._listPlayer.getMediaConfig();
                                },
                            },
                        ]),
                        r
                    );
                })();
                exports.HarmonyStreamer = HarmonyStreamer;
            },
            { "../enums/error_source": 125, "./tp_service/client": 119, "@js-sdk/playback": 65, "@spotify-internal/emitter": 71 },
        ],
        119: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.TrackPlaybackServiceClient = void 0);
                var _debouncer = require("@js-sdk/debouncer"),
                    _emitter = require("@spotify-internal/emitter"),
                    _debugTools = require("@js-sdk/debug-tools"),
                    _playback = require("@js-sdk/playback"),
                    _typedefs = require("../../typedefs"),
                    _errors = require("../../enums/errors"),
                    _client = require("../../error/tp_service/client"),
                    _version = _interopRequireDefault(require("../../version")),
                    _defer = require("../helpers/defer"),
                    _assert = require("../../utils/assert");
                function _interopRequireDefault(e) {
                    return e && e.__esModule ? e : { default: e };
                }
                function _typeof(e) {
                    return (_typeof =
                        "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                            ? function (e) {
                                  return typeof e;
                              }
                            : function (e) {
                                  return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                              })(e);
                }
                function _slicedToArray(e, t) {
                    return _arrayWithHoles(e) || _iterableToArrayLimit(e, t) || _unsupportedIterableToArray(e, t) || _nonIterableRest();
                }
                function _nonIterableRest() {
                    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                function _unsupportedIterableToArray(e, t) {
                    if (e) {
                        if ("string" == typeof e) return _arrayLikeToArray(e, t);
                        var r = Object.prototype.toString.call(e).slice(8, -1);
                        return (
                            "Object" === r && e.constructor && (r = e.constructor.name), "Map" === r || "Set" === r ? Array.from(e) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? _arrayLikeToArray(e, t) : void 0
                        );
                    }
                }
                function _arrayLikeToArray(e, t) {
                    (null == t || t > e.length) && (t = e.length);
                    for (var r = 0, i = new Array(t); r < t; r++) i[r] = e[r];
                    return i;
                }
                function _iterableToArrayLimit(e, t) {
                    if ("undefined" != typeof Symbol && Symbol.iterator in Object(e)) {
                        var r = [],
                            i = !0,
                            n = !1,
                            a = void 0;
                        try {
                            for (var s, o = e[Symbol.iterator](); !(i = (s = o.next()).done) && (r.push(s.value), !t || r.length !== t); i = !0);
                        } catch (e) {
                            (n = !0), (a = e);
                        } finally {
                            try {
                                i || null == o.return || o.return();
                            } finally {
                                if (n) throw a;
                            }
                        }
                        return r;
                    }
                }
                function _arrayWithHoles(e) {
                    if (Array.isArray(e)) return e;
                }
                function _defineProperty(e, t, r) {
                    return t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : (e[t] = r), e;
                }
                function _classCallCheck(e, t) {
                    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
                }
                function _defineProperties(e, t) {
                    for (var r = 0; r < t.length; r++) {
                        var i = t[r];
                        (i.enumerable = i.enumerable || !1), (i.configurable = !0), "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);
                    }
                }
                function _createClass(e, t, r) {
                    return t && _defineProperties(e.prototype, t), r && _defineProperties(e, r), e;
                }
                function _inherits(e, t) {
                    if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function");
                    (e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } })), t && _setPrototypeOf(e, t);
                }
                function _setPrototypeOf(e, t) {
                    return (_setPrototypeOf =
                        Object.setPrototypeOf ||
                        function (e, t) {
                            return (e.__proto__ = t), e;
                        })(e, t);
                }
                function _createSuper(e) {
                    var t = _isNativeReflectConstruct();
                    return function () {
                        var r,
                            i = _getPrototypeOf(e);
                        if (t) {
                            var n = _getPrototypeOf(this).constructor;
                            r = Reflect.construct(i, arguments, n);
                        } else r = i.apply(this, arguments);
                        return _possibleConstructorReturn(this, r);
                    };
                }
                function _possibleConstructorReturn(e, t) {
                    return !t || ("object" !== _typeof(t) && "function" != typeof t) ? _assertThisInitialized(e) : t;
                }
                function _assertThisInitialized(e) {
                    if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return e;
                }
                function _isNativeReflectConstruct() {
                    if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
                    if (Reflect.construct.sham) return !1;
                    if ("function" == typeof Proxy) return !0;
                    try {
                        return Date.prototype.toString.call(Reflect.construct(Date, [], function () {})), !0;
                    } catch (e) {
                        return !1;
                    }
                }
                function _getPrototypeOf(e) {
                    return (_getPrototypeOf = Object.setPrototypeOf
                        ? Object.getPrototypeOf
                        : function (e) {
                              return e.__proto__ || Object.getPrototypeOf(e);
                          })(e);
                }
                var debugLogger = _debugTools.logging.forTag("tpapiclient"),
                    endSongLogger = _debugTools.logging.forTag("tpapiclient.endsong"),
                    endSongsLogger = _debugTools.logging.forTag("tpapiclient.endsongs"),
                    DEFAULT_STREAM_INTERVAL = 500,
                    DEALER_TRACK_PLAYBACK_FILTER = /^hm:\/\/track-playback\/v1/,
                    DEALER_PLAY_LOST_TOKEN_FILTER = /^hm:\/\/play-token\/lost/,
                    ENDPOINT = "http://@webgate/track-playback",
                    maybeRetry = function (e, t) {
                        var r = e.getStatusFamily();
                        return r === t.SERVER_ERROR || r === t.CONNECTION_ERROR;
                    },
                    LONG_BACKOFF = { condition: maybeRetry, maxRetries: 8 },
                    SHORT_BACKOFF = { condition: maybeRetry, maxRetries: 2 },
                    TrackPlaybackServiceClient = (function (e) {
                        _inherits(r, _emitter.EventEmitter);
                        var t = _createSuper(r);
                        function r(e) {
                            var i;
                            return (
                                _classCallCheck(this, r),
                                ((i = t.call(this))._deviceId = null),
                                (i._manifestFormats = []),
                                (i._sequenceNumber = 0),
                                (i._currentContext = null),
                                (i._loading = !1),
                                (i._lastSentStateUpdatePayload = null),
                                (i._totalStreamTime = 0),
                                (i._isSendingConflict = !1),
                                (i._queuedRejectedStates = []),
                                (i._isSendingUpdate = !1),
                                (i._queueSendUpdate = []),
                                (i._registered = !1),
                                (i._isDeregistering = !1),
                                (i._waitingForTrackingData = (0, _defer.defer)()),
                                (i._lastProcessedStateId = null),
                                (i._limitStateUpdates = !1),
                                (i._lastUpdateStateTime = 0),
                                (i._initialUpdateSent = !1),
                                (i._startedPlayingUpdateSent = !1),
                                (i._nextFinalizedDataPayload = null),
                                (i._switchingContext = !1),
                                (i._connectionId = null),
                                (i._transport = e.transport),
                                (i._logger = e.logger),
                                (i._endpoint = e.endpoint || ENDPOINT),
                                (i._listPlayer = e.listPlayer),
                                (i._ListClass = e.ListClass),
                                (i._currentGaiaVolume = e.initialVolume * _typedefs.GAIA_VOLUME),
                                (i._clientVersion = e.clientVersion),
                                (i._descriptorPromise = Promise.resolve(e.descriptor)),
                                i._init(),
                                (i._performCommand = i._performCommand.bind(_assertThisInitialized(i))),
                                (i._handleRegisterResponse = i._handleRegisterResponse.bind(_assertThisInitialized(i))),
                                (i._handleStateConflictResponse = i._handleStateConflictResponse.bind(_assertThisInitialized(i))),
                                (i.register = i.register.bind(_assertThisInitialized(i))),
                                (i._parseDescriptor = i._parseDescriptor.bind(_assertThisInitialized(i))),
                                (i._volumeDebouncer = new _debouncer.Debouncer(i._sendVolume.bind(_assertThisInitialized(i)), { blockInitial: !0 })),
                                i
                            );
                        }
                        return (
                            _createClass(
                                r,
                                [
                                    {
                                        key: "_init",
                                        value: function () {
                                            var e,
                                                t = this;
                                            (this._waitingForTrackingData = (0, _defer.defer)()),
                                                this._waitingForTrackingData.resolve(!0),
                                                this._transport.on(this._transport.EVENT_CONNECTION_ID, this._onConnectionId.bind(this)),
                                                this._transport.matchMessages(DEALER_PLAY_LOST_TOKEN_FILTER, this._onPlayTokenLost.bind(this)),
                                                this._transport.matchMessages(DEALER_TRACK_PLAYBACK_FILTER, this._onTrackPlaybackMessage.bind(this)),
                                                this._listPlayer.addListeners(
                                                    (_defineProperty((e = {}), _playback.PlaybackEvent.LIST_PLAYER_CAPPED, this._onCapped.bind(this)),
                                                    _defineProperty(e, _playback.PlaybackEvent.LIST_PLAYER_ERROR_SYNC, this._onError.bind(this)),
                                                    _defineProperty(e, _playback.PlaybackEvent.LIST_PLAYER_BEFORE_NEXT, this._onBeforeTrackChange.bind(this)),
                                                    _defineProperty(e, _playback.PlaybackEvent.LIST_PLAYER_BEFORE_PREVIOUS, this._onBeforeTrackChange.bind(this)),
                                                    _defineProperty(e, _playback.PlaybackEvent.LIST_PLAYER_BEFORE_PLAYER_LOAD, this._onBeforePlayerLoad.bind(this)),
                                                    _defineProperty(e, _playback.PlaybackEvent.LIST_PLAYER_PLAYER_LOAD, this._onListPlayerLoad.bind(this)),
                                                    _defineProperty(e, _playback.PlaybackEvent.LIST_PLAYER_BEFORE_TRACK_LOAD, this._onBeforeTrackLoad.bind(this)),
                                                    _defineProperty(e, _playback.PlaybackEvent.LIST_PLAYER_POSITION_CHANGED, this._onPositionChanged.bind(this)),
                                                    _defineProperty(e, _playback.PlaybackEvent.LIST_PLAYER_DURATION_CHANGED, this._onDurationChanged.bind(this)),
                                                    _defineProperty(e, _playback.PlaybackEvent.LIST_PLAYER_VOLUME_CHANGED, this._onVolumeChanged.bind(this)),
                                                    _defineProperty(e, _playback.PlaybackEvent.LIST_PLAYER_PAUSED, this._onPlayPause.bind(this, !0)),
                                                    _defineProperty(e, _playback.PlaybackEvent.LIST_PLAYER_PLAYING, this._onPlayPause.bind(this, !1)),
                                                    _defineProperty(e, _playback.PlaybackEvent.LIST_PLAYER_PLAYED_THRESHOLD_REACHED, this._onPlayThresholdReached.bind(this)),
                                                    _defineProperty(e, _playback.PlaybackEvent.LIST_PLAYER_PROGRESS, this._onProgress.bind(this)),
                                                    _defineProperty(e, _playback.PlaybackEvent.LIST_PLAYER_TRACKING_DATA_CREATED, this._onTrackDataCreatedEvent.bind(this)),
                                                    _defineProperty(e, _playback.PlaybackEvent.LIST_PLAYER_TRACKING_DATA_FINALIZED, this._onTrackDataFinalizedEvent.bind(this)),
                                                    e)
                                                ),
                                                this._descriptorPromise.then(function (e) {
                                                    e.on("descriptor_changed", function () {
                                                        t._parseDescriptor(e), t._updateDeviceInfo();
                                                    });
                                                });
                                        },
                                    },
                                    {
                                        key: "_onBeforeTrackChange",
                                        value: function () {
                                            var e, t;
                                            if (!this._nextFinalizedDataPayload && !this._switchingContext) {
                                                var r = null !== (t = null === (e = this._currentContext) || void 0 === e ? void 0 : e.getStateRef()) && void 0 !== t ? t : null,
                                                    i = this._generateStatePayload(r, "track_data_finalized");
                                                this._setSequenceNumber(i), (this._nextFinalizedDataPayload = i);
                                            }
                                        },
                                    },
                                    {
                                        key: "_onBeforeTrackLoad",
                                        value: function (e) {
                                            var t;
                                            (this._loading = !0),
                                                (this._switchingContext = !1),
                                                (this._currentTrackDuration = void 0),
                                                (this._stateEventPositionOverride = null === (t = e.data.newTrack.options) || void 0 === t ? void 0 : t.position);
                                        },
                                    },
                                    {
                                        key: "_onBeforePlayerLoad",
                                        value: function (e) {
                                            var t = this._currentContext;
                                            if (t) {
                                                var r = t.getCurrentTrack();
                                                (this._currentTrackDuration = (null == r ? void 0 : r.metadata.duration) || 0), (this._currentMediaType = e.data.track.mediaType.toUpperCase());
                                                var i = e.data.options;
                                                t.setPaused(!i.autoplay), this._setCurrentTrackPosition((i && i.position) || 0), this._updateState("before_track_load"), (this._startedPlayingUpdateSent = !1), (this._initialUpdateSent = !1);
                                            }
                                        },
                                    },
                                    {
                                        key: "_onCapped",
                                        value: function () {
                                            this._listPlayer.clear(_playback.Reason.CAPPED),
                                                (this._currentContext = null),
                                                this._updateState(_playback.Reason.CAPPED),
                                                this._setCurrentTrackPosition(void 0),
                                                (this._lastProcessedStateId = null),
                                                this.emit("state_cleared", null);
                                        },
                                    },
                                    {
                                        key: "_onConnectionId",
                                        value: function (e) {
                                            var t = this;
                                            (this._connectionId = e.data.id),
                                                this._isDeregistering ||
                                                    ((this._registered = !1),
                                                    Promise.all([this._listPlayer.getVolume(), this._descriptorPromise.then(this._parseDescriptor)])
                                                        .then(this.register, function (e) {
                                                            debugLogger.info("Skipping registration due to error", e), t.emit("registration_aborted", { reason_error: e });
                                                        })
                                                        .catch(function () {}));
                                        },
                                    },
                                    {
                                        key: "_onDurationChanged",
                                        value: function (e) {
                                            var t,
                                                r = null === (t = this._currentContext) || void 0 === t ? void 0 : t.getCurrentTrack();
                                            (null == r ? void 0 : r.metadata.uri) === e.data.track.uri && ((this._currentTrackDuration = e.data.duration), this._emitStateChanged());
                                        },
                                    },
                                    {
                                        key: "_onError",
                                        value: function (e) {
                                            "position" in e.data && (this._setCurrentTrackPosition(e.data.position), this._updateState("error"));
                                        },
                                    },
                                    {
                                        key: "_onPlayPause",
                                        value: function (e, t) {
                                            var r = this._currentContext;
                                            r &&
                                                (r.setPaused(e),
                                                "position" in t.data && this._setAllTrackPositions(t.data.position),
                                                t.data.track.stateId && this._shouldSendUpdateForEvent(t.data.track.stateId) ? this._updateState(e ? "pause" : "resume") : ((this._lastProcessedStateId = null), this._emitStateChanged()));
                                        },
                                    },
                                    {
                                        key: "_onPlayThresholdReached",
                                        value: function (e) {
                                            (this._initialUpdateSent = !0), this._setAllTrackPositions(e.data.position), this._updateState("played_threshold_reached");
                                        },
                                    },
                                    {
                                        key: "_onPlayTokenLost",
                                        value: function () {
                                            this._listPlayer.pause().catch(function () {});
                                        },
                                    },
                                    {
                                        key: "_onPositionChanged",
                                        value: function (e) {
                                            this._loading ||
                                                (this._setCurrentTrackPosition(e.data.position),
                                                e.data.track && this._shouldSendUpdateForEvent(e.data.track.stateId) ? this._updateState("position_changed") : ((this._lastProcessedStateId = null), this._emitStateChanged()));
                                        },
                                    },
                                    {
                                        key: "_onProgress",
                                        value: function (e) {
                                            var t;
                                            if (!this._loading && this._currentContext) {
                                                this._setAllTrackPositions(e.data.position), !this._startedPlayingUpdateSent && e.data.played > 1e3 && ((this._startedPlayingUpdateSent = !0), this._updateState("started_playing"));
                                                var r = e.data.logData;
                                                if (r) {
                                                    r.noLog || (this._totalStreamTime += null !== (t = e.data.interval) && void 0 !== t ? t : DEFAULT_STREAM_INTERVAL);
                                                    var i = this._currentContext.getCurrentTrack(),
                                                        n = i && "number" == typeof i.ms_playing_update_interval ? i.ms_playing_update_interval : null;
                                                    this._initialUpdateSent && null !== n && n > 0 && Date.now() - this._lastUpdateStateTime > n && this._updateState("progress");
                                                }
                                            }
                                        },
                                    },
                                    {
                                        key: "_onTrackDataCreatedEvent",
                                        value: function () {
                                            this._waitingForTrackingData = (0, _defer.defer)();
                                        },
                                    },
                                    {
                                        key: "_onTrackDataFinalizedEvent",
                                        value: function (e) {
                                            var t = this._nextFinalizedDataPayload;
                                            t && ((t.playback_stats = e.data.playbackStats), this._updateState("track_data_finalized", t)),
                                                (this._nextFinalizedDataPayload = null),
                                                this._waitingForTrackingData && this._waitingForTrackingData.resolve(!0);
                                        },
                                    },
                                    {
                                        key: "_onListPlayerLoad",
                                        value: function (e) {
                                            this._loading = !1;
                                            var t = this._currentContext;
                                            t && (t.setPaused(!e.data.autoplay), this._setCurrentTrackPosition(e.data.position || 0));
                                        },
                                    },
                                    {
                                        key: "_onTrackPlaybackMessage",
                                        value: function (e) {
                                            var t = e.payloads;
                                            Array.isArray(t) && t.length && this._performCommand(t[0]);
                                        },
                                    },
                                    {
                                        key: "_onVolumeChanged",
                                        value: function (e) {
                                            var t;
                                            if (((this._currentGaiaVolume = e.data.volume * _typedefs.GAIA_VOLUME), this._registered)) {
                                                var r = null !== (t = e.data.commandId) && void 0 !== t ? t : "",
                                                    i = { seq_num: void 0, volume: this._currentGaiaVolume, command_id: r };
                                                this._volumeDebouncer.async(i);
                                            }
                                        },
                                    },
                                    {
                                        key: "_clearSessionData",
                                        value: function () {
                                            (this._connectionId = null),
                                                (this._sequenceNumber = 0),
                                                (this._currentContext = null),
                                                (this._lastSentStateUpdatePayload = null),
                                                (this._totalStreamTime = 0),
                                                (this._isSendingConflict = !1),
                                                (this._isSendingUpdate = !1),
                                                (this._queueSendUpdate = []),
                                                (this._previousTrackPosition = void 0),
                                                (this._currentTrackPosition = void 0),
                                                (this._currentTrackDuration = void 0),
                                                (this._currentMediaType = void 0),
                                                (this._lastProcessedStateId = null),
                                                this.emit("state_cleared", null);
                                        },
                                    },
                                    {
                                        key: "_createStateRef",
                                        value: function (e, t) {
                                            if (!t) return null;
                                            var r = e.states[t.state_index];
                                            if (!r) throw new _client.TrackPlayerAPIClientError(_errors.HarmonyErrors.TP_CANNOT_CREATE_STATE_REF, "Invalid state reference.");
                                            return { state_machine_id: e.state_machine_id, state_id: r.state_id, paused: t.paused };
                                        },
                                    },
                                    {
                                        key: "_deregisterFromService",
                                        value: function (e) {
                                            var t = this,
                                                r = null,
                                                i = this._currentContext;
                                            i && (e && (i.setPaused(!e.playing), this._setAllTrackPositions(e.position)), (r = i.getStateRef()));
                                            var n = this._generateStatePayload(r, "deregister");
                                            this._setSequenceNumber(n);
                                            var a = "".concat(this._endpoint, "/v1/devices/").concat(this._deviceId);
                                            return this._transport.request(a, { authorize: !0, method: "DELETE", payload: JSON.stringify(n), responseType: "json", retry: SHORT_BACKOFF }).then(function (e) {
                                                if (200 !== e.status && 204 !== e.status) return (t._registered = !0), !1;
                                                var r = e.body;
                                                return r && (r.endsong && endSongLogger.log(r.endsong), r.endsongs && endSongsLogger.log(r.endsongs)), t._clearSessionData(), t.emit("deregistered", null), !0;
                                            });
                                        },
                                    },
                                    {
                                        key: "_emitError",
                                        value: function (e) {
                                            var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                                            this._logger
                                                .logJSSDKError(
                                                    { source: "tpapi-client", source_version: _version.default.tagged, type: e.code, message: e && e.message, stack: e && e.stack, json_data: t, json_data_version: "1.0.0" },
                                                    "object"
                                                )
                                                .catch(function (e) {
                                                    debugLogger.error("Track-Playback Logging Error", e);
                                                }),
                                                this.emit("error", { error: e, data: t });
                                        },
                                    },
                                    {
                                        key: "_emitStateChanged",
                                        value: function () {
                                            var e = this._currentContext;
                                            if (e) {
                                                var t = this._currentTrackPosition || 0;
                                                void 0 !== this._stateEventPositionOverride && ((t = this._stateEventPositionOverride), (this._stateEventPositionOverride = void 0)),
                                                    this.emit("state_changed", { position: t, stateMachine: e.getStateMachine(), stateRef: e.getInternalStateRef(), duration: this._currentTrackDuration || 0, paused: e.isPaused() });
                                            }
                                        },
                                    },
                                    {
                                        key: "_generateStatePayload",
                                        value: function (e, t) {
                                            return {
                                                seq_num: void 0,
                                                seq_nums: void 0,
                                                state_ref: e,
                                                sub_state: {
                                                    playback_speed: e && !e.paused ? 1 : 0,
                                                    position: this._currentTrackPosition,
                                                    duration: this._currentTrackDuration || void 0,
                                                    stream_time: this._totalStreamTime,
                                                    media_type: this._currentMediaType,
                                                },
                                                previous_position: this._previousTrackPosition,
                                                playback_stats: void 0,
                                                rejected_state_refs: void 0,
                                                debug_source: t,
                                            };
                                        },
                                    },
                                    {
                                        key: "_handleRegisterResponse",
                                        value: function (e) {
                                            var t;
                                            if (429 === e.status)
                                                return (
                                                    ((t = _client.TrackPlayerAPIClientError.fatal(_errors.HarmonyErrors.TP_MAX_SUBSCRIPTIONS_REACHED, "Max connections reached")).maxedSubscriptions = !0),
                                                    (t.status = e.status),
                                                    this.emit("max_subscriptions_reached", { error: t }),
                                                    Promise.reject(t)
                                                );
                                            if (
                                                (403 === e.status && e.body && "PREMIUM_REQUIRED" === e.body.error_type
                                                    ? (t = _client.TrackPlayerAPIClientError.fatal(_errors.HarmonyErrors.TP_REGISTRATION_FAILED_NON_PREMIUM, "Cannot register to Track Playback with non-premium user."))
                                                    : 200 !== e.status
                                                    ? (t = _client.TrackPlayerAPIClientError.fatal(
                                                          _errors.HarmonyErrors.TP_REGISTRATION_FAILED_WITH_STATUS,
                                                          "track-playback service responded with status ".concat(e.status, " when registering device")
                                                      ))
                                                    : e.body || (t = _client.TrackPlayerAPIClientError.fatal(_errors.HarmonyErrors.TP_NO_RESPONSE_BODY, "Unexpected empty response body from registration request.")),
                                                t)
                                            )
                                                return (t.status = e.status), Promise.reject(t);
                                            var r = e.body;
                                            return (
                                                r.endsong && endSongLogger.log(r.endsong),
                                                r.endsongs && endSongsLogger.log(r.endsongs),
                                                (this._sequenceNumber = r.initial_seq_num),
                                                (this._registered = !0),
                                                this.emit("registered", { deviceId: this._deviceId }),
                                                Promise.resolve(!0)
                                            );
                                        },
                                    },
                                    {
                                        key: "_handleStateConflictResponse",
                                        value: function (e) {
                                            var t;
                                            if (e.status >= 200 && e.status < 300) {
                                                var r = null === (t = e.body) || void 0 === t ? void 0 : t.commands;
                                                if (!r || !r.length) return;
                                                for (var i = 0, n = r.length; i < n; i++) this._performCommand(r[i]);
                                            } else {
                                                var a = new _client.TrackPlayerAPIClientError(_errors.HarmonyErrors.TP_CONFLICT_REQUEST_FAILED_WITH_STATUS, "Track-Playback service responded with ".concat(e.status));
                                                (a.status = e.status), this._emitError(a);
                                            }
                                        },
                                    },
                                    {
                                        key: "_handleStateUpdateResponse",
                                        value: function (e, t) {
                                            var r;
                                            if (200 !== t.status)
                                                return (
                                                    ((r = new _client.TrackPlayerAPIClientError(_errors.HarmonyErrors.TP_PARSE_STATE_UPDATE_FAILED_WITH_STATUS, "Service responded with status ".concat(t.status))).status = t.status),
                                                    Promise.reject(r)
                                                );
                                            if (!t.body)
                                                return (
                                                    ((r = new _client.TrackPlayerAPIClientError(_errors.HarmonyErrors.TP_UPDATE_REQUEST_EMPTY_RESPONSE, "Unexpected empty response body from state update request.")).status = t.status),
                                                    Promise.reject(r)
                                                );
                                            var i = t.body;
                                            i.endsong && endSongLogger.log(i.endsong), i.endsongs && endSongsLogger.log(i.endsongs);
                                            var n = this._currentContext;
                                            if (!n) return Promise.resolve();
                                            var a = i.state_machine,
                                                s = i.updated_state_ref;
                                            return this._isCurrentStateRef(e) ? (n.setStateMachine(a), n.setCurrentState(s), this._emitStateChanged(), Promise.resolve()) : Promise.resolve();
                                        },
                                    },
                                    {
                                        key: "_isCurrentStateRef",
                                        value: function (e) {
                                            var t = this._currentContext ? this._currentContext.getStateRef() : null;
                                            return (!t && !e) || (!(!t || !e) && t.state_machine_id === e.state_machine_id && t.state_id === e.state_id && t.paused === e.paused);
                                        },
                                    },
                                    {
                                        key: "_logUnsentStateUpdate",
                                        value: function (e) {
                                            debugLogger.info("Unsent state update.", e),
                                                this._logger
                                                    .logClientEvent({ source: "tpapi-client", source_version: _version.default.tagged, source_vendor: "spotify", event: "unsent-state-update", event_version: "1.0.0", json_data: e }, "object")
                                                    .catch(function (e) {
                                                        debugLogger.error("Track-Playback Logging Error", e);
                                                    });
                                        },
                                    },
                                    {
                                        key: "_logout",
                                        value: function () {
                                            var e = this;
                                            this._listPlayer.pause().catch(function () {}),
                                                this.emit("state_cleared", null),
                                                this.deregister().then(function (t) {
                                                    (e._currentContext = null), e._setCurrentTrackPosition(void 0), t && e.emit("logout", null);
                                                });
                                        },
                                    },
                                    {
                                        key: "_parseDescriptor",
                                        value: function (e) {
                                            return (this._deviceId = e.getId()), (this._deviceInfo = e.toTrackPlaybackDeviceInfo()), (this._manifestFormats = e.getManifestFormats()), !0;
                                        },
                                    },
                                    {
                                        key: "_performCommand",
                                        value: function (e) {
                                            switch (e.type) {
                                                case "set_volume":
                                                    this._setVolume(e);
                                                    break;
                                                case "log_out":
                                                    this._logout();
                                                    break;
                                                case "replace_state":
                                                    this._replaceState(e);
                                                    break;
                                                case "ping":
                                                    this._updateState("ping");
                                                    break;
                                                default:
                                                    this._emitError(new _client.TrackPlayerAPIClientError(_errors.HarmonyErrors.TP_UNKNOWN_COMMAND, "Received unknown command."), { command: e });
                                            }
                                        },
                                    },
                                    {
                                        key: "_rejectState",
                                        value: function (e) {
                                            var t = this,
                                                r = this._queuedRejectedStates;
                                            if ((void 0 !== e && r.push(e), this._registered && !this._isSendingConflict && r.length)) {
                                                this._isSendingConflict = !0;
                                                var i = r.splice(0, 5),
                                                    n = this._currentContext ? this._currentContext.getStateRef() : null,
                                                    a = this._generateStatePayload(n);
                                                (a.rejected_state_refs = i), this._setSequenceNumbers(a, i.length);
                                                var s = function () {
                                                        (t._isSendingConflict = !1), t._rejectState();
                                                    },
                                                    o = "".concat(this._endpoint, "/v1/devices/").concat(this._deviceId, "/state_conflict");
                                                this._transport
                                                    .request(o, { authorize: !0, method: "POST", headers: { "Content-Type": "application/json" }, responseType: "json", payload: JSON.stringify(a), retry: SHORT_BACKOFF })
                                                    .then(this._handleStateConflictResponse)
                                                    .then(s, s);
                                            }
                                        },
                                    },
                                    {
                                        key: "_replaceState",
                                        value: function (e) {
                                            var t,
                                                r,
                                                i,
                                                n = this._listPlayer,
                                                a = e.state_machine,
                                                s = e.state_ref,
                                                o = this._createStateRef(a, s);
                                            if (this._isCurrentStateRef(e.prev_state_ref))
                                                if (s) {
                                                    var _ = null !== (r = null === (t = this._currentContext) || void 0 === t ? void 0 : t.getStateRef()) && void 0 !== r ? r : null;
                                                    if (((0, _assert.assert)(null !== o, "New state reference is null"), this._currentContext && (null == _ ? void 0 : _.state_id) === o.state_id)) {
                                                        var u = this._currentContext;
                                                        u.setStateMachine(a), u.setCurrentState(s);
                                                        var c = !1;
                                                        u.isPaused() !== s.paused && (c = !0), s.paused ? (u.setPaused(!0), n.pause()) : (u.setPaused(!1), n.resume());
                                                        var l = parseInt(e.seek_to, 10);
                                                        u.allowSeeking() && !isNaN(l) && (n.seek(l), this._setCurrentTrackPosition(l), (c = !0)),
                                                            c ? this._emitStateChanged() : ((this._lastProcessedStateId = null), this._updateState("modify_current_state"));
                                                    } else {
                                                        (this._lastProcessedStateId = null !== (i = o.state_id) && void 0 !== i ? i : null), this._currentContext && this._onBeforeTrackChange();
                                                        var d = this._ListClass.create("spotify:app:jsspeaker", this._manifestFormats);
                                                        d.setStateMachine(a), d.startAtState(s), this._deviceId && d.setDeviceId(this._deviceId), (this._currentContext = d);
                                                        var h = e.seek_to || 0;
                                                        d.setInitialPosition(h), (this._loading = !0), (this._switchingContext = !0), n.play(d, { reason: _playback.Reason.REMOTE });
                                                    }
                                                } else this._clearContextAndState();
                                            else this._rejectState(o);
                                        },
                                    },
                                    {
                                        key: "_clearContextAndState",
                                        value: function () {
                                            var e = this._listPlayer;
                                            e.pause().catch(function () {}),
                                                e.clear(_playback.Reason.REMOTE),
                                                (this._currentContext = null),
                                                this._updateState("state_clear"),
                                                this._setAllTrackPositions(void 0),
                                                (this._lastProcessedStateId = null),
                                                this.emit("state_cleared", null),
                                                (this._loading = !0);
                                        },
                                    },
                                    {
                                        key: "_sendDevicesRequest",
                                        value: function (e, t) {
                                            var r = "".concat(this._endpoint, "/v1/devices");
                                            return (
                                                "PUT" === e && (r = "".concat(r, "/").concat(this._deviceId)),
                                                this._transport.request(r, { authorize: !0, method: e || "POST", headers: { "Content-Type": "application/json" }, responseType: "json", payload: JSON.stringify(t), retry: LONG_BACKOFF })
                                            );
                                        },
                                    },
                                    {
                                        key: "_sendVolume",
                                        value: function (e) {
                                            var t = "".concat(this._endpoint, "/v1/devices/").concat(this._deviceId, "/volume");
                                            return this._setSequenceNumber(e), this._transport.request(t, { authorize: !0, method: "PUT", headers: { "Content-Type": "application/json" }, payload: JSON.stringify(e) });
                                        },
                                    },
                                    {
                                        key: "_setAllTrackPositions",
                                        value: function (e) {
                                            (this._previousTrackPosition = e), (this._currentTrackPosition = e);
                                        },
                                    },
                                    {
                                        key: "_setCurrentTrackPosition",
                                        value: function (e) {
                                            (this._previousTrackPosition = this._currentTrackPosition), (this._currentTrackPosition = e);
                                        },
                                    },
                                    {
                                        key: "_setSequenceNumber",
                                        value: function (e) {
                                            return void 0 === e.seq_num && (e.seq_num = ++this._sequenceNumber), e;
                                        },
                                    },
                                    {
                                        key: "_setSequenceNumbers",
                                        value: function (e, t) {
                                            e.seq_nums = [];
                                            for (var r = 0; r < t; r++) e.seq_nums.push(++this._sequenceNumber);
                                            return e;
                                        },
                                    },
                                    {
                                        key: "_setVolume",
                                        value: function (e) {
                                            var t,
                                                r = e.volume / _typedefs.GAIA_VOLUME;
                                            this._listPlayer.setVolume(r, null !== (t = e.command_id) && void 0 !== t ? t : "tpcommand-".concat(Date.now()));
                                        },
                                    },
                                    {
                                        key: "_shouldSendUpdateForEvent",
                                        value: function (e) {
                                            return !(!e || e === this._lastProcessedStateId);
                                        },
                                    },
                                    {
                                        key: "_updateDeviceInfo",
                                        value: function () {
                                            var e = this;
                                            this._registered &&
                                                this._deviceInfo &&
                                                this._sendDevicesRequest("PUT", this._deviceInfo).then(function (t) {
                                                    204 === t.status && e.emit("registration_updated", null);
                                                });
                                        },
                                    },
                                    {
                                        key: "_updateState",
                                        value: function (e, t) {
                                            var r,
                                                i,
                                                n,
                                                a,
                                                s = this;
                                            if (this._registered)
                                                if (
                                                    (t
                                                        ? ((n = t.state_ref), (a = t))
                                                        : ((n = null !== (i = null === (r = this._currentContext) || void 0 === r ? void 0 : r.getStateRef()) && void 0 !== i ? i : null), (a = this._generateStatePayload(n, e))),
                                                    this._wasStatePayloadSentRecently(a))
                                                ) {
                                                    if ((this._emitStateChanged(), this._isSendingUpdate && this._limitStateUpdates)) return this._logUnsentStateUpdate(a), void this._queueSendUpdate.push(e);
                                                    (this._isSendingUpdate = !0), (this._queueSendUpdate = []), this._setSequenceNumber(a), (this._lastSentStateUpdatePayload = a);
                                                    var o = function () {
                                                            (s._isSendingUpdate = !1), s._queueSendUpdate.length && s._updateState(s._queueSendUpdate.join(",")), debugLogger.info("State update sent.", e, a);
                                                        },
                                                        _ = "".concat(this._endpoint, "/v1/devices/").concat(this._deviceId, "/state");
                                                    (this._lastUpdateStateTime = Date.now()),
                                                        this._transport
                                                            .request(_, { authorize: !0, method: "PUT", headers: { "Content-Type": "application/json" }, responseType: "json", payload: JSON.stringify(a), retry: LONG_BACKOFF })
                                                            .then(this._handleStateUpdateResponse.bind(this, n))
                                                            .then(o, function (e) {
                                                                s._emitError(e), o();
                                                            });
                                                } else debugLogger.info("State update ignored (duplicate).", a);
                                        },
                                    },
                                    {
                                        key: "_wasStatePayloadSentRecently",
                                        value: function (e) {
                                            var t = this._lastSentStateUpdatePayload;
                                            if (!t || !t.state_ref || !e.state_ref) return !0;
                                            var r = e.state_ref,
                                                i = t.state_ref;
                                            if (r.paused !== i.paused || r.state_id !== i.state_id || r.state_machine_id !== i.state_machine_id) return !0;
                                            var n = e.sub_state,
                                                a = t.sub_state;
                                            return n.playback_speed !== a.playback_speed || n.position !== a.position || n.duration !== a.duration || e.previous_position !== t.previous_position;
                                        },
                                    },
                                    {
                                        key: "stop",
                                        value: function () {
                                            return !(!this._registered || !this._currentContext) && (this._clearContextAndState(), !0);
                                        },
                                    },
                                    {
                                        key: "deregister",
                                        value: function () {
                                            var e = this;
                                            return this._registered
                                                ? ((this._isDeregistering = !0),
                                                  (this._registered = !1),
                                                  this._listPlayer.getPlayerState().then(
                                                      function (t) {
                                                          return Promise.all([e._deregisterFromService(t), e._waitingForTrackingData.promise, e._listPlayer.stop().catch(function () {})]).then(function (t) {
                                                              var r = _slicedToArray(t, 1)[0];
                                                              return (e._isDeregistering = !1), r;
                                                          });
                                                      },
                                                      function () {
                                                          return (e._isDeregistering = !1), (e._registered = !0), !1;
                                                      }
                                                  ))
                                                : Promise.resolve(!1);
                                        },
                                    },
                                    {
                                        key: "register",
                                        value: function () {
                                            var e,
                                                t = this;
                                            if (this._registered) return Promise.resolve(!1);
                                            if (!this._deviceInfo) return Promise.reject(new Error("Need DeviceInfo for device registration."));
                                            if (!this._connectionId) return Promise.reject(new Error("Need connection-id for device registration"));
                                            var r = this._currentContext;
                                            return (
                                                r && ((e = this._generateStatePayload(r.getStateRef(), "register")), this._setSequenceNumber(e)),
                                                this._sendDevicesRequest("POST", {
                                                    device: this._deviceInfo,
                                                    connection_id: this._connectionId,
                                                    client_version: this._clientVersion,
                                                    previous_session_state: e,
                                                    volume: this._currentGaiaVolume,
                                                })
                                                    .then(this._handleRegisterResponse)
                                                    .catch(function (e) {
                                                        return e && !e.maxedSubscriptions && ((e.registration = !0), t._emitError(e)), !1;
                                                    })
                                            );
                                        },
                                    },
                                ],
                                [
                                    {
                                        key: "create",
                                        value: function (e) {
                                            return new r(e);
                                        },
                                    },
                                ]
                            ),
                            r
                        );
                    })();
                exports.TrackPlaybackServiceClient = TrackPlaybackServiceClient;
            },
            {
                "../../enums/errors": 126,
                "../../error/tp_service/client": 130,
                "../../typedefs": 132,
                "../../utils/assert": 133,
                "../../version": 136,
                "../helpers/defer": 114,
                "@js-sdk/debouncer": 6,
                "@js-sdk/debug-tools": 11,
                "@js-sdk/playback": 65,
                "@spotify-internal/emitter": 71,
            },
        ],
        120: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.TrackPlayerServiceContext = void 0);
                var _playback = require("@js-sdk/playback"),
                    _errors = require("../../enums/errors"),
                    _client = require("../../error/tp_service/client"),
                    _resolve_manifest_file = require("./resolve_manifest_file");
                function _classCallCheck(e, t) {
                    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
                }
                function _defineProperties(e, t) {
                    for (var a = 0; a < t.length; a++) {
                        var i = t[a];
                        (i.enumerable = i.enumerable || !1), (i.configurable = !0), "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);
                    }
                }
                function _createClass(e, t, a) {
                    return t && _defineProperties(e.prototype, t), a && _defineProperties(e, a), e;
                }
                var TrackPlayerServiceContext = (function () {
                    function e(t, a) {
                        _classCallCheck(this, e),
                            (this._stateMachine = null),
                            (this._currentState = null),
                            (this._currentStateIndex = null),
                            (this._pausedState = !1),
                            (this._initialPlaybackPosition = null),
                            (this._uri = t),
                            (this._manifestFormats = a);
                    }
                    return (
                        _createClass(
                            e,
                            [
                                {
                                    key: "setPaused",
                                    value: function (e) {
                                        this._pausedState = e;
                                    },
                                },
                                {
                                    key: "isPaused",
                                    value: function () {
                                        return this._currentStateIndex && this._currentStateIndex < 0 && this._currentState && this._currentState.transitions.advance ? !!this._currentState.transitions.advance.paused : this._pausedState;
                                    },
                                },
                                {
                                    key: "setInitialPosition",
                                    value: function (e) {
                                        this._initialPlaybackPosition = e;
                                    },
                                },
                                {
                                    key: "setStateMachine",
                                    value: function (e) {
                                        this._stateMachine = e;
                                    },
                                },
                                {
                                    key: "setDeviceId",
                                    value: function (e) {
                                        this._deviceId = e;
                                    },
                                },
                                {
                                    key: "startAtState",
                                    value: function (e) {
                                        var t = this._stateMachine && this._stateMachine.states[e.state_index];
                                        if (!t) throw new _client.TrackPlayerAPIClientError(_errors.HarmonyErrors.TP_MISSING_INITIAL_STATE, "Invalid state reference.");
                                        var a = t.transitions;
                                        (this._currentStateIndex = -1),
                                            (this._currentState = {
                                                decoy: !0,
                                                paused: !!e.paused,
                                                track: -1,
                                                state_id: null,
                                                transitions: { advance: e, show_next: a.show_next, show_prev: a.show_prev, skip_next: e, skip_prev: a.skip_prev },
                                            });
                                    },
                                },
                                {
                                    key: "setCurrentState",
                                    value: function (e) {
                                        var t = e.state_index;
                                        (this._currentStateIndex = t), (this._currentState = this._stateMachine && this._stateMachine.states[t]);
                                    },
                                },
                                {
                                    key: "getStateMachine",
                                    value: function () {
                                        return this._stateMachine;
                                    },
                                },
                                {
                                    key: "getInternalStateRef",
                                    value: function () {
                                        var e = this._pausedState,
                                            t = this._currentStateIndex;
                                        if (!t) return null;
                                        if (t && t < 0) {
                                            var a = this._currentState && this._currentState.transitions.advance;
                                            a && ((t = a.state_index), (e = !!a.paused));
                                        }
                                        return { paused: e, state_index: t };
                                    },
                                },
                                {
                                    key: "getStateRef",
                                    value: function () {
                                        var e,
                                            t,
                                            a = this._stateMachine;
                                        if (!a || null === this._currentStateIndex) return null;
                                        if (this._currentStateIndex < 0) {
                                            var i = this._currentState && this._currentState.transitions.advance;
                                            i && ((e = a.states[i.state_index]), (t = i.paused));
                                        } else (e = a.states[this._currentStateIndex]), (t = this._pausedState);
                                        return e ? { state_machine_id: a.state_machine_id, state_id: e.state_id, paused: !!t } : null;
                                    },
                                },
                                {
                                    key: "getCurrentTrack",
                                    value: function () {
                                        var e,
                                            t = this._stateMachine;
                                        if (!t || null === this._currentStateIndex) return null;
                                        if (this._currentStateIndex < 0) {
                                            var a = this._currentState && this._currentState.transitions.advance;
                                            a && (e = t.states[a.state_index]);
                                        } else e = t.states[this._currentStateIndex];
                                        return e ? t.tracks[e.track] : null;
                                    },
                                },
                                {
                                    key: "startAt",
                                    value: function () {
                                        return Promise.resolve(_playback.OperationResult.SUCCESS);
                                    },
                                },
                                {
                                    key: "setShuffle",
                                    value: function () {
                                        return Promise.resolve(_playback.OperationResult.SUCCESS);
                                    },
                                },
                                {
                                    key: "setRepeatMode",
                                    value: function () {
                                        return Promise.resolve(_playback.OperationResult.SUCCESS);
                                    },
                                },
                                {
                                    key: "next",
                                    value: function (e) {
                                        var t = this._currentState,
                                            a = null;
                                        if (t) {
                                            var i = t.transitions;
                                            switch (e.reason) {
                                                case _playback.Reason.FORWARD_BUTTON:
                                                    "skip_next" in i && (a = i.skip_next);
                                                    break;
                                                default:
                                                    "advance" in i && (a = i.advance);
                                            }
                                        }
                                        return this._transitionTo(e, a, !1);
                                    },
                                },
                                {
                                    key: "peekNext",
                                    value: function (e) {
                                        var t = this._currentState,
                                            a = null;
                                        if (t) {
                                            var i = t.transitions;
                                            switch (e.reason) {
                                                case _playback.Reason.FORWARD_BUTTON:
                                                    "skip_next" in i && (a = i.skip_next);
                                                    break;
                                                default:
                                                    "advance" in i && (a = i.advance);
                                            }
                                        }
                                        return this._transitionTo(e, a, !0);
                                    },
                                },
                                {
                                    key: "previous",
                                    value: function (e) {
                                        var t = this._currentState,
                                            a = null;
                                        t && (a = t.transitions.skip_prev);
                                        return this._transitionTo(e, a, !1);
                                    },
                                },
                                {
                                    key: "allowSeeking",
                                    value: function () {
                                        return !!this._currentState && !this._currentState.disallow_seeking;
                                    },
                                },
                                {
                                    key: "_transitionTo",
                                    value: function (e, t) {
                                        var a = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
                                            i = e.reason,
                                            r = e.listConstants;
                                        if (!t) return Promise.resolve(r.FORBIDDEN);
                                        var n = this._stateMachine;
                                        if (!n) return Promise.resolve(r.NULL_VALUE);
                                        var s = n.states[t.state_index];
                                        if (!s) return Promise.resolve(r.NULL_VALUE);
                                        var u = n.tracks[s.track];
                                        if (!u || !u.metadata || !u.metadata.uri) return Promise.resolve(r.NULL_VALUE);
                                        if (!this._currentState) return Promise.resolve(r.NULL_VALUE);
                                        var o = this._currentState,
                                            l = o.decoy ? !!o.paused : t.paused;
                                        a || ((this._currentState = s), (this._currentStateIndex = t.state_index), (this._pausedState = !!l));
                                        var c = 0;
                                        a || null === this._initialPlaybackPosition
                                            ? "initial_playback_position" in s && (c = s.initial_playback_position || 0)
                                            : ((c = this._initialPlaybackPosition), (this._initialPlaybackPosition = null));
                                        var _ = (0, _resolve_manifest_file.resolveManifestFile)(this._manifestFormats, u);
                                        if (!_) return Promise.resolve(r.NULL_VALUE);
                                        var d = this._uri;
                                        u.metadata && u.metadata.context_uri && (d = u.metadata.context_uri);
                                        var v = i,
                                            h = u.ms_played_until_update,
                                            p = {
                                                uri: _.uri,
                                                playableURI: _.uri,
                                                fileId: _.fileId,
                                                resolvedURL: _.resolvedURL,
                                                playable: _.playable,
                                                isAd: _.isAd,
                                                format: _.format,
                                                fileFormat: _.fileFormat,
                                                mediaType: _.mediaType,
                                                noManifest: _.noManifest,
                                                options: { position: c, paused: l, playedThreshold: h },
                                                logData: {
                                                    noLog: !!_.noLog,
                                                    noTSV: !!_.noTSV,
                                                    noStats: !!_.noStats,
                                                    deviceId: this._deviceId,
                                                    playbackId: s.state_id ? s.state_id : void 0,
                                                    reason: v,
                                                    displayTrack: _.uri,
                                                    playContext: d,
                                                    impressionURL: _.impressionURL,
                                                    impressionURLs: _.impressionURLs,
                                                    format: { codec: _.format, bitrate: _.bitrate },
                                                    uriType: _.uriType,
                                                },
                                                stateId: s.state_id ? s.state_id : void 0,
                                            };
                                        return Promise.resolve(p);
                                    },
                                },
                            ],
                            [
                                {
                                    key: "create",
                                    value: function (t, a) {
                                        return new e(t, a);
                                    },
                                },
                            ]
                        ),
                        e
                    );
                })();
                exports.TrackPlayerServiceContext = TrackPlayerServiceContext;
            },
            { "../../enums/errors": 126, "../../error/tp_service/client": 130, "./resolve_manifest_file": 122, "@js-sdk/playback": 65 },
        ],
        121: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.TPPlaybackStateObserver = void 0);
                var URI = _interopRequireWildcard(require("spotify-liburi")),
                    _emitter = require("@spotify-internal/emitter"),
                    _debugTools = require("@js-sdk/debug-tools"),
                    _repeat_mode = require("../../enums/repeat_mode"),
                    _playback_state_observer = require("../playback_state_observer");
                function _getRequireWildcardCache() {
                    if ("function" != typeof WeakMap) return null;
                    var t = new WeakMap();
                    return (
                        (_getRequireWildcardCache = function () {
                            return t;
                        }),
                        t
                    );
                }
                function _interopRequireWildcard(t) {
                    if (t && t.__esModule) return t;
                    if (null === t || ("object" !== _typeof(t) && "function" != typeof t)) return { default: t };
                    var e = _getRequireWildcardCache();
                    if (e && e.has(t)) return e.get(t);
                    var r = {},
                        n = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for (var a in t)
                        if (Object.prototype.hasOwnProperty.call(t, a)) {
                            var i = n ? Object.getOwnPropertyDescriptor(t, a) : null;
                            i && (i.get || i.set) ? Object.defineProperty(r, a, i) : (r[a] = t[a]);
                        }
                    return (r.default = t), e && e.set(t, r), r;
                }
                function _typeof(t) {
                    return (_typeof =
                        "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                            ? function (t) {
                                  return typeof t;
                              }
                            : function (t) {
                                  return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                              })(t);
                }
                function _classCallCheck(t, e) {
                    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                }
                function _defineProperties(t, e) {
                    for (var r = 0; r < e.length; r++) {
                        var n = e[r];
                        (n.enumerable = n.enumerable || !1), (n.configurable = !0), "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
                    }
                }
                function _createClass(t, e, r) {
                    return e && _defineProperties(t.prototype, e), r && _defineProperties(t, r), t;
                }
                function _inherits(t, e) {
                    if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                    (t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } })), e && _setPrototypeOf(t, e);
                }
                function _setPrototypeOf(t, e) {
                    return (_setPrototypeOf =
                        Object.setPrototypeOf ||
                        function (t, e) {
                            return (t.__proto__ = e), t;
                        })(t, e);
                }
                function _createSuper(t) {
                    var e = _isNativeReflectConstruct();
                    return function () {
                        var r,
                            n = _getPrototypeOf(t);
                        if (e) {
                            var a = _getPrototypeOf(this).constructor;
                            r = Reflect.construct(n, arguments, a);
                        } else r = n.apply(this, arguments);
                        return _possibleConstructorReturn(this, r);
                    };
                }
                function _possibleConstructorReturn(t, e) {
                    return !e || ("object" !== _typeof(e) && "function" != typeof e) ? _assertThisInitialized(t) : e;
                }
                function _assertThisInitialized(t) {
                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t;
                }
                function _isNativeReflectConstruct() {
                    if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
                    if (Reflect.construct.sham) return !1;
                    if ("function" == typeof Proxy) return !0;
                    try {
                        return Date.prototype.toString.call(Reflect.construct(Date, [], function () {})), !0;
                    } catch (t) {
                        return !1;
                    }
                }
                function _getPrototypeOf(t) {
                    return (_getPrototypeOf = Object.setPrototypeOf
                        ? Object.getPrototypeOf
                        : function (t) {
                              return t.__proto__ || Object.getPrototypeOf(t);
                          })(t);
                }
                var debugLogger = _debugTools.logging.forTag("tp.stream.PlaybackStateObserver"),
                    TPPlaybackStateObserver = (function (t) {
                        _inherits(r, _emitter.EventEmitter);
                        var e = _createSuper(r);
                        function r(t) {
                            var n,
                                a = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                            return _classCallCheck(this, r), ((n = e.call(this))._tpApiClient = t), (n._numPreviousTracks = a.numPrevious || 2), (n._numNextTracks = a.numNextTracks || 2), (n._state = null), n._init(), n;
                        }
                        return (
                            _createClass(
                                r,
                                [
                                    {
                                        key: "_init",
                                        value: function () {
                                            this._tpApiClient.on("state_changed", this._onStateChanged.bind(this)), this._tpApiClient.on("state_cleared", this._onStateCleared.bind(this));
                                        },
                                    },
                                    {
                                        key: "_onStateChanged",
                                        value: function (t) {
                                            var e,
                                                r,
                                                n = this,
                                                a = t.data,
                                                i = a.position,
                                                o = a.paused,
                                                s = a.stateMachine,
                                                u = a.stateRef,
                                                c = (s && s.states) || [];
                                            if (s && c.length && u) {
                                                var l = t.data.duration,
                                                    _ = Date.now(),
                                                    f = c[u.state_index],
                                                    p = (0, _playback_state_observer.parseRestrictions)((f && f.restrictions) || {}, o),
                                                    d = (0, _playback_state_observer.parseDisallows)(p),
                                                    y = {
                                                        current_track: this._getTrackMetadata(s, f, l),
                                                        next_tracks: this._getNextStates(f, c)
                                                            .map(function (t) {
                                                                return n._getTrackMetadata(s, t, null);
                                                            })
                                                            .filter(function (t) {
                                                                return !!t;
                                                            }),
                                                        previous_tracks: this._getPreviousStates(f, c)
                                                            .map(function (t) {
                                                                return n._getTrackMetadata(s, t, null);
                                                            })
                                                            .filter(function (t) {
                                                                return !!t;
                                                            }),
                                                    };
                                                l || (l = y.current_track && y.current_track.duration_ms ? y.current_track.duration_ms : 0);
                                                var h,
                                                    m = s.tracks[f.track];
                                                (null === (r = null === (e = m.manifest) || void 0 === e ? void 0 : e.file_ids_mp4) || void 0 === r ? void 0 : r.length) > 0 && (h = m.manifest.file_ids_mp4[0].audio_quality);
                                                var v = this._getRepeatSetting(s),
                                                    b = {
                                                        context: { uri: null, metadata: {} },
                                                        position: i,
                                                        duration: l,
                                                        paused: o,
                                                        playback_quality: h,
                                                        shuffle: this._getShuffleSetting(s),
                                                        repeat_mode: v,
                                                        track_window: y,
                                                        timestamp: _,
                                                        restrictions: p,
                                                        disallows: d,
                                                    };
                                                m &&
                                                    m.metadata &&
                                                    (m.metadata.context_uri && (b.context.uri = m.metadata.context_uri), m.metadata.context_description && (b.context.metadata.context_description = m.metadata.context_description)),
                                                    (this._state = b),
                                                    this.emit("state_changed", { state: b ? Object.assign({}, b) : null });
                                            } else debugLogger.warn("_onStateChanged called with no current state", t);
                                        },
                                    },
                                    {
                                        key: "_onStateCleared",
                                        value: function () {
                                            (this._state = null), this.emit("state_changed", { state: null });
                                        },
                                    },
                                    {
                                        key: "_getRepeatSetting",
                                        value: function (t) {
                                            var e = t.attributes.options;
                                            return e.repeating_track ? _repeat_mode.RepeatMode.TRACK : e.repeating_context ? _repeat_mode.RepeatMode.CONTEXT : _repeat_mode.RepeatMode.OFF;
                                        },
                                    },
                                    {
                                        key: "_getShuffleSetting",
                                        value: function (t) {
                                            return t.attributes.options.shuffling_context;
                                        },
                                    },
                                    {
                                        key: "_getNextStates",
                                        value: function (t, e) {
                                            for (var r = this._numNextTracks, n = [], a = t; a && "show_next" in a.transitions && a.transitions.show_next; ) {
                                                var i = e[a.transitions.show_next.state_index];
                                                if ((n.push(i), (a = i), n.length >= r)) break;
                                            }
                                            return n;
                                        },
                                    },
                                    {
                                        key: "_getPreviousStates",
                                        value: function (t, e) {
                                            for (var r = this._numPreviousTracks, n = [], a = t; a && "show_prev" in a.transitions && a.transitions.show_prev; ) {
                                                var i = e[a.transitions.show_prev.state_index];
                                                if ((n.unshift(i), (a = i), n.length >= r)) break;
                                            }
                                            return n;
                                        },
                                    },
                                    {
                                        key: "_getTrackMetadata",
                                        value: function (t, e, r) {
                                            var n = t && t.tracks[e.track];
                                            if (!n || !n.metadata) return null;
                                            var a = n.metadata,
                                                i = n.manifest && "manifest_ids_video" in n.manifest,
                                                o = n.track_type.toLowerCase(),
                                                s = URI.from(a.uri),
                                                u = a.linked_from_uri ? URI.from(a.linked_from_uri) : null;
                                            return {
                                                id: s ? URI.hexToId(s.id) : null,
                                                uri: a.uri,
                                                type: s && s.type ? s.type : "unknown",
                                                uid: e.track_uid,
                                                linked_from: { uri: a.linked_from_uri || null, id: u ? URI.hexToId(u.id) : null },
                                                media_type: i ? "video" : "audio",
                                                track_type: o,
                                                name: a.name,
                                                duration_ms: r || a.duration,
                                                artists: a.authors,
                                                album: { uri: a.group_uri, name: a.group_name, images: a.images },
                                                is_playable: !0,
                                            };
                                        },
                                    },
                                    {
                                        key: "getCurrentState",
                                        value: function () {
                                            var t = this._state;
                                            if (t && !t.paused) {
                                                var e = Date.now(),
                                                    r = t.position + (e - t.timestamp);
                                                (t.position = r), (t.timestamp = e);
                                            }
                                            return Promise.resolve(this._state ? Object.assign({}, this._state) : null);
                                        },
                                    },
                                ],
                                [
                                    {
                                        key: "create",
                                        value: function (t, e) {
                                            return new r(t, e);
                                        },
                                    },
                                ]
                            ),
                            r
                        );
                    })();
                exports.TPPlaybackStateObserver = TPPlaybackStateObserver;
            },
            { "../../enums/repeat_mode": 128, "../playback_state_observer": 117, "@js-sdk/debug-tools": 11, "@spotify-internal/emitter": 71, "spotify-liburi": 188 },
        ],
        122: [
            function (require, module, exports) {
                "use strict";
                function _typeof(e) {
                    return (_typeof =
                        "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                            ? function (e) {
                                  return typeof e;
                              }
                            : function (e) {
                                  return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                              })(e);
                }
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.resolveManifestFile = resolveManifestFile);
                var _containerFormat2,
                    URI = _interopRequireWildcard(require("spotify-liburi")),
                    _playback = require("@js-sdk/playback"),
                    _manifest_format = require("../../enums/manifest_format");
                function _getRequireWildcardCache() {
                    if ("function" != typeof WeakMap) return null;
                    var e = new WeakMap();
                    return (
                        (_getRequireWildcardCache = function () {
                            return e;
                        }),
                        e
                    );
                }
                function _interopRequireWildcard(e) {
                    if (e && e.__esModule) return e;
                    if (null === e || ("object" !== _typeof(e) && "function" != typeof e)) return { default: e };
                    var t = _getRequireWildcardCache();
                    if (t && t.has(e)) return t.get(e);
                    var r = {},
                        a = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for (var i in e)
                        if (Object.prototype.hasOwnProperty.call(e, i)) {
                            var o = a ? Object.getOwnPropertyDescriptor(e, i) : null;
                            o && (o.get || o.set) ? Object.defineProperty(r, i, o) : (r[i] = e[i]);
                        }
                    return (r.default = e), t && t.set(e, r), r;
                }
                function _defineProperty(e, t, r) {
                    return t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : (e[t] = r), e;
                }
                var HTTPS_EXP = /^https:\/\//,
                    FILE_ID_EXP = /^(.+?)\/([^./]+)(\.[^/]*)?$/,
                    _containerFormat =
                        (_defineProperty((_containerFormat2 = {}), _manifest_format.ManifestFormat.FILE_URLS_MP3, _playback.MediaFormat.MP3),
                        _defineProperty(_containerFormat2, _manifest_format.ManifestFormat.FILE_URLS_EXTERNAL, _playback.MediaFormat.MP3),
                        _defineProperty(_containerFormat2, _manifest_format.ManifestFormat.FILE_IDS_MP4, _playback.MediaFormat.MP4),
                        _defineProperty(_containerFormat2, _manifest_format.ManifestFormat.FILE_IDS_MP4_DUAL, _playback.MediaFormat.MP4),
                        _defineProperty(_containerFormat2, _manifest_format.ManifestFormat.FILE_IDS_CBCS, _playback.MediaFormat.MP4_CBCS),
                        _defineProperty(_containerFormat2, _manifest_format.ManifestFormat.FILE_IDS_MP4FLAC, _playback.MediaFormat.MP4_FLAC),
                        _defineProperty(_containerFormat2, _manifest_format.ManifestFormat.MANIFEST_IDS_VIDEO, _playback.MediaFormat.MANIFEST_ID),
                        _containerFormat2);
                function resolveManifestFile(e, t) {
                    for (var r = t.manifest, a = t.metadata.uri, i = URI.from(a), o = !(!i || (i.type !== URI.Type.AD && i.type !== URI.Type.INTERRUPTION)), n = 0, f = e.length; n < f; n++) {
                        var _ = e[n];
                        if (_ in r) {
                            var m = r[_];
                            if (m.length) {
                                var l = m[0];
                                if (l.file_id || l.file_url) {
                                    var p = l.file_url,
                                        s = l.file_id || "";
                                    if (p && _ === _manifest_format.ManifestFormat.FILE_URLS_MP3 && o) {
                                        if ((s = p.replace(FILE_ID_EXP, "$2")) === p) continue;
                                        p = void 0;
                                    }
                                    if ((p && !HTTPS_EXP.test(p) && (p = void 0), s || p)) {
                                        var u = void 0;
                                        u = l.track_type ? l.track_type.toLowerCase() : _ === _manifest_format.ManifestFormat.MANIFEST_IDS_VIDEO ? "video" : "audio";
                                        var c = void 0;
                                        if (l.format) {
                                            var y = parseInt(l.format, 10);
                                            _playback.AudioFileFormat[y] && (c = y);
                                        }
                                        return {
                                            uri: a,
                                            uriType: i && i.type ? i.type : void 0,
                                            fileId: s,
                                            resolvedURL: p,
                                            mediaType: u,
                                            format: _containerFormat[_],
                                            bitrate: l.bitrate || 128e3,
                                            fileFormat: null != c ? c : void 0,
                                            impressionURL: l.impression_url,
                                            impressionURLs: l.impression_urls,
                                            isAd: o,
                                            noLog: !1,
                                            noTSV: o,
                                            noStats: o,
                                            noManifest: !!l.file_url,
                                            playable: !0,
                                        };
                                    }
                                }
                            }
                        }
                    }
                    return null;
                }
            },
            { "../../enums/manifest_format": 127, "@js-sdk/playback": 65, "spotify-liburi": 188 },
        ],
        123: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.createHarmonyClient = createHarmonyClient);
                var _client = require("./_internal/client");
                function createHarmonyClient(e) {
                    return _client.HarmonyClient.create(e);
                }
            },
            { "./_internal/client": 111 },
        ],
        124: [
            function (require, module, exports) {
                "use strict";
                var DeviceType;
                Object.defineProperty(exports, "__esModule", { value: !0 }),
                    (exports.DeviceType = void 0),
                    (exports.DeviceType = DeviceType),
                    (function (e) {
                        (e.UNKNOWN = "unknown"),
                            (e.COMPUTER = "computer"),
                            (e.TABLET = "tablet"),
                            (e.SMARTPHONE = "smartphone"),
                            (e.SPEAKER = "speaker"),
                            (e.TV = "tv"),
                            (e.AVR = "avr"),
                            (e.STB = "stb"),
                            (e.AUDIO_DONGLE = "audio_dongle"),
                            (e.GAME_CONSOLE = "game_console"),
                            (e.CAST_VIDEO = "cast_video"),
                            (e.CAST_AUDIO = "cast_audio"),
                            (e.AUTOMOBILE = "automobile"),
                            (e.SMARTWATCH = "smartwatch"),
                            (e.CHROMEBOOK = "chromebook");
                    })(DeviceType || (exports.DeviceType = DeviceType = {}));
            },
            {},
        ],
        125: [
            function (require, module, exports) {
                "use strict";
                var HarmonyErrorSource;
                Object.defineProperty(exports, "__esModule", { value: !0 }),
                    (exports.HarmonyErrorSource = void 0),
                    (exports.HarmonyErrorSource = HarmonyErrorSource),
                    (function (r) {
                        (r.CONNECT_API = "connect-api"), (r.HARMONY = "harmony"), (r.PLAYBACK = "playback"), (r.TRACK_PLAYBACK = "track-playback"), (r.TRANSPORT = "transport");
                    })(HarmonyErrorSource || (exports.HarmonyErrorSource = HarmonyErrorSource = {}));
            },
            {},
        ],
        126: [
            function (require, module, exports) {
                "use strict";
                var HarmonyErrors;
                Object.defineProperty(exports, "__esModule", { value: !0 }),
                    (exports.HarmonyErrors = void 0),
                    (exports.HarmonyErrors = HarmonyErrors),
                    (function (_) {
                        (_.USER_INFO_REQUEST_EMPTY_RESPONSE = "USER_INFO_REQUEST_EMPTY_RESPONSE"),
                            (_.USER_INFO_REQUEST_FAILED_WITH_STATUS = "USER_INFO_REQUEST_FAILED_WITH_STATUS"),
                            (_.HARMONY_NO_TRACKS_LOADED = "HARMONY_NO_TRACKS_LOADED"),
                            (_.HARMONY_OPERATION_FORBIDDEN = "HARMONY_OPERATION_FORBIDDEN"),
                            (_.HARMONY_LOCAL_PLAYER_DISABLED = "HARMONY_LOCAL_PLAYER_DISABLED"),
                            (_.HARMONY_INVALID_DESCRIPTOR_ID = "HARMONY_INVALID_DESCRIPTOR_ID"),
                            (_.CONNECTAPI_CLIENT_INVALID_ARGUMENTS = "CONNECTAPI_CLIENT_INVALID_ARGUMENTS"),
                            (_.CONNECTAPI_CLIENT_NO_CONNECTION_ID = "CONNECT_API_CLIENT_NO_CONNECTION_ID"),
                            (_.CONNECTAPI_CLIENT_NO_DEVICE = "CONNECTAPI_CLIENT_NO_DEVICE"),
                            (_.CONNECTAPI_CLIENT_NO_SESSION_ID = "CONNECTAPI_CLIENT_NO_SESSION_ID"),
                            (_.CONNECTAPI_CLIENT_NO_STATE = "CONNECTAPI_CLIENT_NO_STATE"),
                            (_.CONNECTAPI_CLIENT_INVALID_POSITION = "CONNECT_API_CLIENT_INVALID_POSITION"),
                            (_.CONNECTAPI_CLIENT_INVALID_VOLUME = "CONNECT_API_CLIENT_INVALID_VOLUME"),
                            (_.CONNECTAPI_MAX_SUBSCRIPTIONS_REACHED = "CONNECTAPI_MAX_SUBSCRIPTIONS_REACHED"),
                            (_.CONNECTAPI_REGISTRATION_FAILED_WITH_STATUS = "CONNECTAPI_REGISTRATION_FAILED_WITH_STATUS"),
                            (_.CP_NO_DEVICE_DESCRIPTOR = "CP_NO_DEVICE_DESCRIPTOR"),
                            (_.CP_NO_CONNECTION_ID = "CP_NO_CONNECTION_ID"),
                            (_.CP_REGISTRATION_FAILED_WITH_STATUS = "CP_REGISTRATION_FAILED_WITH_STATUS"),
                            (_.CP_REQUEST_FAILED_WITH_STATUS = "CP_REQUEST_FAILED_WITH_STATUS"),
                            (_.CP_NO_DEVICE_ID = "CP_NO_DEVICE_ID"),
                            (_.CP_NO_RESPONSE_BODY = "CP_NO_RESPONSE_BODY"),
                            (_.CP_NO_TRACKING_DATA = "CP_NO_TRACKING_DATA"),
                            (_.QUEUE_MANAGER_NO_STATE = "QUEUE_MANAGER_NO_STATE"),
                            (_.QUEUE_OPERATION_STALE_REVISION = "QUEUE_OPERATION_STALE_REVISION"),
                            (_.TP_NO_RESPONSE_BODY = "TP_NO_RESPONSE_BODY"),
                            (_.TP_REGISTRATION_FAILED_NON_PREMIUM = "TP_REGISTRATION_FAILED_NON_PREMIUM"),
                            (_.TP_REGISTRATION_FAILED_WITH_STATUS = "TP_REGISTRATION_FAILED_WITH_STATUS"),
                            (_.TP_MAX_SUBSCRIPTIONS_REACHED = "TP_MAX_SUBSCRIPTIONS_REACHED"),
                            (_.TP_UPDATE_REQUEST_EMPTY_RESPONSE = "TP_UPDATE_REQUEST_EMPTY_RESPONSE"),
                            (_.TP_PARSE_STATE_UPDATE_FAILED_WITH_STATUS = "TP_PARSE_STATE_UPDATE_FAILED_WITH_STATUS"),
                            (_.TP_UNKNOWN_COMMAND = "TP_UNKNOWN_COMMAND"),
                            (_.TP_CANNOT_CREATE_STATE_REF = "TP_CANNOT_CREATE_STATE_REF"),
                            (_.TP_MISSING_INITIAL_STATE = "TP_MISSING_INITIAL_STATE"),
                            (_.TP_INVALID_STATE_REFERENCE = "TP_INVALID_STATE_REFERENCE"),
                            (_.TP_CONFLICT_REQUEST_FAILED_WITH_STATUS = "TP_CONFLICT_REQUEST_FAILED_WITH_STATUS");
                    })(HarmonyErrors || (exports.HarmonyErrors = HarmonyErrors = {}));
            },
            {},
        ],
        127: [
            function (require, module, exports) {
                "use strict";
                var ManifestFormat;
                Object.defineProperty(exports, "__esModule", { value: !0 }),
                    (exports.ManifestFormat = void 0),
                    (exports.ManifestFormat = ManifestFormat),
                    (function (_) {
                        (_.FILE_URLS_MP3 = "file_urls_mp3"),
                            (_.FILE_URLS_EXTERNAL = "file_urls_external"),
                            (_.FILE_IDS_MP4 = "file_ids_mp4"),
                            (_.FILE_IDS_MP4_DUAL = "file_ids_mp4_dual"),
                            (_.FILE_IDS_CBCS = "file_ids_mp4_cbcs"),
                            (_.FILE_IDS_MP4FLAC = "file_ids_mp4flac"),
                            (_.MANIFEST_IDS_VIDEO = "manifest_ids_video");
                    })(ManifestFormat || (exports.ManifestFormat = ManifestFormat = {}));
            },
            {},
        ],
        128: [
            function (require, module, exports) {
                "use strict";
                var RepeatMode;
                Object.defineProperty(exports, "__esModule", { value: !0 }),
                    (exports.RepeatMode = void 0),
                    (exports.RepeatMode = RepeatMode),
                    (function (e) {
                        (e[(e.OFF = 0)] = "OFF"), (e[(e.CONTEXT = 1)] = "CONTEXT"), (e[(e.TRACK = 2)] = "TRACK");
                    })(RepeatMode || (exports.RepeatMode = RepeatMode = {}));
            },
            {},
        ],
        129: [
            function (require, module, exports) {
                "use strict";
                function _typeof(t) {
                    return (_typeof =
                        "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                            ? function (t) {
                                  return typeof t;
                              }
                            : function (t) {
                                  return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                              })(t);
                }
                function _classCallCheck(t, e) {
                    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                }
                function _defineProperties(t, e) {
                    for (var r = 0; r < e.length; r++) {
                        var o = e[r];
                        (o.enumerable = o.enumerable || !1), (o.configurable = !0), "value" in o && (o.writable = !0), Object.defineProperty(t, o.key, o);
                    }
                }
                function _createClass(t, e, r) {
                    return e && _defineProperties(t.prototype, e), r && _defineProperties(t, r), t;
                }
                function _inherits(t, e) {
                    if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                    (t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } })), e && _setPrototypeOf(t, e);
                }
                function _createSuper(t) {
                    var e = _isNativeReflectConstruct();
                    return function () {
                        var r,
                            o = _getPrototypeOf(t);
                        if (e) {
                            var n = _getPrototypeOf(this).constructor;
                            r = Reflect.construct(o, arguments, n);
                        } else r = o.apply(this, arguments);
                        return _possibleConstructorReturn(this, r);
                    };
                }
                function _possibleConstructorReturn(t, e) {
                    return !e || ("object" !== _typeof(e) && "function" != typeof e) ? _assertThisInitialized(t) : e;
                }
                function _assertThisInitialized(t) {
                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t;
                }
                function _wrapNativeSuper(t) {
                    var e = "function" == typeof Map ? new Map() : void 0;
                    return (_wrapNativeSuper = function (t) {
                        if (null === t || !_isNativeFunction(t)) return t;
                        if ("function" != typeof t) throw new TypeError("Super expression must either be null or a function");
                        if (void 0 !== e) {
                            if (e.has(t)) return e.get(t);
                            e.set(t, r);
                        }
                        function r() {
                            return _construct(t, arguments, _getPrototypeOf(this).constructor);
                        }
                        return (r.prototype = Object.create(t.prototype, { constructor: { value: r, enumerable: !1, writable: !0, configurable: !0 } })), _setPrototypeOf(r, t);
                    })(t);
                }
                function _construct(t, e, r) {
                    return (_construct = _isNativeReflectConstruct()
                        ? Reflect.construct
                        : function (t, e, r) {
                              var o = [null];
                              o.push.apply(o, e);
                              var n = new (Function.bind.apply(t, o))();
                              return r && _setPrototypeOf(n, r.prototype), n;
                          }).apply(null, arguments);
                }
                function _isNativeReflectConstruct() {
                    if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
                    if (Reflect.construct.sham) return !1;
                    if ("function" == typeof Proxy) return !0;
                    try {
                        return Date.prototype.toString.call(Reflect.construct(Date, [], function () {})), !0;
                    } catch (t) {
                        return !1;
                    }
                }
                function _isNativeFunction(t) {
                    return -1 !== Function.toString.call(t).indexOf("[native code]");
                }
                function _setPrototypeOf(t, e) {
                    return (_setPrototypeOf =
                        Object.setPrototypeOf ||
                        function (t, e) {
                            return (t.__proto__ = e), t;
                        })(t, e);
                }
                function _getPrototypeOf(t) {
                    return (_getPrototypeOf = Object.setPrototypeOf
                        ? Object.getPrototypeOf
                        : function (t) {
                              return t.__proto__ || Object.getPrototypeOf(t);
                          })(t);
                }
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.HarmonyError = void 0);
                var HarmonyError = (function (t) {
                    _inherits(r, _wrapNativeSuper(Error));
                    var e = _createSuper(r);
                    function r(t, o) {
                        var n;
                        return _classCallCheck(this, r), ((n = e.call(this, o)).status = -1), (n.unrecoverable = !1), (n.debug = {}), (n.code = t), (n.name = "HarmonyError"), n;
                    }
                    return (
                        _createClass(r, null, [
                            {
                                key: "fatal",
                                value: function (t, e) {
                                    var o = new r(t, e);
                                    return (o.unrecoverable = !0), o;
                                },
                            },
                        ]),
                        r
                    );
                })();
                exports.HarmonyError = HarmonyError;
            },
            {},
        ],
        130: [
            function (require, module, exports) {
                "use strict";
                function _typeof(t) {
                    return (_typeof =
                        "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                            ? function (t) {
                                  return typeof t;
                              }
                            : function (t) {
                                  return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                              })(t);
                }
                function _classCallCheck(t, e) {
                    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                }
                function _defineProperties(t, e) {
                    for (var r = 0; r < e.length; r++) {
                        var n = e[r];
                        (n.enumerable = n.enumerable || !1), (n.configurable = !0), "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
                    }
                }
                function _createClass(t, e, r) {
                    return e && _defineProperties(t.prototype, e), r && _defineProperties(t, r), t;
                }
                function _inherits(t, e) {
                    if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                    (t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } })), e && _setPrototypeOf(t, e);
                }
                function _createSuper(t) {
                    var e = _isNativeReflectConstruct();
                    return function () {
                        var r,
                            n = _getPrototypeOf(t);
                        if (e) {
                            var o = _getPrototypeOf(this).constructor;
                            r = Reflect.construct(n, arguments, o);
                        } else r = n.apply(this, arguments);
                        return _possibleConstructorReturn(this, r);
                    };
                }
                function _possibleConstructorReturn(t, e) {
                    return !e || ("object" !== _typeof(e) && "function" != typeof e) ? _assertThisInitialized(t) : e;
                }
                function _assertThisInitialized(t) {
                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t;
                }
                function _wrapNativeSuper(t) {
                    var e = "function" == typeof Map ? new Map() : void 0;
                    return (_wrapNativeSuper = function (t) {
                        if (null === t || !_isNativeFunction(t)) return t;
                        if ("function" != typeof t) throw new TypeError("Super expression must either be null or a function");
                        if (void 0 !== e) {
                            if (e.has(t)) return e.get(t);
                            e.set(t, r);
                        }
                        function r() {
                            return _construct(t, arguments, _getPrototypeOf(this).constructor);
                        }
                        return (r.prototype = Object.create(t.prototype, { constructor: { value: r, enumerable: !1, writable: !0, configurable: !0 } })), _setPrototypeOf(r, t);
                    })(t);
                }
                function _construct(t, e, r) {
                    return (_construct = _isNativeReflectConstruct()
                        ? Reflect.construct
                        : function (t, e, r) {
                              var n = [null];
                              n.push.apply(n, e);
                              var o = new (Function.bind.apply(t, n))();
                              return r && _setPrototypeOf(o, r.prototype), o;
                          }).apply(null, arguments);
                }
                function _isNativeReflectConstruct() {
                    if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
                    if (Reflect.construct.sham) return !1;
                    if ("function" == typeof Proxy) return !0;
                    try {
                        return Date.prototype.toString.call(Reflect.construct(Date, [], function () {})), !0;
                    } catch (t) {
                        return !1;
                    }
                }
                function _isNativeFunction(t) {
                    return -1 !== Function.toString.call(t).indexOf("[native code]");
                }
                function _setPrototypeOf(t, e) {
                    return (_setPrototypeOf =
                        Object.setPrototypeOf ||
                        function (t, e) {
                            return (t.__proto__ = e), t;
                        })(t, e);
                }
                function _getPrototypeOf(t) {
                    return (_getPrototypeOf = Object.setPrototypeOf
                        ? Object.getPrototypeOf
                        : function (t) {
                              return t.__proto__ || Object.getPrototypeOf(t);
                          })(t);
                }
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.TrackPlayerAPIClientError = void 0);
                var TrackPlayerAPIClientError = (function (t) {
                    _inherits(r, _wrapNativeSuper(Error));
                    var e = _createSuper(r);
                    function r(t, n) {
                        var o;
                        return (
                            _classCallCheck(this, r), ((o = e.call(this, n)).status = -1), (o.maxedSubscriptions = !1), (o.unrecoverable = !1), (o.debug = {}), (o.registration = !1), (o.code = t), (o.name = "TrackPlayerAPIClientError"), o
                        );
                    }
                    return (
                        _createClass(r, null, [
                            {
                                key: "fatal",
                                value: function (t, e) {
                                    var n = new r(t, e);
                                    return (n.unrecoverable = !0), n;
                                },
                            },
                        ]),
                        r
                    );
                })();
                exports.TrackPlayerAPIClientError = TrackPlayerAPIClientError;
            },
            {},
        ],
        131: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }),
                    (exports.createStreamerForClient = createStreamerForClient),
                    (exports.of = of),
                    Object.defineProperty(exports, "HarmonyStreamer", {
                        enumerable: !0,
                        get: function () {
                            return _streamer.HarmonyStreamer;
                        },
                    });
                var _playback = require("@js-sdk/playback"),
                    _manifest_format = require("./enums/manifest_format"),
                    _streamer = require("./_internal/streamer"),
                    _client = require("./_internal/tp_service/client"),
                    _context = require("./_internal/tp_service/context"),
                    _playback_state_observer = require("./_internal/tp_service/playback_state_observer");
                function _slicedToArray(e, r) {
                    return _arrayWithHoles(e) || _iterableToArrayLimit(e, r) || _unsupportedIterableToArray(e, r) || _nonIterableRest();
                }
                function _nonIterableRest() {
                    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                function _unsupportedIterableToArray(e, r) {
                    if (e) {
                        if ("string" == typeof e) return _arrayLikeToArray(e, r);
                        var t = Object.prototype.toString.call(e).slice(8, -1);
                        return (
                            "Object" === t && e.constructor && (t = e.constructor.name), "Map" === t || "Set" === t ? Array.from(e) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(e, r) : void 0
                        );
                    }
                }
                function _arrayLikeToArray(e, r) {
                    (null == r || r > e.length) && (r = e.length);
                    for (var t = 0, a = new Array(r); t < r; t++) a[t] = e[t];
                    return a;
                }
                function _iterableToArrayLimit(e, r) {
                    if ("undefined" != typeof Symbol && Symbol.iterator in Object(e)) {
                        var t = [],
                            a = !0,
                            n = !1,
                            i = void 0;
                        try {
                            for (var o, s = e[Symbol.iterator](); !(a = (o = s.next()).done) && (t.push(o.value), !r || t.length !== r); a = !0);
                        } catch (e) {
                            (n = !0), (i = e);
                        } finally {
                            try {
                                a || null == s.return || s.return();
                            } finally {
                                if (n) throw i;
                            }
                        }
                        return t;
                    }
                }
                function _arrayWithHoles(e) {
                    if (Array.isArray(e)) return e;
                }
                function createStreamerForClient(e) {
                    var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
                        t = e.getSDKId(),
                        a = e.getPublicTransport(),
                        n = e.getLogger(),
                        i = e.getDeviceDescriptor(),
                        o = "initialVolume" in r && void 0 !== r.initialVolume ? r.initialVolume : 1,
                        s = Object.assign(Object.assign({}, r), { transport: a, logger: n, sdkId: e.getUntaggedSDKId() }),
                        l = (0, _playback.createPlayer)(s).then(function (e) {
                            return e.player;
                        }),
                        c = l.then(function (e) {
                            return e.getMediaConfig();
                        }),
                        _ = Promise.all([i, c]).then(function (e) {
                            var t = _slicedToArray(e, 2),
                                a = t[0],
                                n = t[1];
                            return (
                                a.getCapability("audio_podcasts") && !r.disableExternalFiles && a.appendManifestFormat(_manifest_format.ManifestFormat.FILE_URLS_EXTERNAL),
                                n.keysystem === _playback.KeySystem.FAIRPLAY
                                    ? a.appendManifestFormat(_manifest_format.ManifestFormat.FILE_IDS_CBCS)
                                    : n.keysystem !== _playback.KeySystem.WIDEVINE || r.preferMultiDRMFormat
                                    ? a.appendManifestFormat(_manifest_format.ManifestFormat.FILE_IDS_MP4_DUAL, _manifest_format.ManifestFormat.FILE_IDS_MP4)
                                    : (-1 !== n.formats.audio.indexOf('audio/mp4; codecs="flac"') && a.getCapability("lossless_playback") && a.appendManifestFormat(_manifest_format.ManifestFormat.FILE_IDS_MP4FLAC),
                                      a.appendManifestFormat(_manifest_format.ManifestFormat.FILE_IDS_MP4, _manifest_format.ManifestFormat.FILE_IDS_MP4_DUAL)),
                                n.supports.protected_video && a.getCapability("video_playback") && a.prependManifestFormat(_manifest_format.ManifestFormat.MANIFEST_IDS_VIDEO),
                                a
                            );
                        }),
                        m = _playback.ListPlayer.create({ trackPlayer: l }),
                        y = _client.TrackPlaybackServiceClient.create({ initialVolume: o, listPlayer: m, logger: n, transport: a, clientVersion: t, descriptor: _, endpoint: r.endpoint, ListClass: _context.TrackPlayerServiceContext }),
                        f = _playback_state_observer.TPPlaybackStateObserver.create(y),
                        p = "stopOnBackground" in r ? r.stopOnBackground : "undefined" == typeof MediaSource;
                    return new _streamer.HarmonyStreamer({ client: e, playbackServiceClient: y, playbackStateObserver: f, initialVolume: o, playerPromise: l, listPlayer: m, stopOnBackground: p });
                }
                function of(e) {
                    var r = e._streamer;
                    if (!(r instanceof _streamer.HarmonyStreamer)) throw new Error("The harmony instance has an invalid `_streamer`.");
                    return r;
                }
            },
            { "./_internal/streamer": 118, "./_internal/tp_service/client": 119, "./_internal/tp_service/context": 120, "./_internal/tp_service/playback_state_observer": 121, "./enums/manifest_format": 127, "@js-sdk/playback": 65 },
        ],
        132: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.GAIA_VOLUME = exports.LOCAL_DEVICE_ID = void 0);
                var LOCAL_DEVICE_ID = "@local";
                exports.LOCAL_DEVICE_ID = LOCAL_DEVICE_ID;
                var GAIA_VOLUME = 65535;
                exports.GAIA_VOLUME = GAIA_VOLUME;
            },
            {},
        ],
        133: [
            function (require, module, exports) {
                "use strict";
                function assert(e, r) {
                    if (!e) throw new Error("Assertion failed: ".concat(r));
                }
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.assert = assert);
            },
            {},
        ],
        134: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.createTransportForHarmony = createTransportForHarmony);
                var _xresolve = require("@spotify-internal/transport/lib/providers/endpoints/xresolve"),
                    _transport = require("@spotify-internal/transport");
                function hasEndpoint(e) {
                    return "string" == typeof e;
                }
                function createTransportForHarmony(e) {
                    if ("function" != typeof e.getToken) throw new TypeError("Argument options.getToken must be a function");
                    var r = (0, _xresolve.createProvider)(e.xresolve);
                    return (0, _transport.createTransport)({
                        providers: {
                            endpoints: function (n) {
                                return r(n).then(function (r) {
                                    var n = e.endpoints;
                                    if (n)
                                        for (var o in n)
                                            if (n.hasOwnProperty(o)) {
                                                var t = n[o];
                                                hasEndpoint(t) && (r[o] = t);
                                            }
                                    return r;
                                });
                            },
                            token: function () {
                                return new Promise(function (r) {
                                    e.getToken(function (e, n) {
                                        r(void 0 === n ? e : [e, n]);
                                    });
                                });
                            },
                        },
                        disconnectBeforeUnload: e.disconnectBeforeUnload,
                        forcePolyfillTypes: e.forcePolyfillTypes,
                        reconnectionRetries: e.reconnectionRetries,
                        requestMode: e.requestMode || "fetch",
                    });
                }
            },
            { "@spotify-internal/transport": 162, "@spotify-internal/transport/lib/providers/endpoints/xresolve": 182 },
        ],
        135: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.DeviceId = void 0);
                var _encoding = require("@js-sdk/encoding"),
                    hasAPI = "undefined" != typeof crypto && "function" == typeof crypto.getRandomValues;
                function generateIdWithCrypto() {
                    var e = new Uint8Array(16);
                    return crypto.getRandomValues(e), _encoding.Base62.toHex(e.join(""), 40).slice(0, 40);
                }
                function generateIdWithRandom() {
                    for (var e = new Array(27), t = e.length; t--; ) e[t] = Math.floor(8 * Math.random());
                    return _encoding.Base62.toHex(e.join(""), 40);
                }
                var generate = hasAPI ? generateIdWithCrypto : generateIdWithRandom,
                    DEFAULT_DEVICE_ID_KEY = "_spharmony_device_id";
                function getDeviceId(e) {
                    var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                    if (e && "string" == typeof e) return e;
                    if (t) return generate();
                    var r = localStorage.getItem(DEFAULT_DEVICE_ID_KEY);
                    return r || ((r = generate()), localStorage.setItem(DEFAULT_DEVICE_ID_KEY, r)), r;
                }
                var DeviceId = { get: getDeviceId, generate: generate, generateWithCrypto: generateIdWithCrypto, generateWithRandom: generateIdWithRandom };
                exports.DeviceId = DeviceId;
            },
            { "@js-sdk/encoding": 15 },
        ],
        136: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.default = void 0);
                var _default = { tagged: "4.12.0-38fc756", version: "4.12.0", revision: "38fc756" };
                exports.default = _default;
            },
            {},
        ],
        137: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 });
                var tslib_1 = require("tslib"),
                    linkedlist_1 = require("./linkedlist");
                (exports.LinkedList = linkedlist_1.LinkedList), (exports.ListNode = linkedlist_1.ListNode), tslib_1.__exportStar(require("./lrucache"), exports);
            },
            { "./linkedlist": 138, "./lrucache": 139, tslib: 190 },
        ],
        138: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 });
                var ERR_NODE_IN_LIST = "Node already exists in another list!",
                    ListNode = (function () {
                        return function (t) {
                            (this.listId = null), (this.key = ""), (this.prev = null), (this.next = null), (this.value = null), (this.value = t);
                        };
                    })();
                exports.ListNode = ListNode;
                var LinkedList = (function () {
                    function t() {
                        (this._id = {}), (this.length = 0), (this.first = null), (this.last = null);
                    }
                    return (
                        (t.prototype.append = function (t) {
                            if (t.listId) throw new Error(ERR_NODE_IN_LIST);
                            return (t.listId = this._id), this.first ? this.last && ((t.prev = this.last), (t.next = null), (this.last.next = t), (this.last = t)) : ((this.first = t), (this.last = t)), ++this.length;
                        }),
                        (t.prototype.insertAfter = function (t, i) {
                            if (i.listId) throw new Error(ERR_NODE_IN_LIST);
                            return (i.listId = this._id), (i.prev = t), (i.next = t.next), t.next && (t.next.prev = i), (t.next = i), i.prev === this.last && (this.last = i), ++this.length;
                        }),
                        (t.prototype.remove = function (t) {
                            return (
                                !(!this.length || t.listId !== this._id) &&
                                (this.length > 1
                                    ? (t.prev && (t.prev.next = t.next), t.next && (t.next.prev = t.prev), t === this.first ? (this.first = t.next) : t === this.last && (this.last = t.prev))
                                    : ((this.first = null), (this.last = null)),
                                (t.listId = null),
                                (t.prev = null),
                                (t.next = null),
                                this.length--,
                                !0)
                            );
                        }),
                        t
                    );
                })();
                exports.LinkedList = LinkedList;
            },
            {},
        ],
        139: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 });
                var linkedlist_1 = require("./linkedlist"),
                    LRUCache = (function () {
                        function t(t) {
                            (this._limit = 100), (this._list = new linkedlist_1.LinkedList()), (this._map = {}), (this._limit = t);
                        }
                        return (
                            (t.prototype.get = function (t) {
                                var e = this._map[t];
                                if (!e) return null;
                                var i = this._list;
                                return i.remove(e), i.append(e), e.value;
                            }),
                            (t.prototype.set = function (t, e) {
                                if (!t) throw new TypeError("Cache key cannot be empty.");
                                var i = this._list,
                                    r = this._map;
                                if (i.length >= this._limit) {
                                    var n = i.first;
                                    (r[n.key] = null), i.remove(n);
                                }
                                var s = r[t];
                                s ? (i.remove(s), (s.value = e)) : ((s = new linkedlist_1.ListNode(e)).key = t), i.append(s), (r[t] = s);
                            }),
                            (t.prototype.remove = function (t) {
                                var e = this._map,
                                    i = e[t];
                                return i ? (this._list.remove(i), (e[t] = null), i.value) : null;
                            }),
                            (t.prototype.keys = function () {
                                for (var t = [], e = this._list.first; e; ) t.push(e.key), (e = e.next);
                                return t.reverse();
                            }),
                            (t.prototype.values = function () {
                                for (var t = [], e = this._list.first; e; ) t.push(e.value), (e = e.next);
                                return t.reverse();
                            }),
                            (t.prototype.size = function () {
                                return this._list.length;
                            }),
                            (t.prototype.clear = function () {
                                var t = this._list.length;
                                return (this._list = new linkedlist_1.LinkedList()), (this._map = {}), t;
                            }),
                            t
                        );
                    })();
                exports.LRUCache = LRUCache;
            },
            { "./linkedlist": 138 },
        ],
        140: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.ConnectionObserver = void 0);
                var tslib_1 = require("tslib"),
                    emitter_1 = require("@spotify-internal/emitter"),
                    event_1 = require("../enums/event"),
                    ConnectionObserver = (function (e) {
                        function n(n) {
                            var t = e.call(this) || this,
                                i = "undefined" != typeof window,
                                r = n && n.notifyBeforeUnload;
                            return (
                                (t._navigator = (i && window.navigator) || null),
                                i &&
                                    "function" == typeof window.addEventListener &&
                                    (window.addEventListener("online", t.emitSync.bind(t, event_1.Event.CONNECTION_ONLINE, null)),
                                    window.addEventListener("offline", t.emitSync.bind(t, event_1.Event.CONNECTION_OFFLINE, null)),
                                    r && window.addEventListener(event_1.Event.WINDOW_BEFORE_UNLOAD, t.emitSync.bind(t, event_1.Event.WINDOW_BEFORE_UNLOAD, null))),
                                t
                            );
                        }
                        return (
                            tslib_1.__extends(n, e),
                            (n.create = function (e) {
                                return new n(e);
                            }),
                            (n.prototype.isOnline = function () {
                                var e = this._navigator;
                                return !(e && "onLine" in e) || e.onLine;
                            }),
                            n
                        );
                    })(emitter_1.EventEmitter);
                exports.ConnectionObserver = ConnectionObserver;
            },
            { "../enums/event": 145, "@spotify-internal/emitter": 71, tslib: 190 },
        ],
        141: [
            function (require, module, exports) {
                arguments[4][1][0].apply(exports, arguments);
            },
            { dup: 1 },
        ],
        142: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.PublicTransport = void 0);
                var PublicTransportEvent,
                    tslib_1 = require("tslib"),
                    emitter_1 = require("@spotify-internal/emitter"),
                    event_1 = require("../enums/event"),
                    status_code_1 = require("../enums/status_code"),
                    status_family_1 = require("../enums/status_family");
                !(function (t) {
                    (t.EVENT_ACCESS_TOKEN = "access_token"),
                        (t.EVENT_CONNECTION_ID = "connection_id"),
                        (t.EVENT_CONNECTION_OFFLINE = "connection_offline"),
                        (t.EVENT_CONNECTION_ONLINE = "connection_online"),
                        (t.EVENT_ENDPOINTS_RESOLVED = "endpoints_resolved");
                })(PublicTransportEvent || (PublicTransportEvent = {}));
                var PublicTransport = (function (t) {
                    function e(e, n) {
                        var s = t.call(this) || this;
                        (s.EVENT_ACCESS_TOKEN = PublicTransportEvent.EVENT_ACCESS_TOKEN),
                            (s.EVENT_CONNECTION_ID = PublicTransportEvent.EVENT_CONNECTION_ID),
                            (s.EVENT_CONNECTION_OFFLINE = PublicTransportEvent.EVENT_CONNECTION_OFFLINE),
                            (s.EVENT_CONNECTION_ONLINE = PublicTransportEvent.EVENT_CONNECTION_ONLINE),
                            (s.EVENT_ENDPOINTS_RESOLVED = PublicTransportEvent.EVENT_ENDPOINTS_RESOLVED),
                            (s.StatusCode = status_code_1.StatusCode),
                            (s.StatusFamily = status_family_1.StatusFamily),
                            (s.getConnectionId = e.getConnectionId.bind(e)),
                            (s.getEndpoints = e.getEndpoints.bind(e)),
                            (s.getInitTime = e.getInitTime.bind(e)),
                            (s.getLastToken = e.getLastToken.bind(e)),
                            (s.matchMessages = e.matchMessages.bind(e)),
                            (s.unmatchMessages = e.unmatchMessages.bind(e)),
                            (s.handlePushRequests = e.handlePushRequests.bind(e)),
                            (s.unhandlePushRequests = e.unhandlePushRequests.bind(e)),
                            (s.hasPlugin = e.hasPlugin.bind(e)),
                            (s.getPluginAPI = e.getPluginAPI.bind(e));
                        var i = e.request.bind(e);
                        return (
                            (null == n ? void 0 : n.requestOptions)
                                ? (s.request = function (t, e) {
                                      return i(
                                          t,
                                          e
                                              ? tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, null == n ? void 0 : n.requestOptions), e), {
                                                    metadata: tslib_1.__assign(tslib_1.__assign({}, n.requestOptions.metadata), null == e ? void 0 : e.metadata),
                                                    retry: tslib_1.__assign(tslib_1.__assign({}, n.requestOptions.retry), null == e ? void 0 : e.retry),
                                                })
                                              : n.requestOptions
                                      );
                                  })
                                : (s.request = i),
                            s.proxyEmit(e, event_1.Event.ACCESS_TOKEN, PublicTransportEvent.EVENT_ACCESS_TOKEN),
                            s.proxyEmit(e, event_1.Event.CONNECTION_OFFLINE, PublicTransportEvent.EVENT_CONNECTION_OFFLINE),
                            s.proxyEmit(e, event_1.Event.CONNECTION_ONLINE, PublicTransportEvent.EVENT_CONNECTION_ONLINE),
                            s.proxyEmit(e, event_1.Event.ENDPOINTS_RESOLVED, PublicTransportEvent.EVENT_ENDPOINTS_RESOLVED),
                            s.onAddListener(PublicTransportEvent.EVENT_CONNECTION_ID, s._onAddConnectionIdListener.bind(s, e.on.bind(e))),
                            s.onRemoveListener(PublicTransportEvent.EVENT_CONNECTION_ID, s._onRemoveConnectionIdListener.bind(s, e.removeListener.bind(e))),
                            s
                        );
                    }
                    return (
                        tslib_1.__extends(e, t),
                        (e.prototype._onAddConnectionIdListener = function (t, e) {
                            var n = this;
                            e.preventDefault();
                            var s = e.data.listener,
                                i = function (t) {
                                    var e = n.createEvent(PublicTransportEvent.EVENT_CONNECTION_ID, t.data);
                                    s.call(n, e);
                                };
                            (s.$proxy_wrapper = i), t(event_1.Event.CONNECTION_ID, i, e.data.options);
                        }),
                        (e.prototype._onRemoveConnectionIdListener = function (t, e) {
                            e.preventDefault();
                            var n = e.data.listener;
                            n.$proxy_wrapper && t(event_1.Event.CONNECTION_ID, n.$proxy_wrapper, e.data.options);
                        }),
                        (e.prototype.removeAllListeners = function () {
                            return this;
                        }),
                        e
                    );
                })(emitter_1.EventEmitter);
                exports.PublicTransport = PublicTransport;
            },
            { "../enums/event": 145, "../enums/status_code": 149, "../enums/status_family": 150, "@spotify-internal/emitter": 71, tslib: 190 },
        ],
        143: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.AllowsPayload = void 0), (exports.AllowsPayload = { POST: !0, PUT: !0, DELETE: !0 });
            },
            {},
        ],
        144: [
            function (require, module, exports) {
                "use strict";
                var TransportErrors;
                Object.defineProperty(exports, "__esModule", { value: !0 }),
                    (exports.TransportErrors = void 0),
                    (function (E) {
                        (E.HTTP_REQUEST_FAILED = "HTTP_REQUEST_FAILED"),
                            (E.LOGGING_REQUEST_FAILED = "LOGGING_REQUEST_FAILED"),
                            (E.TRANSPORT_ENDPOINTS_PROVIDER_ERROR = "TRANSPORT_ENDPOINTS_PROVIDER_ERROR"),
                            (E.TRANSPORT_INVALID_STATE = "TRANSPORT_INVALID_STATE"),
                            (E.TRANSPORT_INVALID_TOKEN = "TRANSPORT_INVALID_TOKEN"),
                            (E.TRANSPORT_STALE_TOKEN = "TRANSPORT_STALE_TOKEN "),
                            (E.TRANSPORT_TOKEN_PROVIDER_ERROR = "TRANSPORT_TOKEN_PROVIDER_ERROR"),
                            (E.TRANSPORT_LIFECYCLE_DISABLED = "TRANSPORT_LIFECYCLE_DISABLED"),
                            (E.TRANSPORT_UNSUPPORTED_OPTION = "TRANSPORT_UNSUPPORTED_OPTION"),
                            (E.XRESOLVE_INCOMPLETE_RESPONSE = "XRESOLVE_INCOMPLETE_RESPONSE"),
                            (E.XRESOLVE_INVALID_RESPONSE = "XRESOLVE_INVALID_RESPONSE"),
                            (E.XRESOLVE_REQUEST_FAILED_WITH_STATUS = "XRESOLVE_REQUEST_FAILED_WITH_STATUS");
                    })((TransportErrors = exports.TransportErrors || (exports.TransportErrors = {})));
            },
            {},
        ],
        145: [
            function (require, module, exports) {
                "use strict";
                var Event;
                Object.defineProperty(exports, "__esModule", { value: !0 }),
                    (exports.Event = void 0),
                    (function (e) {
                        (e.CONNECTION_ONLINE = "online"),
                            (e.CONNECTION_OFFLINE = "offline"),
                            (e.PRODUCT_STATE_CHANGED = "product_state_changed"),
                            (e.ACCESS_TOKEN = "access_token"),
                            (e.AUTHENTICATED = "authenticated"),
                            (e.AUTHENTICATION_FAILED = "authentication_failed"),
                            (e.BEFORE_OFFLINE_DISCONNECT = "before_offline_disconnect"),
                            (e.BEFORE_ONLINE_DISCONNECT = "before_online_disconnect"),
                            (e.CONNECTED = "connected"),
                            (e.CONNECTION_FAILED = "connection_failed"),
                            (e.CONNECTION_ID = "connection_id"),
                            (e.DISCONNECTED = "disconnected"),
                            (e.ENDPOINTS_RESOLVED = "endpoints_resolved"),
                            (e.LOGGED_OUT = "logged_out"),
                            (e.SHORT_SESSION_DISCONNECTED = "short_session_disconnected"),
                            (e.TOKEN_PROVIDER_ERROR = "token_provider_error"),
                            (e.RECONNECTED = "reconnected"),
                            (e.RECONNECTING = "reconnecting"),
                            (e.WINDOW_BEFORE_UNLOAD = "beforeunload");
                    })((Event = exports.Event || (exports.Event = {})));
            },
            {},
        ],
        146: [
            function (require, module, exports) {
                "use strict";
                var InternalSocketCode;
                Object.defineProperty(exports, "__esModule", { value: !0 }),
                    (exports.InternalSocketCode = void 0),
                    (function (e) {
                        (e[(e.CLOSE = 4e3)] = "CLOSE"), (e[(e.TIMEOUT = 4001)] = "TIMEOUT");
                    })((InternalSocketCode = exports.InternalSocketCode || (exports.InternalSocketCode = {})));
            },
            {},
        ],
        147: [
            function (require, module, exports) {
                "use strict";
                var Method;
                Object.defineProperty(exports, "__esModule", { value: !0 }),
                    (exports.Method = void 0),
                    (function (e) {
                        (e.DELETE = "DELETE"), (e.GET = "GET"), (e.OPTIONS = "OPTIONS"), (e.PATCH = "PATCH"), (e.POST = "POST"), (e.PUT = "PUT"), (e.TRACE = "TRACE");
                    })((Method = exports.Method || (exports.Method = {})));
            },
            {},
        ],
        148: [
            function (require, module, exports) {
                "use strict";
                var PluginEvent;
                Object.defineProperty(exports, "__esModule", { value: !0 }),
                    (exports.PluginEvent = void 0),
                    (function (e) {
                        (e.TRANSPORT_AUTHENTICATE = "transport_authenticate"),
                            (e.TRANSPORT_CONNECT = "transport_connect"),
                            (e.TRANSPORT_DISCONNECT = "transport_disconnect"),
                            (e.TRANSPORT_ENDPOINTS_RESOLVED = "transport_endpoints_resolved"),
                            (e.TRANSPORT_BEFORE_PROCESS_REQUEST = "transport_before_process_request"),
                            (e.TRANSPORT_BEFORE_SEND_REQUEST = "transport_before_send_request"),
                            (e.TRANSPORT_BEFORE_RETURN_RESPONSE = "transport_before_return_response"),
                            (e.TRANSPORT_REQUEST = "transport_request"),
                            (e.PLUGIN_CONNECTION_INFO = "plugin_connection_info"),
                            (e.PLUGIN_DISCONNECTED = "plugin_disconnected"),
                            (e.PLUGIN_MESSAGE = "plugin_message"),
                            (e.PLUGIN_REQUEST = "plugin_request");
                    })((PluginEvent = exports.PluginEvent || (exports.PluginEvent = {})));
            },
            {},
        ],
        149: [
            function (require, module, exports) {
                "use strict";
                var StatusCode;
                Object.defineProperty(exports, "__esModule", { value: !0 }),
                    (exports.StatusCode = void 0),
                    (function (E) {
                        (E[(E.UNKNOWN = 0)] = "UNKNOWN"),
                            (E[(E.OK = 200)] = "OK"),
                            (E[(E.CREATED = 201)] = "CREATED"),
                            (E[(E.ACCEPTED = 202)] = "ACCEPTED"),
                            (E[(E.NO_CONTENT = 204)] = "NO_CONTENT"),
                            (E[(E.PARTIAL_CONTENT = 206)] = "PARTIAL_CONTENT"),
                            (E[(E.BAD_REQUEST = 400)] = "BAD_REQUEST"),
                            (E[(E.UNAUTHORIZED = 401)] = "UNAUTHORIZED"),
                            (E[(E.PAYMENT_REQUIRED = 402)] = "PAYMENT_REQUIRED"),
                            (E[(E.FORBIDDEN = 403)] = "FORBIDDEN"),
                            (E[(E.NOT_FOUND = 404)] = "NOT_FOUND"),
                            (E[(E.METHOD_NOT_ALLOWED = 405)] = "METHOD_NOT_ALLOWED"),
                            (E[(E.NOT_ACCEPTABLE = 406)] = "NOT_ACCEPTABLE"),
                            (E[(E.PROXY_AUTHENTICATION_REQUIRED = 407)] = "PROXY_AUTHENTICATION_REQUIRED"),
                            (E[(E.TIMED_OUT = 408)] = "TIMED_OUT"),
                            (E[(E.REQUEST_TIMEOUT = 408)] = "REQUEST_TIMEOUT"),
                            (E[(E.CONFLICT = 409)] = "CONFLICT"),
                            (E[(E.GONE = 410)] = "GONE"),
                            (E[(E.LENGTH_REQUIRED = 411)] = "LENGTH_REQUIRED"),
                            (E[(E.PRECONDITION_FAILED = 412)] = "PRECONDITION_FAILED"),
                            (E[(E.REQUEST_ENTITY_TOO_LARGE = 413)] = "REQUEST_ENTITY_TOO_LARGE"),
                            (E[(E.REQUEST_URI_TOO_LONG = 414)] = "REQUEST_URI_TOO_LONG"),
                            (E[(E.UNSUPPORTED_MEDIA_TYPE = 415)] = "UNSUPPORTED_MEDIA_TYPE"),
                            (E[(E.REQUESTED_RANGE_NOT_SATISFIABLE = 416)] = "REQUESTED_RANGE_NOT_SATISFIABLE"),
                            (E[(E.EXPECTATION_FAILED = 417)] = "EXPECTATION_FAILED"),
                            (E[(E.INTERNAL_SERVER_ERROR = 500)] = "INTERNAL_SERVER_ERROR"),
                            (E[(E.NOT_IMPLEMENTED = 501)] = "NOT_IMPLEMENTED"),
                            (E[(E.BAD_GATEWAY = 502)] = "BAD_GATEWAY"),
                            (E[(E.SERVICE_UNAVAILABLE = 503)] = "SERVICE_UNAVAILABLE"),
                            (E[(E.GATEWAY_TIMEOUT = 504)] = "GATEWAY_TIMEOUT"),
                            (E[(E.HTTP_VERSION_NOT_SUPPORTED = 505)] = "HTTP_VERSION_NOT_SUPPORTED");
                    })((StatusCode = exports.StatusCode || (exports.StatusCode = {})));
            },
            {},
        ],
        150: [
            function (require, module, exports) {
                "use strict";
                var StatusFamily;
                Object.defineProperty(exports, "__esModule", { value: !0 }),
                    (exports.StatusFamily = void 0),
                    (function (R) {
                        (R[(R.CONNECTION_ERROR = 0)] = "CONNECTION_ERROR"),
                            (R[(R.INFORMATIONAL = 1)] = "INFORMATIONAL"),
                            (R[(R.SUCCESS = 2)] = "SUCCESS"),
                            (R[(R.REDIRECTION = 3)] = "REDIRECTION"),
                            (R[(R.CLIENT_ERROR = 4)] = "CLIENT_ERROR"),
                            (R[(R.SERVER_ERROR = 5)] = "SERVER_ERROR");
                    })((StatusFamily = exports.StatusFamily || (exports.StatusFamily = {})));
            },
            {},
        ],
        151: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.LoggingError = void 0);
                var tslib_1 = require("tslib"),
                    LoggingError = (function (r) {
                        function e(e, o, t) {
                            var g = r.call(this, e) || this;
                            return (g.name = "LoggingError"), (g.message = e), (g.code = o), (g.status = t || 0), g;
                        }
                        return tslib_1.__extends(e, r), e;
                    })(Error);
                exports.LoggingError = LoggingError;
            },
            { tslib: 190 },
        ],
        152: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.RequestError = void 0);
                var tslib_1 = require("tslib"),
                    RequestError = (function (r) {
                        function e(e, t, s) {
                            var o = r.call(this, e) || this;
                            return (o.name = "RequestError"), (o.message = e), (o.code = t), (o.status = s || 0), o;
                        }
                        return tslib_1.__extends(e, r), e;
                    })(Error);
                exports.RequestError = RequestError;
            },
            { tslib: 190 },
        ],
        153: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.TransportError = void 0);
                var tslib_1 = require("tslib"),
                    TransportError = (function (r) {
                        function o(o, t, e) {
                            void 0 === e && (e = null);
                            var s = r.call(this, t) || this;
                            return (s.name = "TransportError"), (s.message = t), (s.code = o), (s.origin = e), s;
                        }
                        return tslib_1.__extends(o, r), o;
                    })(Error);
                exports.TransportError = TransportError;
            },
            { tslib: 190 },
        ],
        154: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.XResolveError = void 0);
                var tslib_1 = require("tslib"),
                    XResolveError = (function (r) {
                        function e(e, o, s) {
                            void 0 === s && (s = -1);
                            var t = r.call(this, o) || this;
                            return (t.name = "XResolveError"), (t.message = o), (t.code = e), (t.status = s), t;
                        }
                        return tslib_1.__extends(e, r), e;
                    })(Error);
                exports.XResolveError = XResolveError;
            },
            { tslib: 190 },
        ],
        155: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.FetchHeaders = void 0);
                var FetchHeaders = (function () {
                    function e(e) {
                        (this.get = e.get.bind(e)), (this.has = e.has.bind(e));
                    }
                    return (
                        (e.prototype.get = function (e) {
                            return null;
                        }),
                        (e.prototype.has = function (e) {
                            return !1;
                        }),
                        e
                    );
                })();
                exports.FetchHeaders = FetchHeaders;
            },
            {},
        ],
        156: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.request = exports.isSupported = void 0);
                var allows_payload_1 = require("../../enums/allows_payload"),
                    status_code_1 = require("../../enums/status_code"),
                    headers_1 = require("./headers"),
                    response_1 = require("../response"),
                    AllowedResponseTypes = { json: !0, text: !0, arraybuffer: !0, blob: !0 };
                function isSupported() {
                    return "function" == typeof fetch;
                }
                function request(e) {
                    if (!isSupported()) return Promise.reject(new TypeError("Fetch is not supported"));
                    if (!e.url) return Promise.reject(new TypeError("Request URL cannot be blank."));
                    var o = e.method || "GET",
                        r = e.url,
                        s = null;
                    if ((o in allows_payload_1.AllowsPayload && e.payload ? (s = e.payload) : e.payload && (r += "?" + e.payload), e.options.responseType && !(e.options.responseType in AllowedResponseTypes)))
                        return Promise.reject(new TypeError("Cannot set responseType: not supported in browser."));
                    var t = { mode: e.options.mode || "cors", credentials: e.options.credentials || "same-origin", redirect: e.options.redirect || "follow", method: o };
                    e.headers.count() && (t.headers = e.headers.toJSON()), s && (t.body = s);
                    var n = Date.now();
                    return fetch(r, t)
                        .then(function (o) {
                            var r;
                            r =
                                e.options.ignoreResponseBody || o.status === status_code_1.StatusCode.NO_CONTENT
                                    ? null
                                    : "json" === e.options.responseType
                                    ? o.json().catch(function () {
                                          return null;
                                      })
                                    : "arraybuffer" === e.options.responseType
                                    ? o.arrayBuffer()
                                    : "blob" === e.options.responseType
                                    ? o.blob()
                                    : o.text();
                            var s = e.options.parseResponseHeaders || o.status > 299 ? new headers_1.FetchHeaders(o.headers) : null;
                            return Promise.all([o.url, o.status, s, r]);
                        })
                        .then(function (o) {
                            var r = o[0],
                                s = o[1],
                                t = o[2],
                                p = o[3],
                                i = new response_1.HTTPResponse(r, s);
                            if (((i.body = p), (i.headers = t), e.options.timing)) {
                                var a = Date.now() - n;
                                i.timing = { completed: a };
                            }
                            return i;
                        })
                        .catch(function () {
                            var o = new response_1.HTTPResponse(r);
                            if (e.options.timing) {
                                var s = Date.now() - n;
                                o.timing = { completed: s };
                            }
                            return o;
                        })
                        .then(function (o) {
                            return e.options.connectionObserver && (o.offline = !e.options.connectionObserver.isOnline()), o;
                        });
                }
                (exports.isSupported = isSupported), (exports.request = request);
            },
            { "../../enums/allows_payload": 143, "../../enums/status_code": 149, "../response": 159, "./headers": 155 },
        ],
        157: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.HTTPRequest = void 0);
                var request_headers_1 = require("./request_headers"),
                    HTTPRequest = (function () {
                        function e(e, t) {
                            (this.url = e),
                                (this.method = (null == t ? void 0 : t.method) || "GET"),
                                (this.headers = new request_headers_1.HTTPRequestHeaders(null == t ? void 0 : t.headers)),
                                (this.options = (null == t ? void 0 : t.options) || {}),
                                (this.payload = null == t ? void 0 : t.payload),
                                (this.urlExpanded = (null == t ? void 0 : t.urlExpanded) || !1),
                                (this.retryOptions = (null == t ? void 0 : t.retryOptions) || {});
                        }
                        return (
                            (e.create = function (t, s) {
                                return new e(t, s);
                            }),
                            e
                        );
                    })();
                exports.HTTPRequest = HTTPRequest;
            },
            { "./request_headers": 158 },
        ],
        158: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.HTTPRequestHeaders = void 0);
                var tslib_1 = require("tslib"),
                    HTTPRequestHeaders = (function () {
                        function e(e) {
                            (this._headers = {}), (this._count = 0), this._setAll(e);
                        }
                        return (
                            (e.prototype._setAll = function (e) {
                                var t = 0;
                                for (var s in e) e.hasOwnProperty(s) && ((this._headers[s.toLowerCase()] = e[s]), t++);
                                this._count = t;
                            }),
                            (e.prototype.get = function (e) {
                                return this._headers[e.toLowerCase()] || null;
                            }),
                            (e.prototype.has = function (e) {
                                return !!this._headers[e.toLowerCase()];
                            }),
                            (e.prototype.set = function (e, t) {
                                (this._headers[e.toLowerCase()] = t), this._count++;
                            }),
                            (e.prototype.delete = function (e) {
                                var t = e.toLowerCase();
                                this._headers[t] && this._count--, delete this._headers[e.toLowerCase()];
                            }),
                            (e.prototype.count = function () {
                                return this._count;
                            }),
                            (e.prototype.toJSON = function () {
                                return tslib_1.__assign({}, this._headers);
                            }),
                            e
                        );
                    })();
                exports.HTTPRequestHeaders = HTTPRequestHeaders;
            },
            { tslib: 190 },
        ],
        159: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.HTTPResponse = void 0);
                var HTTPResponse = (function () {
                    function t(t, s) {
                        void 0 === s && (s = 0),
                            (this.url = ""),
                            (this.status = 0),
                            (this.headers = null),
                            (this.body = null),
                            (this.offline = !1),
                            (this.timing = null),
                            (this.metadata = null),
                            (this.url = t),
                            (this.status = s),
                            (this.ok = s >= 200 && s <= 299);
                    }
                    return (
                        (t.prototype.getStatusFamily = function () {
                            return 0 | (this.status / 100);
                        }),
                        t
                    );
                })();
                exports.HTTPResponse = HTTPResponse;
            },
            {},
        ],
        160: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.XHRHeaders = void 0);
                var XHRHeaders = (function () {
                    function e(e) {
                        (this._headers = {}), this._init(e);
                    }
                    return (
                        (e.prototype._init = function (e) {
                            if (e)
                                for (var t = e.split("\r\n"), r = 0; r < t.length; r++) {
                                    var s = t[r],
                                        o = s.indexOf(": ");
                                    if (o > 0) {
                                        var i = s.substring(0, o).toLowerCase(),
                                            n = s.substring(o + 2);
                                        this._headers[i] = n;
                                    }
                                }
                        }),
                        (e.prototype.get = function (e) {
                            return this._headers[e.toLowerCase()] || null;
                        }),
                        (e.prototype.has = function (e) {
                            return this._headers.hasOwnProperty(e.toLowerCase());
                        }),
                        e
                    );
                })();
                exports.XHRHeaders = XHRHeaders;
            },
            {},
        ],
        161: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.request = void 0);
                var allows_payload_1 = require("../../enums/allows_payload"),
                    errors_1 = require("../../enums/errors"),
                    status_code_1 = require("../../enums/status_code"),
                    request_1 = require("../../error/request"),
                    response_1 = require("../response"),
                    headers_1 = require("./headers"),
                    NOOP = function () {},
                    PolyfilledResponseTypes = { json: !0, text: !0, document: !0 },
                    SENTINEL = {},
                    SENTINEL_PROMISE = Promise.resolve(SENTINEL);
                function handleEnd() {
                    (this.onabort = NOOP), (this.onerror = NOOP), (this.onload = NOOP), (this.onloadend = NOOP);
                }
                function handleLoad(e, r, n) {
                    var s,
                        o = Date.now(),
                        t = this.status,
                        i = new response_1.HTTPResponse(this.responseURL || e.url, t);
                    i.body = null;
                    var a = e.options;
                    if (
                        (a.timing && (i.timing = { completed: o - r }),
                        (null === (s = a.connectionObserver) || void 0 === s ? void 0 : s.isOnline) && (i.offline = !a.connectionObserver.isOnline()),
                        (a.parseResponseHeaders || t > 299) && (i.headers = new headers_1.XHRHeaders(this.getAllResponseHeaders())),
                        !a.ignoreResponseBody && t !== status_code_1.StatusCode.NO_CONTENT && 2 === i.getStatusFamily())
                    ) {
                        var l = a.responseType || "";
                        if (!a.forcePolyfill && "response" in this && l === this.responseType) i.body = this.response;
                        else if ("document" === l) i.body = this.responseXML;
                        else if ("json" === l)
                            try {
                                i.body = JSON.parse(this.responseText);
                            } catch (e) {
                                i.body = null;
                            }
                        else ("text" !== l && "" !== l) || (i.body = this.responseText);
                    }
                    n(i);
                }
                function handleError(e, r, n) {
                    4 === this.readyState ? r(new response_1.HTTPResponse(this.responseURL || e, this.status)) : n(new request_1.RequestError(errors_1.TransportErrors.HTTP_REQUEST_FAILED, "Request cannot be completed.", this.status));
                }
                function performXHRRequest(e) {
                    return new Promise(function (r, n) {
                        var s,
                            o = new XMLHttpRequest(),
                            t = e.url;
                        if (t) {
                            var i = null,
                                a = e.method || "GET",
                                l = e.payload || "";
                            a in allows_payload_1.AllowsPayload && l ? (i = l) : l && (t += "?" + l), o.open(a, t, !0), (o.onerror = handleError.bind(o, t, r, n)), (o.onabort = handleEnd), (o.onloadend = handleEnd), (o.onprogress = NOOP);
                            var p = e.options;
                            "include" === p.credentials && (o.withCredentials = !0);
                            var d = p.responseType;
                            if (d)
                                if (p.forcePolyfill) {
                                    if (!(d in PolyfilledResponseTypes)) return void n(new TypeError('Cannot polyfill responseType "' + d + '"'));
                                } else {
                                    if (!("responseType" in o || d in PolyfilledResponseTypes)) return void n(new TypeError("Cannot set responseType: not supported in browser."));
                                    try {
                                        o.responseType = d;
                                    } catch (e) {
                                        return void n(new TypeError('Unknown responseType "' + d + '".'));
                                    }
                                    if (o && d !== o.responseType && !(d in PolyfilledResponseTypes)) return void n(new TypeError('Unknown responseType "' + d + '".'));
                                }
                            var u = e.headers.count() ? e.headers.toJSON() : null;
                            if (u)
                                for (var y in u)
                                    if (u.hasOwnProperty(y))
                                        try {
                                            o.setRequestHeader(y, u[y]);
                                        } catch (e) {
                                            return void n(e);
                                        }
                            o.onload = handleLoad.bind(o, e, Date.now(), r);
                            try {
                                o.send(i);
                            } catch (e) {
                                return void n(e);
                            }
                            null === (s = p.canceller) ||
                                void 0 === s ||
                                s.then(
                                    function () {
                                        return o.abort();
                                    },
                                    function () {
                                        return o.abort();
                                    }
                                );
                        } else n(new TypeError("Request URL cannot be blank."));
                    });
                }
                function request(e) {
                    var r = e.options.canceller;
                    return (r ? Promise.race([r, SENTINEL_PROMISE]) : SENTINEL_PROMISE).then(function (r) {
                        return r !== SENTINEL ? new Promise(function () {}) : performXHRRequest(e);
                    });
                }
                exports.request = request;
            },
            { "../../enums/allows_payload": 143, "../../enums/errors": 144, "../../enums/status_code": 149, "../../error/request": 152, "../response": 159, "./headers": 160 },
        ],
        162: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.createTransport = exports.createBaseTransport = void 0);
                var tslib_1 = require("tslib"),
                    errors_1 = require("./enums/errors");
                Object.defineProperty(exports, "TransportErrors", {
                    enumerable: !0,
                    get: function () {
                        return errors_1.TransportErrors;
                    },
                });
                var event_1 = require("./enums/event");
                Object.defineProperty(exports, "TransportEvent", {
                    enumerable: !0,
                    get: function () {
                        return event_1.Event;
                    },
                });
                var method_1 = require("./enums/method");
                Object.defineProperty(exports, "Method", {
                    enumerable: !0,
                    get: function () {
                        return method_1.Method;
                    },
                });
                var plugin_event_1 = require("./enums/plugin_event");
                Object.defineProperty(exports, "PluginEvent", {
                    enumerable: !0,
                    get: function () {
                        return plugin_event_1.PluginEvent;
                    },
                });
                var dealer_1 = require("./plugins/dealer"),
                    Fetch = require("./http/fetch"),
                    transport_1 = require("./transport"),
                    XHR = require("./http/xhr"),
                    response_1 = require("./http/response"),
                    request_1 = require("./http/request"),
                    public_transport_1 = require("./_internal/public_transport"),
                    xresolve_1 = require("./providers/endpoints/xresolve");
                Object.defineProperty(exports, "createXResolveProvider", {
                    enumerable: !0,
                    get: function () {
                        return xresolve_1.createProvider;
                    },
                });
                var dealer_2 = require("./plugins/dealer");
                function createBaseTransport(e) {
                    var r = tslib_1.__assign({}, e);
                    return r.XHR || (r.XHR = XHR), (r.Fetch = Fetch), transport_1.Transport.create(r);
                }
                function createTransport(e) {
                    var r = createBaseTransport(e);
                    return r.addPlugin(dealer_1.dealerCreator, { WebSocket: WebSocket }), r;
                }
                Object.defineProperty(exports, "DEALER_PLUGIN_NAME", {
                    enumerable: !0,
                    get: function () {
                        return dealer_2.DEALER_PLUGIN_NAME;
                    },
                }),
                    (exports.createBaseTransport = createBaseTransport),
                    (exports.createTransport = createTransport);
            },
            {
                "./_internal/public_transport": 142,
                "./enums/errors": 144,
                "./enums/event": 145,
                "./enums/method": 147,
                "./enums/plugin_event": 148,
                "./http/fetch": 156,
                "./http/request": 157,
                "./http/response": 159,
                "./http/xhr": 161,
                "./plugins/dealer": 167,
                "./providers/endpoints/xresolve": 170,
                "./transport": 172,
                tslib: 190,
            },
        ],
        163: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.Logger = void 0);
                var errors_1 = require("./enums/errors"),
                    method_1 = require("./enums/method"),
                    status_code_1 = require("./enums/status_code"),
                    logging_1 = require("./error/logging"),
                    DEFAULT_MELODY_ENDPOINT = "https://@webgate/melody",
                    LogValues = { UNKNOWN: "unknown", EMPTY: "", ZERO: 0, EMPTY_VERSION: "0.0.0" },
                    LogEndpoints = {
                        CLIENT_EVENT: { url: "/v1/logging/client_event" },
                        ELAPSED_TIME: { url: "/v1/logging/elapsed_time" },
                        JSSDK_ERROR: { url: "/v1/logging/jssdk_error", allowUnauthenticated: !0 },
                        JSSDK_INTERVAL_TIMER: { url: "/v1/logging/jssdk_interval_timer" },
                        JSSDK_PLAYBACK_STATS: { url: "/v1/logging/jssdk_playback_stats", allowUnauthenticated: !0 },
                        JSSDK_PLAYBACK_START: { url: "/v1/logging/jssdk_playback_start" },
                        JSSDK_STALL: { url: "/v1/logging/jssdk_stall", allowUnauthenticated: !0 },
                        JSSDK_TIMER: { url: "/v1/logging/jssdk_timer" },
                        JSSDK_WARNING: { url: "/v1/logging/jssdk_warning", allowUnauthenticated: !0 },
                        TRACK_STREAM_VERIFICATION: { url: "/v1/logging/track_stream_verification" },
                        METRICS: { url: "/v1/metric" },
                    },
                    Logger = (function () {
                        function e(e) {
                            (this._sdkId = null),
                                (this._platformId = null),
                                (this._clientVersion = null),
                                (this._transport = e.transport),
                                (this._endpoint = e.endpoint || DEFAULT_MELODY_ENDPOINT),
                                (this._sdkIdPromise = Promise.resolve(e.sdkId || "transport:1.0.0")),
                                (this._platformPromise = Promise.resolve(e.platform || "spotify-transport")),
                                (this._clientVersionPromise = Promise.resolve(e.clientVersion || "0.0.0")),
                                (this._allowUnauthenticated = !!e.allowUnauthenticated);
                        }
                        return (
                            (e.create = function (t) {
                                return new e(t);
                            }),
                            (e.prototype._getIdentData = function () {
                                var e = this;
                                return this._platformId && this._sdkId && this._clientVersion
                                    ? Promise.resolve({ platform: this._platformId, sdk_id: this._sdkId, client_version: this._clientVersion })
                                    : Promise.all([this._platformPromise, this._sdkIdPromise, this._clientVersionPromise]).then(function (t) {
                                          var s = t[0],
                                              r = t[1],
                                              i = t[2];
                                          return (e._platformId = s), (e._sdkId = r), (e._clientVersion = i), Promise.resolve({ platform: s, sdk_id: r, client_version: i });
                                      });
                            }),
                            (e.prototype._decoratePayload = function (e) {
                                return this._getIdentData().then(function (t) {
                                    return (e.sdk_id = t.sdk_id), (e.platform = t.platform), (e.client_version = t.client_version), e;
                                });
                            }),
                            (e.prototype._sendLog = function (e, t) {
                                var s = !this._allowUnauthenticated || !e.allowUnauthenticated || this._transport.isAuthenticated();
                                return this._transport
                                    .request(this._endpoint + e.url, {
                                        method: method_1.Method.POST,
                                        authorize: s,
                                        payload: JSON.stringify(t),
                                        retry: {
                                            maxRetries: 5,
                                            condition: function (e) {
                                                return e.status !== status_code_1.StatusCode.ACCEPTED;
                                            },
                                        },
                                    })
                                    .then(function (e) {
                                        var t = e.status;
                                        return t === status_code_1.StatusCode.ACCEPTED || Promise.reject(new logging_1.LoggingError(errors_1.TransportErrors.LOGGING_REQUEST_FAILED, "Logging service responded with status " + t, t));
                                    });
                            }),
                            (e.prototype._logErrorVariant = function (e, t, s) {
                                var r = {
                                    sdk_id: void 0,
                                    platform: void 0,
                                    client_version: void 0,
                                    source: t.source || LogValues.UNKNOWN,
                                    source_version: t.source_version || LogValues.UNKNOWN,
                                    type: t.type || LogValues.UNKNOWN,
                                    message: t.message || LogValues.EMPTY,
                                    stack: JSON.stringify(t.stack || LogValues.EMPTY),
                                    json_data: "json" === s ? t.json_data || "{}" : JSON.stringify(t.json_data || {}),
                                    json_data_version: t.json_data_version || LogValues.EMPTY_VERSION,
                                };
                                return this._decoratePayload(r).then(this._sendLog.bind(this, e));
                            }),
                            (e.prototype.logClientEvent = function (e, t) {
                                if (!e) return Promise.reject(new TypeError("Logger.logClientEvent `data` cannot be null."));
                                var s = {
                                    sdk_id: void 0,
                                    platform: void 0,
                                    client_version: void 0,
                                    source: e.source || LogValues.UNKNOWN,
                                    context: e.context || LogValues.UNKNOWN,
                                    event: e.event || LogValues.UNKNOWN,
                                    event_version: e.event_version || LogValues.EMPTY,
                                    test_version: e.test_version || LogValues.EMPTY,
                                    source_version: e.source_version || LogValues.UNKNOWN,
                                    source_vendor: e.source_vendor || LogValues.UNKNOWN,
                                    json_data: "json" === t ? e.json_data || "{}" : JSON.stringify(e.json_data || {}),
                                };
                                return this._decoratePayload(s).then(this._sendLog.bind(this, LogEndpoints.CLIENT_EVENT));
                            }),
                            (e.prototype.logJSSDKError = function (e, t) {
                                return this._logErrorVariant(LogEndpoints.JSSDK_ERROR, e, t);
                            }),
                            (e.prototype.logJSSDKWarning = function (e, t) {
                                return this._logErrorVariant(LogEndpoints.JSSDK_WARNING, e, t);
                            }),
                            (e.prototype.logJSSDKPlaybackStats = function (e) {
                                var t = {
                                    sdk_id: void 0,
                                    platform: void 0,
                                    client_version: void 0,
                                    play_track: e.play_track,
                                    file_id: e.file_id,
                                    playback_id: e.playback_id,
                                    internal_play_id: e.internal_play_id,
                                    memory_cached: e.memory_cached,
                                    persistent_cached: e.persistent_cached,
                                    audio_format: e.audio_format,
                                    video_format: e.video_format,
                                    manifest_id: e.manifest_id,
                                    protected: e.protected,
                                    key_system: e.key_system,
                                    key_system_impl: e.key_system_impl,
                                    urls_json: e.urls_json,
                                    start_time: e.start_time,
                                    end_time: e.end_time,
                                    external_start_time: e.external_start_time,
                                    ms_play_latency: e.ms_play_latency,
                                    ms_init_latency: e.ms_init_latency,
                                    ms_head_latency: e.ms_head_latency,
                                    ms_manifest_latency: e.ms_manifest_latency,
                                    ms_resolve_latency: e.ms_resolve_latency,
                                    ms_license_generation_latency: e.ms_license_generation_latency,
                                    ms_license_request_latency: e.ms_license_request_latency,
                                    ms_license_session_latency: e.ms_license_session_latency,
                                    ms_license_update_latency: e.ms_license_update_latency,
                                    ms_played: e.ms_played,
                                    ms_nominal_played: e.ms_nominal_played,
                                    ms_file_duration: e.ms_file_duration,
                                    ms_actual_duration: e.ms_actual_duration,
                                    ms_start_position: e.ms_start_position,
                                    ms_end_position: e.ms_end_position,
                                    ms_seek_rebuffer: e.ms_seek_rebuffer,
                                    ms_seek_rebuffer_longest: e.ms_seek_rebuffer_longest,
                                    ms_stall_rebuffer: e.ms_stall_rebuffer,
                                    ms_stall_rebuffer_longest: e.ms_stall_rebuffer_longest,
                                    n_stalls: e.n_stalls,
                                    n_seekback: e.n_seekback,
                                    n_seekforward: e.n_seekforward,
                                    start_bitrate: e.start_bitrate,
                                    time_weighted_bitrate: e.time_weighted_bitrate,
                                    reason_start: e.reason_start,
                                    reason_end: e.reason_end,
                                    initially_paused: e.initially_paused,
                                    had_error: e.had_error,
                                    n_warnings: e.n_warnings,
                                    n_navigator_offline: e.n_navigator_offline,
                                    session_id: e.session_id,
                                    sequence_id: e.sequence_id,
                                };
                                return this._decoratePayload(t).then(this._sendLog.bind(this, LogEndpoints.JSSDK_PLAYBACK_STATS));
                            }),
                            (e.prototype.logJSSDKPlaybackStart = function (e) {
                                var t = {
                                    sdk_id: void 0,
                                    platform: void 0,
                                    client_version: void 0,
                                    play_track: e.play_track,
                                    file_id: e.file_id,
                                    playback_id: e.playback_id,
                                    session_id: e.session_id,
                                    ms_start_position: e.ms_start_position,
                                    initially_paused: e.initially_paused,
                                };
                                return this._decoratePayload(t).then(this._sendLog.bind(this, LogEndpoints.JSSDK_PLAYBACK_START));
                            }),
                            (e.prototype.logJSSDKStall = function (e) {
                                var t = {
                                    sdk_id: void 0,
                                    platform: void 0,
                                    client_version: void 0,
                                    session_id: e.session_id || LogValues.EMPTY,
                                    playback_id: e.playback_id || LogValues.EMPTY,
                                    play_track: e.play_track || LogValues.EMPTY,
                                    file_id: e.file_id || LogValues.EMPTY,
                                    byte_offset: e.byte_offset || LogValues.ZERO,
                                    time_offset: e.time_offset || LogValues.ZERO,
                                    ms_stalled: e.ms_stalled || LogValues.ZERO,
                                    timed_out: !!e.timed_out,
                                };
                                return this._decoratePayload(t).then(this._sendLog.bind(this, LogEndpoints.JSSDK_STALL));
                            }),
                            (e.prototype.logTrackStreamVerification = function (e) {
                                var t = {
                                    sdk_id: void 0,
                                    platform: void 0,
                                    client_version: void 0,
                                    play_track: e.play_track,
                                    playback_id: e.playback_id,
                                    ms_played: e.ms_played,
                                    session_id: e.session_id,
                                    sequence_id: e.sequence_id,
                                    next_playback_id: e.next_playback_id,
                                };
                                return this._decoratePayload(t).then(this._sendLog.bind(this, LogEndpoints.TRACK_STREAM_VERIFICATION));
                            }),
                            (e.prototype.logMetrics = function (e, t) {
                                if (!e && !t) return Promise.resolve(!0);
                                var s = e || [],
                                    r = t || [];
                                if (!s.length && !r.length) return Promise.resolve(!0);
                                if (!Array.isArray(s) || !Array.isArray(r)) return Promise.reject(new TypeError("Logger.logMetrics `meters` and `timers` must be null or an array."));
                                for (var i = 0, o = s; i < o.length; i++) {
                                    var n = o[i];
                                    if (!("what" in n && "result" in n && "reason" in n)) return Promise.reject(new TypeError("Logger.logMetrics: Invalid meter format in `meters` array."));
                                }
                                for (var a = 0, _ = r; a < _.length; a++) {
                                    var l = _[a];
                                    if (!("what" in l && "duration" in l)) return Promise.reject(new TypeError("Logger.logMetrics: Invalid timer format in `timers` array."));
                                }
                                var d = { sdk_id: void 0, platform: void 0, client_version: void 0, meters: s, timers: r };
                                return this._decoratePayload(d).then(this._sendLog.bind(this, LogEndpoints.METRICS));
                            }),
                            e
                        );
                    })();
                exports.Logger = Logger;
            },
            { "./enums/errors": 144, "./enums/method": 147, "./enums/status_code": 149, "./error/logging": 151 },
        ],
        164: [
            function (require, module, exports) {
                (function (Buffer) {
                    (function () {
                        "use strict";
                        Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.Dealer = void 0);
                        var tslib_1 = require("tslib"),
                            emitter_1 = require("@spotify-internal/emitter"),
                            typedefs_1 = require("./typedefs"),
                            internal_socket_code_1 = require("../../enums/internal_socket_code"),
                            error_1 = require("./error"),
                            event_1 = require("./event"),
                            defer_1 = require("../../_internal/defer"),
                            NOOP = function () {},
                            CONNECTION_ID_EXP = /hm:\/\/pusher\/(?:[^]+)?\/connections\/([^]+)/,
                            HEARTBEAT_INTERVAL = 3e4,
                            HEARTBEAT_TIMEOUT = 1e4,
                            hasWindow = "undefined" != typeof window,
                            Dealer = (function (e) {
                                function t(t) {
                                    var n = e.call(this) || this;
                                    return (
                                        (n._socket = null),
                                        (n._lastPingDeferred = null),
                                        (n._waitingForConnectionId = !0),
                                        (n._connectionId = null),
                                        (n._connectionURI = null),
                                        (n._heartbeatToken = 0),
                                        (n._heartbeatTimeoutToken = 0),
                                        (n._connected = !1),
                                        (n._endpoint = null),
                                        (n._WebSocket = t.WebSocket || WebSocket),
                                        (n._heartbeatTimeout = t.heartbeatTimeout || HEARTBEAT_TIMEOUT),
                                        n
                                    );
                                }
                                return (
                                    tslib_1.__extends(t, e),
                                    (t.create = function (e) {
                                        return new t(e);
                                    }),
                                    (t.prototype._startHeartbeat = function (e) {
                                        var t = this,
                                            n = function () {
                                                t.ping().then(
                                                    function () {
                                                        return t._onHeartbeatSuccess();
                                                    },
                                                    function () {
                                                        return t._onHeartbeatError();
                                                    }
                                                ),
                                                    (t._heartbeatTimeoutToken = setTimeout(function () {
                                                        return t._onHeartbeatError();
                                                    }, t._heartbeatTimeout));
                                            };
                                        e
                                            ? n()
                                            : (this._heartbeatToken = setTimeout(function () {
                                                  return n();
                                              }, HEARTBEAT_INTERVAL));
                                    }),
                                    (t.prototype._onHeartbeatError = function () {
                                        this._stopHeartbeat(), this._socket && this._socket.close(internal_socket_code_1.InternalSocketCode.TIMEOUT, "internal-timeout");
                                    }),
                                    (t.prototype._onHeartbeatSuccess = function () {
                                        this._stopHeartbeat(), this._startHeartbeat();
                                    }),
                                    (t.prototype._stopHeartbeat = function () {
                                        null !== this._heartbeatToken && clearTimeout(this._heartbeatToken), null !== this._heartbeatTimeoutToken && clearTimeout(this._heartbeatTimeoutToken);
                                    }),
                                    (t.prototype._prepareConnectionId = function (e) {
                                        if (!e.uri) return !1;
                                        var t,
                                            n = e.uri.match(CONNECTION_ID_EXP);
                                        return (
                                            !!n &&
                                            ((t = e.headers && e.headers["Spotify-Connection-Id"] ? e.headers["Spotify-Connection-Id"] : decodeURIComponent(n[1])),
                                            (this._connectionId = t),
                                            (this._connectionURI = e.uri),
                                            this.emit(event_1.DealerEvent.CONNECTION_ID, { id: t, uri: e.uri }),
                                            !0)
                                        );
                                    }),
                                    (t.prototype._reply = function (e, t) {
                                        if (!e) throw new TypeError("Invalid key.");
                                        var n = this._socket;
                                        if (n && 1 === n.readyState) {
                                            var r = { type: "reply", key: e, payload: t };
                                            n.send(JSON.stringify(r));
                                        }
                                    }),
                                    (t.prototype._parseMessage = function (e) {
                                        var t;
                                        try {
                                            t = JSON.parse(e);
                                        } catch (e) {
                                            return;
                                        }
                                        if ("message" === t.type)
                                            this._waitingForConnectionId && this._prepareConnectionId(t) ? ((this._waitingForConnectionId = !1), this._startHeartbeat(!0)) : this.emit(event_1.DealerEvent.MESSAGE, { message: t });
                                        else if ("pong" === t.type && this._lastPingDeferred) this._lastPingDeferred.resolve(!0), (this._lastPingDeferred = null);
                                        else if ("request" === t.type) {
                                            var n = t.key;
                                            n && this.emit(event_1.DealerEvent.REQUEST, { request: t, reply: this._reply.bind(this, n) });
                                        }
                                    }),
                                    (t.prototype._handleOpen = function (e) {
                                        e.resolve(!0), (this._connected = !0), this.emit(event_1.DealerEvent.AUTHENTICATED, null);
                                    }),
                                    (t.prototype._handleMessage = function (e) {
                                        var t = this,
                                            n = e.data;
                                        if (hasWindow && window.Blob && n instanceof window.Blob) {
                                            var r = new FileReader();
                                            (r.onloadend = function () {
                                                if (this.result) {
                                                    var e;
                                                    if (this.result instanceof ArrayBuffer) {
                                                        e = "";
                                                        for (var n = new Uint8Array(this.result), r = 0; r < n.length; r++) e += String.fromCharCode(n[r]);
                                                    } else e = this.result;
                                                    t._parseMessage(e);
                                                }
                                            }),
                                                r.readAsText(n);
                                        } else "undefined" != typeof Buffer && "undefined" != typeof ArrayBuffer && n instanceof ArrayBuffer ? this._parseMessage(new Buffer(n).toString("ascii")) : this._parseMessage(n);
                                    }),
                                    (t.prototype._handleClose = function (e) {
                                        var t = this._connected;
                                        if (((this._connected = !1), t)) this.emitSync(event_1.DealerEvent.DISCONNECTED, { wsCode: e.code, reason: e.reason });
                                        else {
                                            var n = new error_1.DealerError(typedefs_1.DealerErrors.DEALER_AUTHENTICATION_FAILED, "Dealer connection error", e);
                                            this.emit(event_1.DealerEvent.AUTHENTICATION_FAILED, { error: n });
                                        }
                                    }),
                                    (t.prototype._handleError = function (e) {
                                        var t = new error_1.DealerError(typedefs_1.DealerErrors.DEALER_CONNECTION_ERROR, "Cannot connect to dealer");
                                        e.reject(t), (this._connected = !1), this.emit(event_1.DealerEvent.ERROR, { error: t });
                                    }),
                                    (t.prototype.connect = function (e) {
                                        return (this._endpoint = e), (this._waitingForConnectionId = !0), this.emit(event_1.DealerEvent.CONNECTED, null), Promise.resolve(!0);
                                    }),
                                    (t.prototype.authenticate = function (e) {
                                        var t = defer_1.defer(),
                                            n = this._endpoint + "?access_token=" + e,
                                            r = (this._socket = new this._WebSocket(n));
                                        return (
                                            (r.onopen = this._handleOpen.bind(this, t)), (r.onclose = this._handleClose.bind(this)), (r.onerror = this._handleError.bind(this, t)), (r.onmessage = this._handleMessage.bind(this)), t.promise
                                        );
                                    }),
                                    (t.prototype.disconnect = function () {
                                        this._socket &&
                                            (this._stopHeartbeat(),
                                            (this._waitingForConnectionId = !0),
                                            (this._connected = !1),
                                            this._socket.close(internal_socket_code_1.InternalSocketCode.CLOSE, "internal-close"),
                                            (this._socket.onopen = NOOP),
                                            (this._socket.onerror = NOOP),
                                            (this._socket.onmessage = NOOP),
                                            (this._socket.onclose = NOOP),
                                            (this._socket = null),
                                            this.emitSync(event_1.DealerEvent.DISCONNECTED, { wsCode: internal_socket_code_1.InternalSocketCode.CLOSE, reason: "internal-close" }));
                                    }),
                                    (t.prototype.ping = function () {
                                        return this._socket && 1 === this._socket.readyState
                                            ? ((this._lastPingDeferred = defer_1.defer()), this._socket.send('{"type":"ping"}'), this._lastPingDeferred.promise)
                                            : Promise.reject(new error_1.DealerError(typedefs_1.DealerErrors.DEALER_CONNECTION_ERROR, "Dealer connection error"));
                                    }),
                                    (t.prototype.getConnectionId = function () {
                                        var e = this;
                                        return this._waitingForConnectionId
                                            ? new Promise(function (t) {
                                                  e.once(event_1.DealerEvent.CONNECTION_ID, function (e) {
                                                      t(e.data.id);
                                                  });
                                              })
                                            : Promise.resolve(this._connectionId);
                                    }),
                                    (t.prototype.getConnectionInfo = function () {
                                        var e = this;
                                        return this._waitingForConnectionId
                                            ? new Promise(function (t) {
                                                  e.once(event_1.DealerEvent.CONNECTION_ID, function (e) {
                                                      t({ id: e.data.id, uri: e.data.uri });
                                                  });
                                              })
                                            : Promise.resolve({ id: this._connectionId, uri: this._connectionURI });
                                    }),
                                    (t.prototype.hasConnectionId = function () {
                                        return !this._waitingForConnectionId && !!this._connectionId;
                                    }),
                                    t
                                );
                            })(emitter_1.EventEmitter);
                        exports.Dealer = Dealer;
                    }.call(this));
                }.call(this, require("buffer").Buffer));
            },
            { "../../_internal/defer": 141, "../../enums/internal_socket_code": 146, "./error": 165, "./event": 166, "./typedefs": 168, "@spotify-internal/emitter": 71, buffer: 184, tslib: 190 },
        ],
        165: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.DealerError = void 0);
                var tslib_1 = require("tslib"),
                    typedefs_1 = require("./typedefs"),
                    DealerError = (function (e) {
                        function r(r, o, s) {
                            void 0 === r && (r = typedefs_1.DealerErrors.DEALER_ERROR), void 0 === s && (s = {});
                            var t = e.call(this, o) || this;
                            return (t.name = "DealerError"), (t.message = o), (t.code = r), (t.raw = s), (t.wsCode = s.code || null), (t.wsReason = s.reason || null), t;
                        }
                        return tslib_1.__extends(r, e), r;
                    })(Error);
                exports.DealerError = DealerError;
            },
            { "./typedefs": 168, tslib: 190 },
        ],
        166: [
            function (require, module, exports) {
                "use strict";
                var DealerEvent;
                Object.defineProperty(exports, "__esModule", { value: !0 }),
                    (exports.DealerEvent = void 0),
                    (function (e) {
                        (e.AUTHENTICATED = "authenticated"),
                            (e.AUTHENTICATION_FAILED = "authentication_failed"),
                            (e.CONNECTED = "connected"),
                            (e.CONNECTION_ID = "connection_id"),
                            (e.ERROR = "error"),
                            (e.DISCONNECTED = "disconnected"),
                            (e.MESSAGE = "message"),
                            (e.REQUEST = "request");
                    })((DealerEvent = exports.DealerEvent || (exports.DealerEvent = {})));
            },
            {},
        ],
        167: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.dealerCreator = exports.DealerErrors = exports.DEALER_PLUGIN_NAME = void 0);
                var tslib_1 = require("tslib"),
                    typedefs_1 = require("./typedefs");
                Object.defineProperty(exports, "DealerErrors", {
                    enumerable: !0,
                    get: function () {
                        return typedefs_1.DealerErrors;
                    },
                });
                var plugin_event_1 = require("../../enums/plugin_event"),
                    error_1 = require("./error"),
                    event_1 = require("./event"),
                    dealer_1 = require("./dealer");
                exports.DEALER_PLUGIN_NAME = "dealer";
                var DealerPlugin = (function () {
                    function e(e) {
                        var t = this;
                        (this.name = exports.DEALER_PLUGIN_NAME),
                            (this._dealer = new dealer_1.Dealer(e)),
                            (this.api = {
                                hasConnectionInfo: function () {
                                    return t._dealer.hasConnectionId();
                                },
                                getConnectionInfo: function () {
                                    return t._dealer.getConnectionInfo().then(function (e) {
                                        return tslib_1.__assign({ plugin: t.name }, e);
                                    });
                                },
                            }),
                            (this._onDealerConnectionId = this._onDealerConnectionId.bind(this)),
                            (this._onDealerDisconnected = this._onDealerDisconnected.bind(this)),
                            (this._onDealerMessage = this._onDealerMessage.bind(this)),
                            (this._onDealerRequest = this._onDealerRequest.bind(this)),
                            (this._onTransportConnect = this._onTransportConnect.bind(this)),
                            (this._onTransportAuthenticate = this._onTransportAuthenticate.bind(this)),
                            (this._onTransportDisconnect = this._onTransportDisconnect.bind(this));
                    }
                    return (
                        (e.prototype._onDealerConnectionId = function (e) {
                            this._mediator && this._mediator.emit(plugin_event_1.PluginEvent.PLUGIN_CONNECTION_INFO, tslib_1.__assign({ plugin: this.name }, e.data));
                        }),
                        (e.prototype._onDealerDisconnected = function (e) {
                            if (this._mediator) {
                                var t = e.data;
                                this._mediator.emit(plugin_event_1.PluginEvent.PLUGIN_DISCONNECTED, { plugin: this.name, code: t.wsCode, reason: t.reason });
                            }
                        }),
                        (e.prototype._onDealerMessage = function (e) {
                            this._mediator && this._mediator.emit(plugin_event_1.PluginEvent.PLUGIN_MESSAGE, tslib_1.__assign({ plugin: this.name }, e.data));
                        }),
                        (e.prototype._onDealerRequest = function (e) {
                            this._mediator && this._mediator.emit(plugin_event_1.PluginEvent.PLUGIN_REQUEST, tslib_1.__assign({ plugin: this.name }, e.data));
                        }),
                        (e.prototype._onTransportConnect = function (e) {
                            var t = e.data.endpoints,
                                n = e.data.awaitPromise;
                            t.dealer
                                ? /^wss:/.test(t.dealer)
                                    ? n(this._dealer.connect(t.dealer))
                                    : n(Promise.reject(new error_1.DealerError(typedefs_1.DealerErrors.INVALID_ENDPOINT, "Dealer endpoint needs to be wss://")))
                                : n(Promise.reject(new error_1.DealerError(typedefs_1.DealerErrors.ENDPOINT_NOT_DEFINED, 'No "dealer" endpoint defined.')));
                        }),
                        (e.prototype._onTransportAuthenticate = function (e) {
                            var t = e.data;
                            t.awaitPromise(this._dealer.authenticate(t.token));
                        }),
                        (e.prototype._onTransportDisconnect = function () {
                            this._dealer.disconnect();
                        }),
                        (e.prototype.attach = function (e, t) {
                            var n, r;
                            (this._mediator = t),
                                t.addListeners(
                                    (((n = {})[plugin_event_1.PluginEvent.TRANSPORT_CONNECT] = this._onTransportConnect),
                                    (n[plugin_event_1.PluginEvent.TRANSPORT_AUTHENTICATE] = this._onTransportAuthenticate),
                                    (n[plugin_event_1.PluginEvent.TRANSPORT_DISCONNECT] = this._onTransportDisconnect),
                                    n)
                                ),
                                this._dealer.addListeners(
                                    (((r = {})[event_1.DealerEvent.DISCONNECTED] = this._onDealerDisconnected),
                                    (r[event_1.DealerEvent.CONNECTION_ID] = this._onDealerConnectionId),
                                    (r[event_1.DealerEvent.MESSAGE] = this._onDealerMessage),
                                    (r[event_1.DealerEvent.REQUEST] = this._onDealerRequest),
                                    r)
                                );
                        }),
                        (e.prototype.detach = function (e, t) {
                            var n, r;
                            (this._mediator = void 0),
                                t.removeListeners(
                                    (((n = {})[plugin_event_1.PluginEvent.TRANSPORT_CONNECT] = this._onTransportConnect),
                                    (n[plugin_event_1.PluginEvent.TRANSPORT_AUTHENTICATE] = this._onTransportAuthenticate),
                                    (n[plugin_event_1.PluginEvent.TRANSPORT_DISCONNECT] = this._onTransportDisconnect),
                                    n)
                                ),
                                this._dealer.removeListeners(
                                    (((r = {})[event_1.DealerEvent.DISCONNECTED] = this._onDealerDisconnected),
                                    (r[event_1.DealerEvent.CONNECTION_ID] = this._onDealerConnectionId),
                                    (r[event_1.DealerEvent.MESSAGE] = this._onDealerMessage),
                                    (r[event_1.DealerEvent.REQUEST] = this._onDealerRequest),
                                    r)
                                );
                        }),
                        e
                    );
                })();
                function dealerCreator(e, t) {
                    return new DealerPlugin(t);
                }
                exports.dealerCreator = dealerCreator;
            },
            { "../../enums/plugin_event": 148, "./dealer": 164, "./error": 165, "./event": 166, "./typedefs": 168, tslib: 190 },
        ],
        168: [
            function (require, module, exports) {
                "use strict";
                var DealerErrors;
                Object.defineProperty(exports, "__esModule", { value: !0 }),
                    (exports.DealerErrors = void 0),
                    (function (E) {
                        (E.DEALER_CONNECTION_ERROR = "DEALER_CONNECTION_ERROR"),
                            (E.DEALER_AUTHENTICATION_FAILED = "DEALER_AUTHENTICATION_FAILED"),
                            (E.DEALER_ERROR = "DEALER_ERROR"),
                            (E.ENDPOINT_NOT_DEFINED = "ENDPOINT_NOT_DEFINED"),
                            (E.INVALID_ENDPOINT = "INVALID_ENDPOINT");
                    })((DealerErrors = exports.DealerErrors || (exports.DealerErrors = {})));
            },
            {},
        ],
        169: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.ProductStateObserver = void 0);
                var tslib_1 = require("tslib"),
                    emitter_1 = require("@spotify-internal/emitter"),
                    status_code_1 = require("./enums/status_code"),
                    event_1 = require("./enums/event"),
                    DEFAULT_PRODUCT_STATE_ENDPOINT = "@webgate/melody",
                    USER_UPDATE_EVENT_FILTER = /^wss:\/\/event$/,
                    ProductStateObserver = (function (t) {
                        function e(e) {
                            var r = t.call(this) || this;
                            return (
                                (r._currentState = null),
                                (r._connectionId = null),
                                (r._transport = e.transport),
                                (r._endpoint = e.endpoint || DEFAULT_PRODUCT_STATE_ENDPOINT),
                                (r._handleUserUpdate = r._handleUserUpdate.bind(r)),
                                r._init(),
                                r
                            );
                        }
                        return (
                            tslib_1.__extends(e, t),
                            (e.create = function (t) {
                                return new e(t);
                            }),
                            (e.prototype._init = function () {
                                var t = this;
                                this._transport.on(event_1.Event.CONNECTION_ID, function (e) {
                                    t.register(e.data.id).catch(function () {});
                                });
                            }),
                            (e.prototype._handleUserUpdate = function () {
                                var t = this;
                                this._transport.forceTokenRefresh().catch(function () {}),
                                    this.getCurrentState(!0)
                                        .then(function (e) {
                                            t.emit(event_1.Event.PRODUCT_STATE_CHANGED, { productState: e });
                                        })
                                        .catch(function () {});
                            }),
                            (e.prototype._shouldRetry = function (t, e) {
                                var r = t.getStatusFamily();
                                return r === e.SERVER_ERROR || r === e.CONNECTION_ERROR;
                            }),
                            (e.prototype._createSubURL = function (t) {
                                return "@webapi/v1/me/notifications/user?connection_id=" + encodeURIComponent(t);
                            }),
                            (e.prototype.getCurrentState = function (t) {
                                var e = this;
                                return !t && this._currentState
                                    ? Promise.resolve(this._currentState)
                                    : this._transport.request(this._endpoint + "/v1/product_state", { method: "GET", responseType: "json", retry: { condition: this._shouldRetry } }).then(function (t) {
                                          if (t.status !== status_code_1.StatusCode.OK || !t.body) throw ((e._currentState = null), new Error("Cannot get the user's product state."));
                                          return (e._currentState = t.body), t.body;
                                      });
                            }),
                            (e.prototype.register = function (t) {
                                var e = this;
                                return (
                                    t || Promise.reject(new TypeError("ConnectionId cannot be null")),
                                    this._transport.matchMessages(USER_UPDATE_EVENT_FILTER, this._handleUserUpdate),
                                    this._transport.request(this._createSubURL(t), { method: "PUT", ignoreResponseBody: !0, ignoreUnauthorized: !0, retry: { condition: this._shouldRetry } }).then(function (r) {
                                        if (r.status !== status_code_1.StatusCode.OK) {
                                            var n = "Cannot register for product state updates: service responded with status " + r.status;
                                            throw new Error(n);
                                        }
                                        return (e._connectionId = t), !0;
                                    })
                                );
                            }),
                            (e.prototype.deregister = function () {
                                var t = this,
                                    e = this._connectionId;
                                return e
                                    ? (this._transport.unmatchMessages(USER_UPDATE_EVENT_FILTER, this._handleUserUpdate),
                                      this._transport.request(this._createSubURL(e), { method: "DELETE", ignoreResponseBody: !0, ignoreUnauthorized: !0, retry: { condition: this._shouldRetry } }).then(function (e) {
                                          return e.status === status_code_1.StatusCode.OK && ((t._connectionId = null), !0);
                                      }))
                                    : Promise.resolve(!1);
                            }),
                            e
                        );
                    })(emitter_1.EventEmitter);
                exports.ProductStateObserver = ProductStateObserver;
            },
            { "./enums/event": 145, "./enums/status_code": 149, "@spotify-internal/emitter": 71, tslib: 190 },
        ],
        170: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.createProvider = void 0);
                var errors_1 = require("../../enums/errors"),
                    xresolve_1 = require("../../error/xresolve"),
                    RESOLVER_URL = "https://apresolve.spotify.com/",
                    WellKnownMapping = { DEALER: "dealer", WEBGATE: "spclient" },
                    WEB_API = "https://api.spotify.com/";
                function createProvider(e) {
                    void 0 === e && (e = {});
                    var r = e.dealer || WellKnownMapping.DEALER,
                        t = e.webgate || WellKnownMapping.WEBGATE,
                        o = RESOLVER_URL + "?type=" + r + "&type=" + t;
                    return function (e) {
                        return e
                            .request(o, {
                                forcePolyfill: !0,
                                responseType: "json",
                                retry: {
                                    maxRetries: 5,
                                    condition: function (e, r) {
                                        return e.getStatusFamily() !== r.SUCCESS;
                                    },
                                },
                                metadata: { noRequestTransform: !0 },
                            })
                            .then(function (e) {
                                if (200 !== e.status) throw new xresolve_1.XResolveError(errors_1.TransportErrors.XRESOLVE_REQUEST_FAILED_WITH_STATUS, "X-Resolve responded with status" + e.status, e.status);
                                var o = e.body;
                                if (!o) throw new xresolve_1.XResolveError(errors_1.TransportErrors.XRESOLVE_INVALID_RESPONSE, "X-Resolve responded with empty/invalid body.", e.status);
                                var s = { dealer: o[r] && o[r][0], webgate: o[t] && o[t][0], webapi: WEB_API };
                                if (!s.dealer || !s.webgate) throw new xresolve_1.XResolveError(errors_1.TransportErrors.XRESOLVE_INCOMPLETE_RESPONSE, "X-Resolve responded with incomplete results.", e.status);
                                return s;
                            })
                            .then(function (e) {
                                return (e.dealer = "wss://" + e.dealer.replace(/:443$/, "")), (e.webgate = "https://" + e.webgate.replace(/:443$/, "")), e;
                            });
                    };
                }
                exports.createProvider = createProvider;
            },
            { "../../enums/errors": 144, "../../error/xresolve": 154 },
        ],
        171: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.ServerTime = void 0);
                var debug_tools_1 = require("@js-sdk/debug-tools"),
                    status_code_1 = require("./enums/status_code"),
                    REFRESH_THRESHOLD = 18e4,
                    ENDPOINT = "@webgate/melody/v1/time",
                    debugLogger = debug_tools_1.logging.forTag("transport.server_time"),
                    ServerTime = (function () {
                        function e(e) {
                            (this._serverTime = 0), (this._serverTimeFetchedAt = 0), (this._transport = e);
                        }
                        return (
                            (e.create = function (t) {
                                return new e(t);
                            }),
                            (e.prototype._parseServiceResponse = function (e, t) {
                                var r = Date.now(),
                                    s = t.status;
                                return (
                                    s === status_code_1.StatusCode.OK
                                        ? (this._serverTime = parseInt(t.body.timestamp, 10) + Math.round((r - e) / 2))
                                        : (debugLogger.error("Cannot fetch server time. Service responded with " + s), (this._serverTime = r)),
                                    (this._serverTimeFetchedAt = r),
                                    this._serverTime
                                );
                            }),
                            (e.prototype.get = function () {
                                var e = Date.now();
                                return this._transport.request(ENDPOINT, { responseType: "json" }).then(this._parseServiceResponse.bind(this, e));
                            }),
                            (e.prototype.getApproximate = function () {
                                if (!this._serverTime) return this.get(), Date.now();
                                var e = Date.now() - this._serverTimeFetchedAt;
                                return e > REFRESH_THRESHOLD && this.get(), this._serverTime + e;
                            }),
                            e
                        );
                    })();
                exports.ServerTime = ServerTime;
            },
            { "./enums/status_code": 149, "@js-sdk/debug-tools": 11 },
        ],
        172: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.Transport = void 0);
                var tslib_1 = require("tslib"),
                    backoff_1 = require("@js-sdk/backoff"),
                    counter_1 = require("@js-sdk/backoff/es5/counter"),
                    debug_tools_1 = require("@js-sdk/debug-tools"),
                    emitter_1 = require("@spotify-internal/emitter"),
                    errors_1 = require("./enums/errors"),
                    event_1 = require("./enums/event"),
                    plugin_event_1 = require("./enums/plugin_event"),
                    internal_socket_code_1 = require("./enums/internal_socket_code"),
                    status_code_1 = require("./enums/status_code"),
                    status_family_1 = require("./enums/status_family"),
                    transport_1 = require("./error/transport"),
                    connection_observer_1 = require("./_internal/connection_observer"),
                    response_1 = require("./http/response"),
                    request_1 = require("./http/request"),
                    public_transport_1 = require("./_internal/public_transport"),
                    debugLogger = debug_tools_1.logging.forTag("transport.transport"),
                    HTTP_SPECIAL_URL_EXP = /^(?:https?:\/\/)?@([^\/]+)\//,
                    ENDPOINT_REQUIRES_SLASH_EXP = /^(ws|http)s?:\/\/.*[^\/]$/,
                    HTTP_DATE_EXP = /^([a-zA-Z]{3},\ \d{1,2}\ [a-zA-Z]{3}\ (\d{1,2}.){3})/,
                    RECONNECT_THRESHOLD = 5e3,
                    DEFAULT_RETRY_COUNT = 2,
                    LOGOUT_MESSAGE_URI = "client:logout",
                    DEFAULT_TOKEN_TIMEOUT = 3540,
                    SupportedRequestModes = { xhr: !0, fetch: !0 },
                    StateFlag = { CONNECTED: 1, AUTHENTICATED: 4 };
                function hasPluginSocketAPI(e) {
                    return "getConnectionInfo" in e.api;
                }
                function appendAccessTokenQuery(e, t) {
                    var n = "access_token=" + encodeURIComponent(t),
                        r = e.split("?"),
                        o = r[0],
                        i = r[1];
                    if (!i) return o + "?" + n;
                    var s = i.replace(/access_token=[^&]*(&|$)/, n + "$1");
                    return s !== i ? o + "?" + s : o + "?" + n + "&" + i;
                }
                var Transport = (function (e) {
                    function t(t) {
                        var n = e.call(this) || this;
                        if (
                            ((n._plugins = {}),
                            (n._pluginMediator = new emitter_1.EventEmitter()),
                            (n._connectCalled = !1),
                            (n._authenticateCalled = !1),
                            (n._endpoints = null),
                            (n._lastToken = null),
                            (n._lastTokenExpiry = 0),
                            (n._refreshTokenPromise = null),
                            (n._authenticationPromise = null),
                            (n._reconnectTimeout = 0),
                            (n._isReconnecting = !1),
                            (n._initTime = 0),
                            (n._lastDisconnect = 0),
                            (n._stateMask = 0),
                            (n._quickDisconnectCount = 0),
                            (n._counter = new counter_1.Counter({ curve: "exponential", baseTime: 5e3, ceiling: 15e3 })),
                            (n._stateAwareListeners = { connected: [], authenticated: [], connection_id: [], transport_connect: [], transport_authenticate: [] }),
                            (n._stateAwareRunners = { connected: null, authenticated: null, connection_id: null, transport_connect: null, transport_authenticate: null }),
                            !t)
                        )
                            throw new TypeError("Argument `options` for Transport cannot be null.");
                        if (!t.providers) throw new TypeError("Argument `options.providers` for Transport cannot be null.");
                        return (
                            (n._ownerRef = "ownerRef" in t ? Object(t.ownerRef) : {}),
                            (n._tokenProvider = t.providers.token),
                            (n._endpointsProvider = t.providers.endpoints),
                            (n._XHR = t.XHR),
                            (n._Fetch = t.Fetch),
                            (n._reconnectionRetries = t.reconnectionRetries >= 0 ? t.reconnectionRetries : 3),
                            (n._requestMode = t.requestMode in SupportedRequestModes ? t.requestMode : "xhr"),
                            (n._forcePolyfillTypes = t.forcePolyfillTypes || {}),
                            (n._disableAutoLogout = "disableAutoLogout" in t && !!t.disableAutoLogout),
                            (n._disconnectBeforeUnload = t.disconnectBeforeUnload || !1),
                            (n._connectionObserver = new connection_observer_1.ConnectionObserver({ notifyBeforeUnload: n._disconnectBeforeUnload })),
                            (n.authenticate = n.authenticate.bind(n)),
                            (n._authenticateWithToken = n._authenticateWithToken.bind(n)),
                            (n._connectToEndpoints = n._connectToEndpoints.bind(n)),
                            (n._parseProvidedToken = n._parseProvidedToken.bind(n)),
                            (n._onConnected = n._onConnected.bind(n)),
                            (n._onAuthenticated = n._onAuthenticated.bind(n)),
                            (n._onAuthenticationFailed = n._onAuthenticationFailed.bind(n)),
                            n._init(),
                            n
                        );
                    }
                    return (
                        tslib_1.__extends(t, e),
                        (t.create = function (e) {
                            return new t(e);
                        }),
                        (t.prototype._init = function () {
                            var e,
                                t = this;
                            this.onAddListener(event_1.Event.CONNECTED, this._onAddListener.bind(this, "connected")),
                                this.onAddListener(event_1.Event.AUTHENTICATED, this._onAddListener.bind(this, "authenticated")),
                                this.onAddListener(event_1.Event.CONNECTION_ID, this._onAddListener.bind(this, "connection_id")),
                                this.onRemoveListener(event_1.Event.CONNECTED, this._onRemoveListener.bind(this, "connected")),
                                this.onRemoveListener(event_1.Event.AUTHENTICATED, this._onRemoveListener.bind(this, "authenticated")),
                                this.onRemoveListener(event_1.Event.CONNECTION_ID, this._onRemoveListener.bind(this, "connection_id")),
                                this._pluginMediator.onAddListener(plugin_event_1.PluginEvent.TRANSPORT_CONNECT, this._onAddListener.bind(this, "transport_connect")),
                                this._pluginMediator.onAddListener(plugin_event_1.PluginEvent.TRANSPORT_AUTHENTICATE, this._onAddListener.bind(this, "transport_authenticate")),
                                this._pluginMediator.onRemoveListener(plugin_event_1.PluginEvent.TRANSPORT_CONNECT, this._onRemoveListener.bind(this, "transport_connect")),
                                this._pluginMediator.onRemoveListener(plugin_event_1.PluginEvent.TRANSPORT_AUTHENTICATE, this._onRemoveListener.bind(this, "transport_authenticate")),
                                "fetch" !== this._requestMode || (this._Fetch && this._Fetch.isSupported()) || (debugLogger.warn('Default "fetch" request mode unavailable; Fallback to "xhr"'), (this._requestMode = "xhr"));
                            var n = this._pluginMediator;
                            n.addListeners((((e = {})[plugin_event_1.PluginEvent.PLUGIN_DISCONNECTED] = this._onPluginDisconnected.bind(this)), e)),
                                this.proxyEmit(n, plugin_event_1.PluginEvent.PLUGIN_CONNECTION_INFO, event_1.Event.CONNECTION_ID),
                                this._disableAutoLogout ||
                                    this.matchMessages(LOGOUT_MESSAGE_URI, function () {
                                        return t._onLogout();
                                    }),
                                this._connectionObserver.on(event_1.Event.CONNECTION_ONLINE, function () {
                                    return t._onOnline();
                                }),
                                this._connectionObserver.on(event_1.Event.CONNECTION_OFFLINE, function () {
                                    return t._onOffline();
                                }),
                                this._connectionObserver.on(event_1.Event.WINDOW_BEFORE_UNLOAD, function () {
                                    return t.disconnect();
                                });
                        }),
                        (t.prototype._runStateAwareQueues = function (e, t) {
                            for (var n = 0, r = this._stateAwareListeners[e].splice(0); n < r.length; n++) {
                                r[n].call(this, t);
                            }
                            this._stateAwareRunners[e] = null;
                        }),
                        (t.prototype._connect = function () {
                            var e = this;
                            return this._stateMask & StateFlag.CONNECTED
                                ? Promise.resolve(!1)
                                : this._connectionObserver.isOnline()
                                ? this._performConnect()
                                : new Promise(function (t, n) {
                                      e._connectionObserver.once(event_1.Event.CONNECTION_ONLINE, function () {
                                          e._performConnect().then(t, n);
                                      });
                                  });
                        }),
                        (t.prototype._performConnect = function () {
                            var e = this;
                            return new Promise(function (t) {
                                t(e._endpointsProvider(e.toPublic()));
                            })
                                .catch(function (e) {
                                    return !e || e.code ? Promise.reject(e) : Promise.reject(new transport_1.TransportError(errors_1.TransportErrors.TRANSPORT_ENDPOINTS_PROVIDER_ERROR, e.message || "Endpoints provider error", e));
                                })
                                .then(this._connectToEndpoints)
                                .then(this._onConnected)
                                .catch(function (t) {
                                    var n = t && t.error ? t.error : t;
                                    return e.emit(event_1.Event.CONNECTION_FAILED, { error: n }), Promise.reject(n);
                                });
                        }),
                        (t.prototype._connectToEndpoints = function (e) {
                            var t = this,
                                n = { webgate: "", webapi: "" };
                            for (var r in e)
                                if (e.hasOwnProperty(r) && e[r]) {
                                    var o = e[r];
                                    ENDPOINT_REQUIRES_SLASH_EXP.test(o) && (o += "/"), (n[r] = o);
                                }
                            (this._endpoints = n), this.emit(event_1.Event.ENDPOINTS_RESOLVED, { endpoints: tslib_1.__assign({}, n) });
                            var i = [],
                                s = function (e) {
                                    i.push(e);
                                };
                            return new Promise(function (e, r) {
                                t._pluginMediator.emitAndWait(plugin_event_1.PluginEvent.TRANSPORT_CONNECT, { endpoints: tslib_1.__assign({}, n), awaitPromise: s }, function () {
                                    Promise.all(i).then(function () {
                                        return e(!0);
                                    }, r);
                                });
                            });
                        }),
                        (t.prototype._refreshToken = function (e) {
                            var t = this;
                            if ((void 0 === e && (e = !1), this._refreshTokenPromise)) return this._refreshTokenPromise;
                            if (!e && this._lastToken && this._lastTokenExpiry > Date.now()) return Promise.resolve(this._lastToken);
                            this._refreshTokenPromise = new Promise(function (e) {
                                e(t._tokenProvider());
                            }).then(this._parseProvidedToken);
                            var n = function () {
                                t._refreshTokenPromise = null;
                            };
                            return (
                                this._refreshTokenPromise.then(n, n),
                                this._refreshTokenPromise.catch(function (e) {
                                    var n = (null == e ? void 0 : e.code) ? e : new transport_1.TransportError(errors_1.TransportErrors.TRANSPORT_TOKEN_PROVIDER_ERROR, (null == e ? void 0 : e.message) || "Token provider error", e);
                                    return t.emit(event_1.Event.TOKEN_PROVIDER_ERROR, { error: n }), Promise.reject(n);
                                })
                            );
                        }),
                        (t.prototype._parseProvidedToken = function (e) {
                            var t, n;
                            if ((Array.isArray(e) ? ((t = e[0]), (n = parseInt(e[1], 10)), isNaN(n) && (n = DEFAULT_TOKEN_TIMEOUT)) : ((t = e), (n = DEFAULT_TOKEN_TIMEOUT)), !t))
                                throw (
                                    ((this._lastToken = null),
                                    (this._lastTokenExpiry = 0),
                                    debugLogger.error("No token was provided"),
                                    new transport_1.TransportError(errors_1.TransportErrors.TRANSPORT_INVALID_TOKEN, 'Token provider returned an invalid token, "' + t + '"'))
                                );
                            if (this._lastToken === t) {
                                debugLogger.error("TokenProvider returned same token twice.");
                                var r = new transport_1.TransportError(errors_1.TransportErrors.TRANSPORT_STALE_TOKEN, "Token provider returned the same token twice.");
                                throw ((this._lastToken = null), (this._lastTokenExpiry = 0), r);
                            }
                            return (this._lastToken = t), (this._lastTokenExpiry = Date.now() + 1e3 * n), this.emit(event_1.Event.ACCESS_TOKEN, { token: t }), t;
                        }),
                        (t.prototype._authenticateWithToken = function (e) {
                            var t = this;
                            if (!this._endpoints) return Promise.resolve(!0);
                            var n = [],
                                r = function (e) {
                                    n.push(e);
                                };
                            return new Promise(function (o, i) {
                                t._pluginMediator.emitAndWait(plugin_event_1.PluginEvent.TRANSPORT_AUTHENTICATE, { token: e, awaitPromise: r }, function () {
                                    Promise.all(n).then(function () {
                                        return o(!0);
                                    }, i);
                                });
                            });
                        }),
                        (t.prototype._authenticate = function (e) {
                            var t = this;
                            return this._stateMask & StateFlag.CONNECTED
                                ? this._authenticationPromise
                                    ? this._authenticationPromise
                                    : ((this._authenticationPromise = backoff_1.Backoff.init(
                                          function () {
                                              return t._refreshToken(e).then(t._authenticateWithToken);
                                          },
                                          { curve: "exponential", maxRetries: 2, baseTime: 500 }
                                      )
                                          .then(this._onAuthenticated)
                                          .catch(this._onAuthenticationFailed)),
                                      this._authenticationPromise)
                                : Promise.reject(new transport_1.TransportError(errors_1.TransportErrors.TRANSPORT_INVALID_STATE, "Cannot authenticate disconnected transport."));
                        }),
                        (t.prototype._disconnect = function (e) {
                            return void 0 === e && (e = !1), (this._stateMask = 0), e || this.emit(event_1.Event.DISCONNECTED, null), this._pluginMediator.emitSync(plugin_event_1.PluginEvent.TRANSPORT_DISCONNECT, { supressed: e }), !0;
                        }),
                        (t.prototype._createReconnector = function () {
                            var e = this,
                                t = !1;
                            return function () {
                                return (
                                    (e._isReconnecting = !0),
                                    e.emit(event_1.Event.RECONNECTING, null),
                                    e._disconnect(!0),
                                    e
                                        ._connect()
                                        .then(function () {
                                            return (
                                                !!e._authenticateCalled &&
                                                e._authenticate(t).then(
                                                    function (e) {
                                                        return (t = !1), e;
                                                    },
                                                    function (e) {
                                                        return (t = !0), Promise.reject(e);
                                                    }
                                                )
                                            );
                                        })
                                        .then(function () {
                                            return (e._isReconnecting = !1), e.emit(event_1.Event.RECONNECTED, null), !0;
                                        })
                                );
                            };
                        }),
                        (t.prototype._tryToReconnect = function () {
                            var e = this;
                            this._isReconnecting ||
                                ((this._stateMask = 0),
                                backoff_1.Backoff.init(this._createReconnector(), { baseTime: 1e3, maxTime: 15e3, maxRetries: this._reconnectionRetries }).catch(function () {
                                    (e._stateMask = 0), (e._isReconnecting = !1), e.emit(event_1.Event.DISCONNECTED, null);
                                }));
                        }),
                        (t.prototype._sendRequest = function (e, t, n) {
                            var r = this;
                            return (
                                void 0 === t && (t = {}),
                                void 0 === n && (n = {}),
                                this._processRequestArgs(e, t).then(function (e) {
                                    return e.options.forget ? r._sendFireAndForgetRequest(e) : r._sendRetriedRequest(e, n);
                                })
                            );
                        }),
                        (t.prototype._processRequestArgs = function (e, t) {
                            var n;
                            void 0 === t && (t = {});
                            var r = e,
                                o = !1,
                                i = tslib_1.__assign(tslib_1.__assign({}, t), {
                                    forcePolyfill: !!(t.responseType && t.responseType in this._forcePolyfillTypes),
                                    requestMode: null !== (n = null == t ? void 0 : t.requestMode) && void 0 !== n ? n : this._requestMode,
                                    connectionObserver: this._connectionObserver,
                                    metadata: (null == t ? void 0 : t.metadata) || null,
                                });
                            if (HTTP_SPECIAL_URL_EXP.test(r)) {
                                o = !0;
                                try {
                                    r = this._tryExpandSpecialURL(r);
                                } catch (e) {
                                    return Promise.reject(e);
                                }
                                "authorize" in i || ((i.authorize = !0), (i.autoAuthorized = !0));
                            }
                            var s = tslib_1.__assign({ maxRetries: DEFAULT_RETRY_COUNT, curve: "exponential" }, t.retry);
                            return Promise.resolve(request_1.HTTPRequest.create(r, { method: t.method, headers: t.headers, payload: t.payload, options: i, urlExpanded: o, retryOptions: s }));
                        }),
                        (t.prototype._tryExpandSpecialURL = function (e) {
                            var t = this._endpoints;
                            return e.replace(HTTP_SPECIAL_URL_EXP, function (e, n) {
                                if (!t.hasOwnProperty(n)) throw new TypeError("Cannot replace endpoint @" + n + ": endpoint not defined.");
                                return t[n];
                            });
                        }),
                        (t.prototype._sendFireAndForgetRequest = function (e) {
                            var t = e.url,
                                n = e.method,
                                r = e.options;
                            return "GET" !== n && "POST" !== n
                                ? Promise.reject(new transport_1.TransportError(errors_1.TransportErrors.TRANSPORT_UNSUPPORTED_OPTION, "Option 'forget' cannot be used for " + n + " request."))
                                : !r.autoAuthorized && r.authorize
                                ? Promise.reject(new transport_1.TransportError(errors_1.TransportErrors.TRANSPORT_UNSUPPORTED_OPTION, "Option 'forget' cannot be used for authorized request."))
                                : ((r.requestMode = "xhr"),
                                  (r.authorize = !1),
                                  (r.ignoreResponseBody = !0),
                                  "GET" === n
                                      ? "function" == typeof fetch
                                          ? fetch(t, { mode: "no-cors" }).catch(function () {})
                                          : "function" == typeof Image
                                          ? (new Image().src = t)
                                          : this._sendRetriedRequest(e, {}).catch(function () {})
                                      : "POST" === n &&
                                        ("undefined" != typeof navigator && (null === navigator || void 0 === navigator ? void 0 : navigator.sendBeacon)
                                            ? navigator.sendBeacon(e.url, e.payload)
                                            : "function" == typeof fetch
                                            ? fetch(t, { method: "POST", mode: "no-cors", body: e.payload }).catch(function () {})
                                            : this._sendRetriedRequest(e, {}).catch(function () {})),
                                  Promise.resolve(new response_1.HTTPResponse(t, 0)));
                        }),
                        (t.prototype._sendRetriedRequest = function (e, t) {
                            var n = this,
                                r = e.retryOptions,
                                o = !1,
                                i = function () {
                                    return n._setAuthHeader(e, o);
                                },
                                s = this._connectionObserver;
                            return backoff_1.Backoff.init(function () {
                                return (s.isOnline()
                                    ? i()
                                    : new Promise(function (t, n) {
                                          e.options.allowOffline
                                              ? i().then(t, n)
                                              : s.once(event_1.Event.CONNECTION_ONLINE, function () {
                                                    i().then(t, n);
                                                });
                                      })
                                )
                                    .then(function () {
                                        var r;
                                        if ((n._pluginMediator.emitSync(plugin_event_1.PluginEvent.TRANSPORT_BEFORE_SEND_REQUEST, { request: e, context: t }), "fetch" === e.options.requestMode && n._Fetch && n._Fetch.isSupported()))
                                            r = n._Fetch.request(e);
                                        else {
                                            if (!n._XHR) throw new Error("No available request mechanisms.");
                                            r = n._XHR.request(e);
                                        }
                                        return r;
                                    })
                                    .then(function (t) {
                                        var n = null;
                                        if ((t.headers && (n = t.headers.get("Retry-After")), t.status === status_code_1.StatusCode.UNAUTHORIZED && !e.options.ignoreUnauthorized)) return (o = !0), Promise.reject(t);
                                        if ("function" == typeof (null == r ? void 0 : r.condition) && (r.condition(t, status_family_1.StatusFamily) || n)) {
                                            if (null !== n) {
                                                var i = parseInt(n, 10);
                                                HTTP_DATE_EXP.test(n) ? (t.retryAfter = new Date(n).getTime() - Date.now()) : i > 0 && (t.retryAfter = 1e3 * i);
                                            }
                                            return Promise.reject(t);
                                        }
                                        return Promise.resolve(t);
                                    });
                            }, r)
                                .catch(this._handleRetriedRequestError)
                                .then(function (r) {
                                    return (
                                        (r.metadata = e.options.metadata),
                                        n._pluginMediator.emitSync(plugin_event_1.PluginEvent.TRANSPORT_BEFORE_RETURN_RESPONSE, { context: t, response: r }),
                                        e.options.rejectNotOk && !r.ok ? Promise.reject(r) : r
                                    );
                                });
                        }),
                        (t.prototype._setAuthHeader = function (e, t) {
                            var n = this;
                            if (!e.options.authorize) return Promise.resolve(e);
                            var r = function () {
                                return n._refreshToken(t).then(function (t) {
                                    return e.headers.set("Authorization", "Bearer " + t), e;
                                });
                            };
                            return this._stateMask & StateFlag.AUTHENTICATED
                                ? r()
                                : new Promise(function (e, t) {
                                      debugLogger.info("Auth header setting awaiting authentication."),
                                          n.once(event_1.Event.AUTHENTICATED, function () {
                                              debugLogger.info("Auth header set after authentication."), r().then(e, t);
                                          });
                                  });
                        }),
                        (t.prototype._handleRetriedRequestError = function (e) {
                            return e instanceof response_1.HTTPResponse ? Promise.resolve(e) : Promise.reject(e);
                        }),
                        (t.prototype._onAddListener = function (e, t) {
                            var n = this,
                                r = t.data.options;
                            if (!r.ignoreCurrentState) {
                                var o;
                                switch (e) {
                                    case "connected":
                                        if (!this.isConnected()) return;
                                        o = Promise.resolve(this.createEvent(event_1.Event.CONNECTED, null));
                                        break;
                                    case "authenticated":
                                        if (!this.isAuthenticated()) return;
                                        o = Promise.resolve(this.createEvent(event_1.Event.AUTHENTICATED, null));
                                        break;
                                    case "connection_id":
                                        var i = this.getPluginAPI("dealer");
                                        if (!i || !i.hasConnectionInfo()) return;
                                        o = i.getConnectionInfo().then(function (e) {
                                            return n.createEvent(event_1.Event.CONNECTION_ID, e);
                                        });
                                        break;
                                    case "transport_connect":
                                        if (!this.isConnected() || !this._endpoints) return;
                                        o = Promise.resolve(this._pluginMediator.createEvent(plugin_event_1.PluginEvent.TRANSPORT_CONNECT, { endpoints: tslib_1.__assign({}, this._endpoints), awaitPromise: function (e) {} }));
                                        break;
                                    case "transport_authenticate":
                                        if (!this.isAuthenticated()) return;
                                        o = this._refreshToken().then(function (e) {
                                            return n._pluginMediator.createEvent(plugin_event_1.PluginEvent.TRANSPORT_AUTHENTICATE, { token: e, awaitPromise: function (e) {} });
                                        });
                                        break;
                                    default:
                                        return;
                                }
                                var s = t.data.listener;
                                this._stateAwareListeners[e].push(s);
                                var a = this._stateAwareRunners;
                                a[e] || ((a[e] = o.then(this._runStateAwareQueues.bind(this, e))), r.once && t.preventDefault());
                            }
                        }),
                        (t.prototype._onRemoveListener = function (e, t) {
                            var n = t.data.options;
                            if (!n.ignoreCurrentState && !n.once) {
                                var r = t.data.listener,
                                    o = this._stateAwareListeners[e].indexOf(r);
                                -1 !== o && this._stateAwareListeners[e].splice(o, 1);
                            }
                        }),
                        (t.prototype._getQuickDisconnectTimeout = function () {
                            return this._counter.getTime(this._quickDisconnectCount);
                        }),
                        (t.prototype._onPluginDisconnected = function (e) {
                            var t = Date.now(),
                                n = t - this._lastDisconnect;
                            this._disconnect(!0),
                                e.data.code !== internal_socket_code_1.InternalSocketCode.CLOSE
                                    ? this._connectionObserver.isOnline() &&
                                      (n < RECONNECT_THRESHOLD
                                          ? (this._reconnectTimeout && clearTimeout(this._reconnectTimeout),
                                            this._quickDisconnectCount++,
                                            this.emit(event_1.Event.SHORT_SESSION_DISCONNECTED, { disconnectCount: this._quickDisconnectCount, sessionLength: n }),
                                            (this._reconnectTimeout = setTimeout(this._tryToReconnect.bind(this), this._getQuickDisconnectTimeout())))
                                          : ((this._quickDisconnectCount = 0), (this._lastDisconnect = t), this._tryToReconnect()))
                                    : (this._quickDisconnectCount = 0);
                        }),
                        (t.prototype._onOnline = function () {
                            this.emit(event_1.Event.CONNECTION_ONLINE, null), this._connectCalled && this._tryToReconnect();
                        }),
                        (t.prototype._onOffline = function () {
                            this.emit(event_1.Event.CONNECTION_OFFLINE, null), this._disconnect(!0);
                        }),
                        (t.prototype._onConnected = function () {
                            return (this._stateMask |= StateFlag.CONNECTED), this.emit(event_1.Event.CONNECTED, null), Promise.resolve(!0);
                        }),
                        (t.prototype._onAuthenticated = function () {
                            return (
                                clearTimeout(this._reconnectTimeout),
                                (this._authenticationPromise = null),
                                (this._stateMask |= StateFlag.AUTHENTICATED),
                                (this._initTime = Date.now()),
                                this.emit(event_1.Event.AUTHENTICATED, null),
                                Promise.resolve(!0)
                            );
                        }),
                        (t.prototype._onAuthenticationFailed = function (e) {
                            var t = e && e.error ? e.error : e;
                            return (this._authenticationPromise = null), (this._stateMask &= ~StateFlag.AUTHENTICATED), this.emit(event_1.Event.AUTHENTICATION_FAILED, { error: t }), Promise.reject(t);
                        }),
                        (t.prototype._onLogout = function () {
                            var e = this,
                                t = function () {
                                    (e._lastToken = null), (e._lastTokenExpiry = 0), e.emit(event_1.Event.LOGGED_OUT, null);
                                };
                            this.disconnect().then(t, t);
                        }),
                        (t.prototype.isConnected = function () {
                            return !!(this._stateMask & StateFlag.CONNECTED);
                        }),
                        (t.prototype.isAuthenticated = function () {
                            return !!(this._stateMask & StateFlag.AUTHENTICATED);
                        }),
                        (t.prototype.isReconnecting = function () {
                            return this._isReconnecting;
                        }),
                        (t.prototype.isOnline = function () {
                            return this._connectionObserver.isOnline();
                        }),
                        (t.prototype.connect = function () {
                            return (this._connectCalled = !0), this._connect();
                        }),
                        (t.prototype.authenticate = function () {
                            return (this._authenticateCalled = !0), this._authenticate(!0);
                        }),
                        (t.prototype.disconnect = function () {
                            var e = this;
                            if (!this._connectCalled) return Promise.resolve(!1);
                            (this._connectCalled = !1), (this._authenticateCalled = !1);
                            var t = this.isConnected() ? event_1.Event.BEFORE_ONLINE_DISCONNECT : event_1.Event.BEFORE_OFFLINE_DISCONNECT,
                                n = [];
                            return (
                                this.emitSync(t, {
                                    awaitPromise: function (e) {
                                        n.push(e.catch(function () {}));
                                    },
                                }),
                                Promise.all(n).then(function () {
                                    return e._disconnect(!1);
                                })
                            );
                        }),
                        (t.prototype.forceDisconnect = function () {
                            return this._connectCalled ? ((this._connectCalled = !1), (this._authenticateCalled = !1), this._disconnect(), Promise.resolve(!0)) : Promise.resolve(!1);
                        }),
                        (t.prototype.forceTokenRefresh = function () {
                            return this._refreshToken(!0).then(function () {
                                return !0;
                            });
                        }),
                        (t.prototype.getInitTime = function () {
                            return this._initTime;
                        }),
                        (t.prototype.getEndpoints = function () {
                            return this._endpoints ? tslib_1.__assign({}, this._endpoints) : null;
                        }),
                        (t.prototype.getLastToken = function () {
                            return this._lastToken;
                        }),
                        (t.prototype.toPublic = function (e) {
                            return new public_transport_1.PublicTransport(this, e);
                        }),
                        (t.prototype.hasOwnerRef = function (e) {
                            return this._ownerRef === e;
                        }),
                        (t.prototype.appendTokenQuery = function (e) {
                            return this._refreshToken().then(function (t) {
                                return appendAccessTokenQuery(e, t);
                            });
                        }),
                        (t.prototype.appendLastTokenQuery = function (e) {
                            return this._lastToken ? appendAccessTokenQuery(e, this._lastToken) : e;
                        }),
                        (t.prototype.matchMessages = function (e, t, n) {
                            if (!e) throw new TypeError('Message "matcher" cannot be null.');
                            if ("function" != typeof t) throw new TypeError("Message callback cannot be null.");
                            var r = function (r) {
                                var o = r.data.message;
                                !o.uri || !o.uri.match(e) || (n && n !== r.data.plugin) || t(o);
                            };
                            (r.__matchMessagesExp = e), (r.__matchMessagesPlugin = n), (t.__matchMessagesWrapper = r), this._pluginMediator.on(plugin_event_1.PluginEvent.PLUGIN_MESSAGE, r);
                        }),
                        (t.prototype.unmatchMessages = function (e, t, n) {
                            if ("function" != typeof t) throw new TypeError("Message callback cannot be null.");
                            var r = t.__matchMessagesWrapper;
                            return !(!r || r.__matchMessagesExp !== e || r.__matchMessagesPlugin !== n) && (this._pluginMediator.removeListener(plugin_event_1.PluginEvent.PLUGIN_MESSAGE, r), !0);
                        }),
                        (t.prototype.handlePushRequests = function (e, t, n) {
                            if (!e) throw new TypeError('Push request "matcher" cannot be null.');
                            if ("function" != typeof t) throw new TypeError("Push request callback cannot be null.");
                            var r = function (r) {
                                var o = r.data.request;
                                !o.message_ident || !o.message_ident.match(e) || (n && n !== r.data.plugin) || Promise.resolve(t(o)).then(r.data.reply);
                            };
                            (r.__matchRequestExp = e), (r.__matchRequestPlugin = n), (t.__matchRequestWrapper = r), this._pluginMediator.on(plugin_event_1.PluginEvent.PLUGIN_REQUEST, r);
                        }),
                        (t.prototype.unhandlePushRequests = function (e, t, n) {
                            if ("function" != typeof t) throw new TypeError("Push request callback cannot be null.");
                            var r = t.__matchRequestWrapper;
                            return !(!r || r.__matchRequestExp !== e || r.__matchRequestPlugin !== n) && (this._pluginMediator.removeListener(plugin_event_1.PluginEvent.PLUGIN_REQUEST, r), !0);
                        }),
                        (t.prototype.request = function (e, t) {
                            var n,
                                r = this,
                                o = { uri: e, options: t, context: {} };
                            this._pluginMediator.emitSync(plugin_event_1.PluginEvent.TRANSPORT_BEFORE_PROCESS_REQUEST, o);
                            var i = this._sendRequest.bind(this, o.uri, o.options, o.context);
                            return (!(null === (n = o.options) || void 0 === n ? void 0 : n.allowOffline) && !this._connectionObserver.isOnline()) || (HTTP_SPECIAL_URL_EXP.test(o.uri) && !(this._stateMask & StateFlag.CONNECTED))
                                ? new Promise(function (e, t) {
                                      r.once(event_1.Event.CONNECTED, function () {
                                          i().then(e, t);
                                      });
                                  })
                                : i();
                        }),
                        (t.prototype.addPlugin = function (e, t) {
                            var n = e(this, t),
                                r = n.name;
                            if (this._plugins[r]) throw new TypeError("Plugin is already added.");
                            return n.attach(this, this._pluginMediator), (this._plugins[r] = n), r;
                        }),
                        (t.prototype.removePlugin = function (e) {
                            var t = this._plugins[e];
                            return !!t && (t.detach(this, this._pluginMediator), (this._plugins[e] = void 0), !0);
                        }),
                        (t.prototype.hasPlugin = function (e) {
                            return !!this._plugins[e];
                        }),
                        (t.prototype.getPluginAPI = function (e) {
                            var t = this._plugins[e];
                            return t && t.api ? t.api : null;
                        }),
                        (t.prototype.getConnectionId = function (e) {
                            void 0 === e && (e = "dealer");
                            var t = this._plugins[e];
                            return t
                                ? t.api && hasPluginSocketAPI(t)
                                    ? t.api.getConnectionInfo().then(function (e) {
                                          return e.id;
                                      })
                                    : Promise.reject(new TypeError("Plugin " + t + " is not a socket plugin."))
                                : Promise.reject(new TypeError("Cannot retrieve connection id for plugin " + t + "."));
                        }),
                        (t.prototype.removeAllListeners = function () {
                            return this;
                        }),
                        t
                    );
                })(emitter_1.EventEmitter);
                exports.Transport = Transport;
            },
            {
                "./_internal/connection_observer": 140,
                "./_internal/public_transport": 142,
                "./enums/errors": 144,
                "./enums/event": 145,
                "./enums/internal_socket_code": 146,
                "./enums/plugin_event": 148,
                "./enums/status_code": 149,
                "./enums/status_family": 150,
                "./error/transport": 153,
                "./http/request": 157,
                "./http/response": 159,
                "@js-sdk/backoff": 4,
                "@js-sdk/backoff/es5/counter": 3,
                "@js-sdk/debug-tools": 11,
                "@spotify-internal/emitter": 71,
                tslib: 190,
            },
        ],
        173: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.ConnectionObserver = void 0);
                var _emitter = require("@spotify-internal/emitter"),
                    _event = require("../enums/event");
                function _typeof(e) {
                    return (_typeof =
                        "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                            ? function (e) {
                                  return typeof e;
                              }
                            : function (e) {
                                  return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                              })(e);
                }
                function _classCallCheck(e, t) {
                    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
                }
                function _defineProperties(e, t) {
                    for (var n = 0; n < t.length; n++) {
                        var r = t[n];
                        (r.enumerable = r.enumerable || !1), (r.configurable = !0), "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
                    }
                }
                function _createClass(e, t, n) {
                    return t && _defineProperties(e.prototype, t), n && _defineProperties(e, n), e;
                }
                function _inherits(e, t) {
                    if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function");
                    (e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } })), t && _setPrototypeOf(e, t);
                }
                function _setPrototypeOf(e, t) {
                    return (_setPrototypeOf =
                        Object.setPrototypeOf ||
                        function (e, t) {
                            return (e.__proto__ = t), e;
                        })(e, t);
                }
                function _createSuper(e) {
                    var t = _isNativeReflectConstruct();
                    return function () {
                        var n,
                            r = _getPrototypeOf(e);
                        if (t) {
                            var o = _getPrototypeOf(this).constructor;
                            n = Reflect.construct(r, arguments, o);
                        } else n = r.apply(this, arguments);
                        return _possibleConstructorReturn(this, n);
                    };
                }
                function _possibleConstructorReturn(e, t) {
                    return !t || ("object" !== _typeof(t) && "function" != typeof t) ? _assertThisInitialized(e) : t;
                }
                function _assertThisInitialized(e) {
                    if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return e;
                }
                function _isNativeReflectConstruct() {
                    if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
                    if (Reflect.construct.sham) return !1;
                    if ("function" == typeof Proxy) return !0;
                    try {
                        return Date.prototype.toString.call(Reflect.construct(Date, [], function () {})), !0;
                    } catch (e) {
                        return !1;
                    }
                }
                function _getPrototypeOf(e) {
                    return (_getPrototypeOf = Object.setPrototypeOf
                        ? Object.getPrototypeOf
                        : function (e) {
                              return e.__proto__ || Object.getPrototypeOf(e);
                          })(e);
                }
                var ConnectionObserver = (function (e) {
                    _inherits(n, _emitter.EventEmitter);
                    var t = _createSuper(n);
                    function n(e) {
                        var r;
                        _classCallCheck(this, n), (r = t.call(this));
                        var o = "undefined" != typeof window,
                            i = e && e.notifyBeforeUnload;
                        return (
                            (r._navigator = (o && window.navigator) || null),
                            o &&
                                "function" == typeof window.addEventListener &&
                                (window.addEventListener("online", r.emitSync.bind(_assertThisInitialized(r), _event.Event.CONNECTION_ONLINE, null)),
                                window.addEventListener("offline", r.emitSync.bind(_assertThisInitialized(r), _event.Event.CONNECTION_OFFLINE, null)),
                                i && window.addEventListener(_event.Event.WINDOW_BEFORE_UNLOAD, r.emitSync.bind(_assertThisInitialized(r), _event.Event.WINDOW_BEFORE_UNLOAD, null))),
                            r
                        );
                    }
                    return (
                        _createClass(
                            n,
                            [
                                {
                                    key: "isOnline",
                                    value: function () {
                                        var e = this._navigator;
                                        return !(e && "onLine" in e) || e.onLine;
                                    },
                                },
                            ],
                            [
                                {
                                    key: "create",
                                    value: function (e) {
                                        return new n(e);
                                    },
                                },
                            ]
                        ),
                        n
                    );
                })();
                exports.ConnectionObserver = ConnectionObserver;
            },
            { "../enums/event": 175, "@spotify-internal/emitter": 71 },
        ],
        174: [
            function (require, module, exports) {
                "use strict";
                var TransportErrors;
                Object.defineProperty(exports, "__esModule", { value: !0 }),
                    (exports.TransportErrors = void 0),
                    (exports.TransportErrors = TransportErrors),
                    (function (E) {
                        (E.HTTP_REQUEST_FAILED = "HTTP_REQUEST_FAILED"),
                            (E.LOGGING_REQUEST_FAILED = "LOGGING_REQUEST_FAILED"),
                            (E.TRANSPORT_ENDPOINTS_PROVIDER_ERROR = "TRANSPORT_ENDPOINTS_PROVIDER_ERROR"),
                            (E.TRANSPORT_INVALID_STATE = "TRANSPORT_INVALID_STATE"),
                            (E.TRANSPORT_INVALID_TOKEN = "TRANSPORT_INVALID_TOKEN"),
                            (E.TRANSPORT_STALE_TOKEN = "TRANSPORT_STALE_TOKEN "),
                            (E.TRANSPORT_TOKEN_PROVIDER_ERROR = "TRANSPORT_TOKEN_PROVIDER_ERROR"),
                            (E.TRANSPORT_LIFECYCLE_DISABLED = "TRANSPORT_LIFECYCLE_DISABLED"),
                            (E.TRANSPORT_UNSUPPORTED_OPTION = "TRANSPORT_UNSUPPORTED_OPTION"),
                            (E.XRESOLVE_INCOMPLETE_RESPONSE = "XRESOLVE_INCOMPLETE_RESPONSE"),
                            (E.XRESOLVE_INVALID_RESPONSE = "XRESOLVE_INVALID_RESPONSE"),
                            (E.XRESOLVE_REQUEST_FAILED_WITH_STATUS = "XRESOLVE_REQUEST_FAILED_WITH_STATUS");
                    })(TransportErrors || (exports.TransportErrors = TransportErrors = {}));
            },
            {},
        ],
        175: [
            function (require, module, exports) {
                "use strict";
                var Event;
                Object.defineProperty(exports, "__esModule", { value: !0 }),
                    (exports.Event = void 0),
                    (exports.Event = Event),
                    (function (e) {
                        (e.CONNECTION_ONLINE = "online"),
                            (e.CONNECTION_OFFLINE = "offline"),
                            (e.PRODUCT_STATE_CHANGED = "product_state_changed"),
                            (e.ACCESS_TOKEN = "access_token"),
                            (e.AUTHENTICATED = "authenticated"),
                            (e.AUTHENTICATION_FAILED = "authentication_failed"),
                            (e.BEFORE_OFFLINE_DISCONNECT = "before_offline_disconnect"),
                            (e.BEFORE_ONLINE_DISCONNECT = "before_online_disconnect"),
                            (e.CONNECTED = "connected"),
                            (e.CONNECTION_FAILED = "connection_failed"),
                            (e.CONNECTION_ID = "connection_id"),
                            (e.DISCONNECTED = "disconnected"),
                            (e.ENDPOINTS_RESOLVED = "endpoints_resolved"),
                            (e.LOGGED_OUT = "logged_out"),
                            (e.SHORT_SESSION_DISCONNECTED = "short_session_disconnected"),
                            (e.TOKEN_PROVIDER_ERROR = "token_provider_error"),
                            (e.RECONNECTED = "reconnected"),
                            (e.RECONNECTING = "reconnecting"),
                            (e.WINDOW_BEFORE_UNLOAD = "beforeunload");
                    })(Event || (exports.Event = Event = {}));
            },
            {},
        ],
        176: [
            function (require, module, exports) {
                "use strict";
                var Method;
                Object.defineProperty(exports, "__esModule", { value: !0 }),
                    (exports.Method = void 0),
                    (exports.Method = Method),
                    (function (e) {
                        (e.DELETE = "DELETE"), (e.GET = "GET"), (e.OPTIONS = "OPTIONS"), (e.PATCH = "PATCH"), (e.POST = "POST"), (e.PUT = "PUT"), (e.TRACE = "TRACE");
                    })(Method || (exports.Method = Method = {}));
            },
            {},
        ],
        177: [
            function (require, module, exports) {
                "use strict";
                var StatusCode;
                Object.defineProperty(exports, "__esModule", { value: !0 }),
                    (exports.StatusCode = void 0),
                    (exports.StatusCode = StatusCode),
                    (function (E) {
                        (E[(E.UNKNOWN = 0)] = "UNKNOWN"),
                            (E[(E.OK = 200)] = "OK"),
                            (E[(E.CREATED = 201)] = "CREATED"),
                            (E[(E.ACCEPTED = 202)] = "ACCEPTED"),
                            (E[(E.NO_CONTENT = 204)] = "NO_CONTENT"),
                            (E[(E.PARTIAL_CONTENT = 206)] = "PARTIAL_CONTENT"),
                            (E[(E.BAD_REQUEST = 400)] = "BAD_REQUEST"),
                            (E[(E.UNAUTHORIZED = 401)] = "UNAUTHORIZED"),
                            (E[(E.PAYMENT_REQUIRED = 402)] = "PAYMENT_REQUIRED"),
                            (E[(E.FORBIDDEN = 403)] = "FORBIDDEN"),
                            (E[(E.NOT_FOUND = 404)] = "NOT_FOUND"),
                            (E[(E.METHOD_NOT_ALLOWED = 405)] = "METHOD_NOT_ALLOWED"),
                            (E[(E.NOT_ACCEPTABLE = 406)] = "NOT_ACCEPTABLE"),
                            (E[(E.PROXY_AUTHENTICATION_REQUIRED = 407)] = "PROXY_AUTHENTICATION_REQUIRED"),
                            (E[(E.TIMED_OUT = 408)] = "TIMED_OUT"),
                            (E[(E.REQUEST_TIMEOUT = 408)] = "REQUEST_TIMEOUT"),
                            (E[(E.CONFLICT = 409)] = "CONFLICT"),
                            (E[(E.GONE = 410)] = "GONE"),
                            (E[(E.LENGTH_REQUIRED = 411)] = "LENGTH_REQUIRED"),
                            (E[(E.PRECONDITION_FAILED = 412)] = "PRECONDITION_FAILED"),
                            (E[(E.REQUEST_ENTITY_TOO_LARGE = 413)] = "REQUEST_ENTITY_TOO_LARGE"),
                            (E[(E.REQUEST_URI_TOO_LONG = 414)] = "REQUEST_URI_TOO_LONG"),
                            (E[(E.UNSUPPORTED_MEDIA_TYPE = 415)] = "UNSUPPORTED_MEDIA_TYPE"),
                            (E[(E.REQUESTED_RANGE_NOT_SATISFIABLE = 416)] = "REQUESTED_RANGE_NOT_SATISFIABLE"),
                            (E[(E.EXPECTATION_FAILED = 417)] = "EXPECTATION_FAILED"),
                            (E[(E.INTERNAL_SERVER_ERROR = 500)] = "INTERNAL_SERVER_ERROR"),
                            (E[(E.NOT_IMPLEMENTED = 501)] = "NOT_IMPLEMENTED"),
                            (E[(E.BAD_GATEWAY = 502)] = "BAD_GATEWAY"),
                            (E[(E.SERVICE_UNAVAILABLE = 503)] = "SERVICE_UNAVAILABLE"),
                            (E[(E.GATEWAY_TIMEOUT = 504)] = "GATEWAY_TIMEOUT"),
                            (E[(E.HTTP_VERSION_NOT_SUPPORTED = 505)] = "HTTP_VERSION_NOT_SUPPORTED");
                    })(StatusCode || (exports.StatusCode = StatusCode = {}));
            },
            {},
        ],
        178: [
            function (require, module, exports) {
                "use strict";
                function _typeof(t) {
                    return (_typeof =
                        "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                            ? function (t) {
                                  return typeof t;
                              }
                            : function (t) {
                                  return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                              })(t);
                }
                function _classCallCheck(t, e) {
                    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                }
                function _inherits(t, e) {
                    if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                    (t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } })), e && _setPrototypeOf(t, e);
                }
                function _createSuper(t) {
                    var e = _isNativeReflectConstruct();
                    return function () {
                        var r,
                            o = _getPrototypeOf(t);
                        if (e) {
                            var n = _getPrototypeOf(this).constructor;
                            r = Reflect.construct(o, arguments, n);
                        } else r = o.apply(this, arguments);
                        return _possibleConstructorReturn(this, r);
                    };
                }
                function _possibleConstructorReturn(t, e) {
                    return !e || ("object" !== _typeof(e) && "function" != typeof e) ? _assertThisInitialized(t) : e;
                }
                function _assertThisInitialized(t) {
                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t;
                }
                function _wrapNativeSuper(t) {
                    var e = "function" == typeof Map ? new Map() : void 0;
                    return (_wrapNativeSuper = function (t) {
                        if (null === t || !_isNativeFunction(t)) return t;
                        if ("function" != typeof t) throw new TypeError("Super expression must either be null or a function");
                        if (void 0 !== e) {
                            if (e.has(t)) return e.get(t);
                            e.set(t, r);
                        }
                        function r() {
                            return _construct(t, arguments, _getPrototypeOf(this).constructor);
                        }
                        return (r.prototype = Object.create(t.prototype, { constructor: { value: r, enumerable: !1, writable: !0, configurable: !0 } })), _setPrototypeOf(r, t);
                    })(t);
                }
                function _construct(t, e, r) {
                    return (_construct = _isNativeReflectConstruct()
                        ? Reflect.construct
                        : function (t, e, r) {
                              var o = [null];
                              o.push.apply(o, e);
                              var n = new (Function.bind.apply(t, o))();
                              return r && _setPrototypeOf(n, r.prototype), n;
                          }).apply(null, arguments);
                }
                function _isNativeReflectConstruct() {
                    if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
                    if (Reflect.construct.sham) return !1;
                    if ("function" == typeof Proxy) return !0;
                    try {
                        return Date.prototype.toString.call(Reflect.construct(Date, [], function () {})), !0;
                    } catch (t) {
                        return !1;
                    }
                }
                function _isNativeFunction(t) {
                    return -1 !== Function.toString.call(t).indexOf("[native code]");
                }
                function _setPrototypeOf(t, e) {
                    return (_setPrototypeOf =
                        Object.setPrototypeOf ||
                        function (t, e) {
                            return (t.__proto__ = e), t;
                        })(t, e);
                }
                function _getPrototypeOf(t) {
                    return (_getPrototypeOf = Object.setPrototypeOf
                        ? Object.getPrototypeOf
                        : function (t) {
                              return t.__proto__ || Object.getPrototypeOf(t);
                          })(t);
                }
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.LoggingError = void 0);
                var LoggingError = (function (t) {
                    _inherits(r, _wrapNativeSuper(Error));
                    var e = _createSuper(r);
                    function r(t, o, n) {
                        var i;
                        return _classCallCheck(this, r), ((i = e.call(this, t)).name = "LoggingError"), (i.message = t), (i.code = o), (i.status = n || 0), i;
                    }
                    return r;
                })();
                exports.LoggingError = LoggingError;
            },
            {},
        ],
        179: [
            function (require, module, exports) {
                "use strict";
                function _typeof(t) {
                    return (_typeof =
                        "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                            ? function (t) {
                                  return typeof t;
                              }
                            : function (t) {
                                  return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                              })(t);
                }
                function _classCallCheck(t, e) {
                    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                }
                function _inherits(t, e) {
                    if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                    (t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } })), e && _setPrototypeOf(t, e);
                }
                function _createSuper(t) {
                    var e = _isNativeReflectConstruct();
                    return function () {
                        var r,
                            o = _getPrototypeOf(t);
                        if (e) {
                            var n = _getPrototypeOf(this).constructor;
                            r = Reflect.construct(o, arguments, n);
                        } else r = o.apply(this, arguments);
                        return _possibleConstructorReturn(this, r);
                    };
                }
                function _possibleConstructorReturn(t, e) {
                    return !e || ("object" !== _typeof(e) && "function" != typeof e) ? _assertThisInitialized(t) : e;
                }
                function _assertThisInitialized(t) {
                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t;
                }
                function _wrapNativeSuper(t) {
                    var e = "function" == typeof Map ? new Map() : void 0;
                    return (_wrapNativeSuper = function (t) {
                        if (null === t || !_isNativeFunction(t)) return t;
                        if ("function" != typeof t) throw new TypeError("Super expression must either be null or a function");
                        if (void 0 !== e) {
                            if (e.has(t)) return e.get(t);
                            e.set(t, r);
                        }
                        function r() {
                            return _construct(t, arguments, _getPrototypeOf(this).constructor);
                        }
                        return (r.prototype = Object.create(t.prototype, { constructor: { value: r, enumerable: !1, writable: !0, configurable: !0 } })), _setPrototypeOf(r, t);
                    })(t);
                }
                function _construct(t, e, r) {
                    return (_construct = _isNativeReflectConstruct()
                        ? Reflect.construct
                        : function (t, e, r) {
                              var o = [null];
                              o.push.apply(o, e);
                              var n = new (Function.bind.apply(t, o))();
                              return r && _setPrototypeOf(n, r.prototype), n;
                          }).apply(null, arguments);
                }
                function _isNativeReflectConstruct() {
                    if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
                    if (Reflect.construct.sham) return !1;
                    if ("function" == typeof Proxy) return !0;
                    try {
                        return Date.prototype.toString.call(Reflect.construct(Date, [], function () {})), !0;
                    } catch (t) {
                        return !1;
                    }
                }
                function _isNativeFunction(t) {
                    return -1 !== Function.toString.call(t).indexOf("[native code]");
                }
                function _setPrototypeOf(t, e) {
                    return (_setPrototypeOf =
                        Object.setPrototypeOf ||
                        function (t, e) {
                            return (t.__proto__ = e), t;
                        })(t, e);
                }
                function _getPrototypeOf(t) {
                    return (_getPrototypeOf = Object.setPrototypeOf
                        ? Object.getPrototypeOf
                        : function (t) {
                              return t.__proto__ || Object.getPrototypeOf(t);
                          })(t);
                }
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.XResolveError = void 0);
                var XResolveError = (function (t) {
                    _inherits(r, _wrapNativeSuper(Error));
                    var e = _createSuper(r);
                    function r(t, o) {
                        var n,
                            u = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : -1;
                        return _classCallCheck(this, r), ((n = e.call(this, o)).name = "XResolveError"), (n.message = o), (n.code = t), (n.status = u), n;
                    }
                    return r;
                })();
                exports.XResolveError = XResolveError;
            },
            {},
        ],
        180: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.Logger = void 0);
                var _errors = require("./enums/errors"),
                    _method = require("./enums/method"),
                    _status_code = require("./enums/status_code"),
                    _logging = require("./error/logging");
                function _createForOfIteratorHelper(e, t) {
                    var r;
                    if ("undefined" == typeof Symbol || null == e[Symbol.iterator]) {
                        if (Array.isArray(e) || (r = _unsupportedIterableToArray(e)) || (t && e && "number" == typeof e.length)) {
                            r && (e = r);
                            var n = 0,
                                i = function () {};
                            return {
                                s: i,
                                n: function () {
                                    return n >= e.length ? { done: !0 } : { done: !1, value: e[n++] };
                                },
                                e: function (e) {
                                    throw e;
                                },
                                f: i,
                            };
                        }
                        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                    }
                    var o,
                        a = !0,
                        s = !1;
                    return {
                        s: function () {
                            r = e[Symbol.iterator]();
                        },
                        n: function () {
                            var e = r.next();
                            return (a = e.done), e;
                        },
                        e: function (e) {
                            (s = !0), (o = e);
                        },
                        f: function () {
                            try {
                                a || null == r.return || r.return();
                            } finally {
                                if (s) throw o;
                            }
                        },
                    };
                }
                function _slicedToArray(e, t) {
                    return _arrayWithHoles(e) || _iterableToArrayLimit(e, t) || _unsupportedIterableToArray(e, t) || _nonIterableRest();
                }
                function _nonIterableRest() {
                    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                function _unsupportedIterableToArray(e, t) {
                    if (e) {
                        if ("string" == typeof e) return _arrayLikeToArray(e, t);
                        var r = Object.prototype.toString.call(e).slice(8, -1);
                        return (
                            "Object" === r && e.constructor && (r = e.constructor.name), "Map" === r || "Set" === r ? Array.from(e) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? _arrayLikeToArray(e, t) : void 0
                        );
                    }
                }
                function _arrayLikeToArray(e, t) {
                    (null == t || t > e.length) && (t = e.length);
                    for (var r = 0, n = new Array(t); r < t; r++) n[r] = e[r];
                    return n;
                }
                function _iterableToArrayLimit(e, t) {
                    if ("undefined" != typeof Symbol && Symbol.iterator in Object(e)) {
                        var r = [],
                            n = !0,
                            i = !1,
                            o = void 0;
                        try {
                            for (var a, s = e[Symbol.iterator](); !(n = (a = s.next()).done) && (r.push(a.value), !t || r.length !== t); n = !0);
                        } catch (e) {
                            (i = !0), (o = e);
                        } finally {
                            try {
                                n || null == s.return || s.return();
                            } finally {
                                if (i) throw o;
                            }
                        }
                        return r;
                    }
                }
                function _arrayWithHoles(e) {
                    if (Array.isArray(e)) return e;
                }
                function _classCallCheck(e, t) {
                    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
                }
                function _defineProperties(e, t) {
                    for (var r = 0; r < t.length; r++) {
                        var n = t[r];
                        (n.enumerable = n.enumerable || !1), (n.configurable = !0), "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
                    }
                }
                function _createClass(e, t, r) {
                    return t && _defineProperties(e.prototype, t), r && _defineProperties(e, r), e;
                }
                var DEFAULT_MELODY_ENDPOINT = "https://@webgate/melody",
                    LogValues = { UNKNOWN: "unknown", EMPTY: "", ZERO: 0, EMPTY_VERSION: "0.0.0" },
                    LogEndpoints = {
                        CLIENT_EVENT: { url: "/v1/logging/client_event" },
                        ELAPSED_TIME: { url: "/v1/logging/elapsed_time" },
                        JSSDK_ERROR: { url: "/v1/logging/jssdk_error", allowUnauthenticated: !0 },
                        JSSDK_INTERVAL_TIMER: { url: "/v1/logging/jssdk_interval_timer" },
                        JSSDK_PLAYBACK_STATS: { url: "/v1/logging/jssdk_playback_stats", allowUnauthenticated: !0 },
                        JSSDK_PLAYBACK_START: { url: "/v1/logging/jssdk_playback_start" },
                        JSSDK_STALL: { url: "/v1/logging/jssdk_stall", allowUnauthenticated: !0 },
                        JSSDK_TIMER: { url: "/v1/logging/jssdk_timer" },
                        JSSDK_WARNING: { url: "/v1/logging/jssdk_warning", allowUnauthenticated: !0 },
                        TRACK_STREAM_VERIFICATION: { url: "/v1/logging/track_stream_verification" },
                        METRICS: { url: "/v1/metric" },
                    },
                    Logger = (function () {
                        function e(t) {
                            _classCallCheck(this, e),
                                (this._sdkId = null),
                                (this._platformId = null),
                                (this._clientVersion = null),
                                (this._transport = t.transport),
                                (this._endpoint = t.endpoint || DEFAULT_MELODY_ENDPOINT),
                                (this._sdkIdPromise = Promise.resolve(t.sdkId || "transport:1.0.0")),
                                (this._platformPromise = Promise.resolve(t.platform || "spotify-transport")),
                                (this._clientVersionPromise = Promise.resolve(t.clientVersion || "0.0.0")),
                                (this._allowUnauthenticated = !!t.allowUnauthenticated);
                        }
                        return (
                            _createClass(
                                e,
                                [
                                    {
                                        key: "_getIdentData",
                                        value: function () {
                                            var e = this;
                                            return this._platformId && this._sdkId && this._clientVersion
                                                ? Promise.resolve({ platform: this._platformId, sdk_id: this._sdkId, client_version: this._clientVersion })
                                                : Promise.all([this._platformPromise, this._sdkIdPromise, this._clientVersionPromise]).then(function (t) {
                                                      var r = _slicedToArray(t, 3),
                                                          n = r[0],
                                                          i = r[1],
                                                          o = r[2];
                                                      return (e._platformId = n), (e._sdkId = i), (e._clientVersion = o), Promise.resolve({ platform: n, sdk_id: i, client_version: o });
                                                  });
                                        },
                                    },
                                    {
                                        key: "_decoratePayload",
                                        value: function (e) {
                                            return this._getIdentData().then(function (t) {
                                                return (e.sdk_id = t.sdk_id), (e.platform = t.platform), (e.client_version = t.client_version), e;
                                            });
                                        },
                                    },
                                    {
                                        key: "_sendLog",
                                        value: function (e, t) {
                                            var r = !this._allowUnauthenticated || !e.allowUnauthenticated || this._transport.isAuthenticated();
                                            return this._transport
                                                .request(this._endpoint + e.url, {
                                                    method: _method.Method.POST,
                                                    authorize: r,
                                                    payload: JSON.stringify(t),
                                                    retry: {
                                                        maxRetries: 5,
                                                        condition: function (e) {
                                                            return e.status !== _status_code.StatusCode.ACCEPTED;
                                                        },
                                                    },
                                                })
                                                .then(function (e) {
                                                    var t = e.status;
                                                    return (
                                                        t === _status_code.StatusCode.ACCEPTED ||
                                                        Promise.reject(new _logging.LoggingError(_errors.TransportErrors.LOGGING_REQUEST_FAILED, "Logging service responded with status ".concat(t), t))
                                                    );
                                                });
                                        },
                                    },
                                    {
                                        key: "_logErrorVariant",
                                        value: function (e, t, r) {
                                            var n = {
                                                sdk_id: void 0,
                                                platform: void 0,
                                                client_version: void 0,
                                                source: t.source || LogValues.UNKNOWN,
                                                source_version: t.source_version || LogValues.UNKNOWN,
                                                type: t.type || LogValues.UNKNOWN,
                                                message: t.message || LogValues.EMPTY,
                                                stack: JSON.stringify(t.stack || LogValues.EMPTY),
                                                json_data: "json" === r ? t.json_data || "{}" : JSON.stringify(t.json_data || {}),
                                                json_data_version: t.json_data_version || LogValues.EMPTY_VERSION,
                                            };
                                            return this._decoratePayload(n).then(this._sendLog.bind(this, e));
                                        },
                                    },
                                    {
                                        key: "logClientEvent",
                                        value: function (e, t) {
                                            if (!e) return Promise.reject(new TypeError("Logger.logClientEvent `data` cannot be null."));
                                            var r = {
                                                sdk_id: void 0,
                                                platform: void 0,
                                                client_version: void 0,
                                                source: e.source || LogValues.UNKNOWN,
                                                context: e.context || LogValues.UNKNOWN,
                                                event: e.event || LogValues.UNKNOWN,
                                                event_version: e.event_version || LogValues.EMPTY,
                                                test_version: e.test_version || LogValues.EMPTY,
                                                source_version: e.source_version || LogValues.UNKNOWN,
                                                source_vendor: e.source_vendor || LogValues.UNKNOWN,
                                                json_data: "json" === t ? e.json_data || "{}" : JSON.stringify(e.json_data || {}),
                                            };
                                            return this._decoratePayload(r).then(this._sendLog.bind(this, LogEndpoints.CLIENT_EVENT));
                                        },
                                    },
                                    {
                                        key: "logJSSDKError",
                                        value: function (e, t) {
                                            return this._logErrorVariant(LogEndpoints.JSSDK_ERROR, e, t);
                                        },
                                    },
                                    {
                                        key: "logJSSDKWarning",
                                        value: function (e, t) {
                                            return this._logErrorVariant(LogEndpoints.JSSDK_WARNING, e, t);
                                        },
                                    },
                                    {
                                        key: "logJSSDKPlaybackStats",
                                        value: function (e) {
                                            var t = {
                                                sdk_id: void 0,
                                                platform: void 0,
                                                client_version: void 0,
                                                play_track: e.play_track,
                                                file_id: e.file_id,
                                                playback_id: e.playback_id,
                                                internal_play_id: e.internal_play_id,
                                                memory_cached: e.memory_cached,
                                                persistent_cached: e.persistent_cached,
                                                audio_format: e.audio_format,
                                                video_format: e.video_format,
                                                manifest_id: e.manifest_id,
                                                protected: e.protected,
                                                key_system: e.key_system,
                                                key_system_impl: e.key_system_impl,
                                                urls_json: e.urls_json,
                                                start_time: e.start_time,
                                                end_time: e.end_time,
                                                external_start_time: e.external_start_time,
                                                ms_play_latency: e.ms_play_latency,
                                                ms_init_latency: e.ms_init_latency,
                                                ms_head_latency: e.ms_head_latency,
                                                ms_manifest_latency: e.ms_manifest_latency,
                                                ms_resolve_latency: e.ms_resolve_latency,
                                                ms_license_generation_latency: e.ms_license_generation_latency,
                                                ms_license_request_latency: e.ms_license_request_latency,
                                                ms_license_session_latency: e.ms_license_session_latency,
                                                ms_license_update_latency: e.ms_license_update_latency,
                                                ms_played: e.ms_played,
                                                ms_nominal_played: e.ms_nominal_played,
                                                ms_file_duration: e.ms_file_duration,
                                                ms_actual_duration: e.ms_actual_duration,
                                                ms_start_position: e.ms_start_position,
                                                ms_end_position: e.ms_end_position,
                                                ms_seek_rebuffer: e.ms_seek_rebuffer,
                                                ms_seek_rebuffer_longest: e.ms_seek_rebuffer_longest,
                                                ms_stall_rebuffer: e.ms_stall_rebuffer,
                                                ms_stall_rebuffer_longest: e.ms_stall_rebuffer_longest,
                                                n_stalls: e.n_stalls,
                                                n_seekback: e.n_seekback,
                                                n_seekforward: e.n_seekforward,
                                                start_bitrate: e.start_bitrate,
                                                time_weighted_bitrate: e.time_weighted_bitrate,
                                                reason_start: e.reason_start,
                                                reason_end: e.reason_end,
                                                initially_paused: e.initially_paused,
                                                had_error: e.had_error,
                                                n_warnings: e.n_warnings,
                                                n_navigator_offline: e.n_navigator_offline,
                                                session_id: e.session_id,
                                                sequence_id: e.sequence_id,
                                            };
                                            return this._decoratePayload(t).then(this._sendLog.bind(this, LogEndpoints.JSSDK_PLAYBACK_STATS));
                                        },
                                    },
                                    {
                                        key: "logJSSDKPlaybackStart",
                                        value: function (e) {
                                            var t = {
                                                sdk_id: void 0,
                                                platform: void 0,
                                                client_version: void 0,
                                                play_track: e.play_track,
                                                file_id: e.file_id,
                                                playback_id: e.playback_id,
                                                session_id: e.session_id,
                                                ms_start_position: e.ms_start_position,
                                                initially_paused: e.initially_paused,
                                            };
                                            return this._decoratePayload(t).then(this._sendLog.bind(this, LogEndpoints.JSSDK_PLAYBACK_START));
                                        },
                                    },
                                    {
                                        key: "logJSSDKStall",
                                        value: function (e) {
                                            var t = {
                                                sdk_id: void 0,
                                                platform: void 0,
                                                client_version: void 0,
                                                session_id: e.session_id || LogValues.EMPTY,
                                                playback_id: e.playback_id || LogValues.EMPTY,
                                                play_track: e.play_track || LogValues.EMPTY,
                                                file_id: e.file_id || LogValues.EMPTY,
                                                byte_offset: e.byte_offset || LogValues.ZERO,
                                                time_offset: e.time_offset || LogValues.ZERO,
                                                ms_stalled: e.ms_stalled || LogValues.ZERO,
                                                timed_out: !!e.timed_out,
                                            };
                                            return this._decoratePayload(t).then(this._sendLog.bind(this, LogEndpoints.JSSDK_STALL));
                                        },
                                    },
                                    {
                                        key: "logTrackStreamVerification",
                                        value: function (e) {
                                            var t = {
                                                sdk_id: void 0,
                                                platform: void 0,
                                                client_version: void 0,
                                                play_track: e.play_track,
                                                playback_id: e.playback_id,
                                                ms_played: e.ms_played,
                                                session_id: e.session_id,
                                                sequence_id: e.sequence_id,
                                                next_playback_id: e.next_playback_id,
                                            };
                                            return this._decoratePayload(t).then(this._sendLog.bind(this, LogEndpoints.TRACK_STREAM_VERIFICATION));
                                        },
                                    },
                                    {
                                        key: "logMetrics",
                                        value: function (e, t) {
                                            if (!e && !t) return Promise.resolve(!0);
                                            var r = e || [],
                                                n = t || [];
                                            if (!r.length && !n.length) return Promise.resolve(!0);
                                            if (!Array.isArray(r) || !Array.isArray(n)) return Promise.reject(new TypeError("Logger.logMetrics `meters` and `timers` must be null or an array."));
                                            var i,
                                                o = _createForOfIteratorHelper(r);
                                            try {
                                                for (o.s(); !(i = o.n()).done; ) {
                                                    var a = i.value;
                                                    if (!("what" in a && "result" in a && "reason" in a)) return Promise.reject(new TypeError("Logger.logMetrics: Invalid meter format in `meters` array."));
                                                }
                                            } catch (e) {
                                                o.e(e);
                                            } finally {
                                                o.f();
                                            }
                                            var s,
                                                _ = _createForOfIteratorHelper(n);
                                            try {
                                                for (_.s(); !(s = _.n()).done; ) {
                                                    var l = s.value;
                                                    if (!("what" in l && "duration" in l)) return Promise.reject(new TypeError("Logger.logMetrics: Invalid timer format in `timers` array."));
                                                }
                                            } catch (e) {
                                                _.e(e);
                                            } finally {
                                                _.f();
                                            }
                                            var d = { sdk_id: void 0, platform: void 0, client_version: void 0, meters: r, timers: n };
                                            return this._decoratePayload(d).then(this._sendLog.bind(this, LogEndpoints.METRICS));
                                        },
                                    },
                                ],
                                [
                                    {
                                        key: "create",
                                        value: function (t) {
                                            return new e(t);
                                        },
                                    },
                                ]
                            ),
                            e
                        );
                    })();
                exports.Logger = Logger;
            },
            { "./enums/errors": 174, "./enums/method": 176, "./enums/status_code": 177, "./error/logging": 178 },
        ],
        181: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.ProductStateObserver = void 0);
                var _emitter = require("@spotify-internal/emitter"),
                    _status_code = require("./enums/status_code"),
                    _event = require("./enums/event");
                function _typeof(t) {
                    return (_typeof =
                        "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                            ? function (t) {
                                  return typeof t;
                              }
                            : function (t) {
                                  return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                              })(t);
                }
                function _classCallCheck(t, e) {
                    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                }
                function _defineProperties(t, e) {
                    for (var r = 0; r < e.length; r++) {
                        var n = e[r];
                        (n.enumerable = n.enumerable || !1), (n.configurable = !0), "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
                    }
                }
                function _createClass(t, e, r) {
                    return e && _defineProperties(t.prototype, e), r && _defineProperties(t, r), t;
                }
                function _inherits(t, e) {
                    if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                    (t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } })), e && _setPrototypeOf(t, e);
                }
                function _setPrototypeOf(t, e) {
                    return (_setPrototypeOf =
                        Object.setPrototypeOf ||
                        function (t, e) {
                            return (t.__proto__ = e), t;
                        })(t, e);
                }
                function _createSuper(t) {
                    var e = _isNativeReflectConstruct();
                    return function () {
                        var r,
                            n = _getPrototypeOf(t);
                        if (e) {
                            var o = _getPrototypeOf(this).constructor;
                            r = Reflect.construct(n, arguments, o);
                        } else r = n.apply(this, arguments);
                        return _possibleConstructorReturn(this, r);
                    };
                }
                function _possibleConstructorReturn(t, e) {
                    return !e || ("object" !== _typeof(e) && "function" != typeof e) ? _assertThisInitialized(t) : e;
                }
                function _assertThisInitialized(t) {
                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t;
                }
                function _isNativeReflectConstruct() {
                    if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
                    if (Reflect.construct.sham) return !1;
                    if ("function" == typeof Proxy) return !0;
                    try {
                        return Date.prototype.toString.call(Reflect.construct(Date, [], function () {})), !0;
                    } catch (t) {
                        return !1;
                    }
                }
                function _getPrototypeOf(t) {
                    return (_getPrototypeOf = Object.setPrototypeOf
                        ? Object.getPrototypeOf
                        : function (t) {
                              return t.__proto__ || Object.getPrototypeOf(t);
                          })(t);
                }
                var DEFAULT_PRODUCT_STATE_ENDPOINT = "@webgate/melody",
                    USER_UPDATE_EVENT_FILTER = /^wss:\/\/event$/,
                    ProductStateObserver = (function (t) {
                        _inherits(r, _emitter.EventEmitter);
                        var e = _createSuper(r);
                        function r(t) {
                            var n;
                            return (
                                _classCallCheck(this, r),
                                ((n = e.call(this))._currentState = null),
                                (n._connectionId = null),
                                (n._transport = t.transport),
                                (n._endpoint = t.endpoint || DEFAULT_PRODUCT_STATE_ENDPOINT),
                                (n._handleUserUpdate = n._handleUserUpdate.bind(_assertThisInitialized(n))),
                                n._init(),
                                n
                            );
                        }
                        return (
                            _createClass(
                                r,
                                [
                                    {
                                        key: "_init",
                                        value: function () {
                                            var t = this;
                                            this._transport.on(_event.Event.CONNECTION_ID, function (e) {
                                                t.register(e.data.id).catch(function () {});
                                            });
                                        },
                                    },
                                    {
                                        key: "_handleUserUpdate",
                                        value: function () {
                                            var t = this;
                                            this._transport.forceTokenRefresh().catch(function () {}),
                                                this.getCurrentState(!0)
                                                    .then(function (e) {
                                                        t.emit(_event.Event.PRODUCT_STATE_CHANGED, { productState: e });
                                                    })
                                                    .catch(function () {});
                                        },
                                    },
                                    {
                                        key: "_shouldRetry",
                                        value: function (t, e) {
                                            var r = t.getStatusFamily();
                                            return r === e.SERVER_ERROR || r === e.CONNECTION_ERROR;
                                        },
                                    },
                                    {
                                        key: "_createSubURL",
                                        value: function (t) {
                                            return "@webapi/v1/me/notifications/user?connection_id=".concat(encodeURIComponent(t));
                                        },
                                    },
                                    {
                                        key: "getCurrentState",
                                        value: function (t) {
                                            var e = this;
                                            return !t && this._currentState
                                                ? Promise.resolve(this._currentState)
                                                : this._transport.request("".concat(this._endpoint, "/v1/product_state"), { method: "GET", responseType: "json", retry: { condition: this._shouldRetry } }).then(function (t) {
                                                      if (t.status !== _status_code.StatusCode.OK || !t.body) throw ((e._currentState = null), new Error("Cannot get the user's product state."));
                                                      return (e._currentState = t.body), t.body;
                                                  });
                                        },
                                    },
                                    {
                                        key: "register",
                                        value: function (t) {
                                            var e = this;
                                            return (
                                                t || Promise.reject(new TypeError("ConnectionId cannot be null")),
                                                this._transport.matchMessages(USER_UPDATE_EVENT_FILTER, this._handleUserUpdate),
                                                this._transport.request(this._createSubURL(t), { method: "PUT", ignoreResponseBody: !0, ignoreUnauthorized: !0, retry: { condition: this._shouldRetry } }).then(function (r) {
                                                    if (r.status !== _status_code.StatusCode.OK) {
                                                        var n = "Cannot register for product state updates: service responded with status ".concat(r.status);
                                                        throw new Error(n);
                                                    }
                                                    return (e._connectionId = t), !0;
                                                })
                                            );
                                        },
                                    },
                                    {
                                        key: "deregister",
                                        value: function () {
                                            var t = this,
                                                e = this._connectionId;
                                            return e
                                                ? (this._transport.unmatchMessages(USER_UPDATE_EVENT_FILTER, this._handleUserUpdate),
                                                  this._transport.request(this._createSubURL(e), { method: "DELETE", ignoreResponseBody: !0, ignoreUnauthorized: !0, retry: { condition: this._shouldRetry } }).then(function (e) {
                                                      return e.status === _status_code.StatusCode.OK && ((t._connectionId = null), !0);
                                                  }))
                                                : Promise.resolve(!1);
                                        },
                                    },
                                ],
                                [
                                    {
                                        key: "create",
                                        value: function (t) {
                                            return new r(t);
                                        },
                                    },
                                ]
                            ),
                            r
                        );
                    })();
                exports.ProductStateObserver = ProductStateObserver;
            },
            { "./enums/event": 175, "./enums/status_code": 177, "@spotify-internal/emitter": 71 },
        ],
        182: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.createProvider = createProvider);
                var _errors = require("../../enums/errors"),
                    _xresolve = require("../../error/xresolve"),
                    RESOLVER_URL = "https://apresolve.spotify.com/",
                    WellKnownMapping = { DEALER: "dealer", WEBGATE: "spclient" },
                    WEB_API = "https://api.spotify.com/";
                function createProvider() {
                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
                        r = { dealer: e.dealer || WellKnownMapping.DEALER, webgate: e.webgate || WellKnownMapping.WEBGATE },
                        t = "".concat(RESOLVER_URL, "?type=").concat(r.dealer, "&type=").concat(r.webgate);
                    return function (e) {
                        return e
                            .request(t, {
                                forcePolyfill: !0,
                                responseType: "json",
                                retry: {
                                    maxRetries: 5,
                                    condition: function (e, r) {
                                        return e.getStatusFamily() !== r.SUCCESS;
                                    },
                                },
                                metadata: { noRequestTransform: !0 },
                            })
                            .then(function (e) {
                                if (200 !== e.status) throw new _xresolve.XResolveError(_errors.TransportErrors.XRESOLVE_REQUEST_FAILED_WITH_STATUS, "X-Resolve responded with status".concat(e.status), e.status);
                                var t = e.body;
                                if (!t) throw new _xresolve.XResolveError(_errors.TransportErrors.XRESOLVE_INVALID_RESPONSE, "X-Resolve responded with empty/invalid body.", e.status);
                                var o = { dealer: t[r.dealer] && t[r.dealer][0], webgate: t[r.webgate] && t[r.webgate][0], webapi: WEB_API };
                                if (!o.dealer || !o.webgate) throw new _xresolve.XResolveError(_errors.TransportErrors.XRESOLVE_INCOMPLETE_RESPONSE, "X-Resolve responded with incomplete results.", e.status);
                                return o;
                            })
                            .then(function (e) {
                                return (e.dealer = "wss://".concat(e.dealer.replace(/:443$/, ""))), (e.webgate = "https://".concat(e.webgate.replace(/:443$/, ""))), e;
                            });
                    };
                }
            },
            { "../../enums/errors": 174, "../../error/xresolve": 179 },
        ],
        183: [
            function (require, module, exports) {
                "use strict";
                (exports.byteLength = byteLength), (exports.toByteArray = toByteArray), (exports.fromByteArray = fromByteArray);
                for (var lookup = [], revLookup = [], Arr = "undefined" != typeof Uint8Array ? Uint8Array : Array, code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", i = 0, len = code.length; i < len; ++i)
                    (lookup[i] = code[i]), (revLookup[code.charCodeAt(i)] = i);
                function getLens(o) {
                    var r = o.length;
                    if (r % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
                    var e = o.indexOf("=");
                    return -1 === e && (e = r), [e, e === r ? 0 : 4 - (e % 4)];
                }
                function byteLength(o) {
                    var r = getLens(o),
                        e = r[0],
                        t = r[1];
                    return (3 * (e + t)) / 4 - t;
                }
                function _byteLength(o, r, e) {
                    return (3 * (r + e)) / 4 - e;
                }
                function toByteArray(o) {
                    var r,
                        e,
                        t = getLens(o),
                        n = t[0],
                        u = t[1],
                        p = new Arr(_byteLength(o, n, u)),
                        a = 0,
                        h = u > 0 ? n - 4 : n;
                    for (e = 0; e < h; e += 4)
                        (r = (revLookup[o.charCodeAt(e)] << 18) | (revLookup[o.charCodeAt(e + 1)] << 12) | (revLookup[o.charCodeAt(e + 2)] << 6) | revLookup[o.charCodeAt(e + 3)]),
                            (p[a++] = (r >> 16) & 255),
                            (p[a++] = (r >> 8) & 255),
                            (p[a++] = 255 & r);
                    return (
                        2 === u && ((r = (revLookup[o.charCodeAt(e)] << 2) | (revLookup[o.charCodeAt(e + 1)] >> 4)), (p[a++] = 255 & r)),
                        1 === u && ((r = (revLookup[o.charCodeAt(e)] << 10) | (revLookup[o.charCodeAt(e + 1)] << 4) | (revLookup[o.charCodeAt(e + 2)] >> 2)), (p[a++] = (r >> 8) & 255), (p[a++] = 255 & r)),
                        p
                    );
                }
                function tripletToBase64(o) {
                    return lookup[(o >> 18) & 63] + lookup[(o >> 12) & 63] + lookup[(o >> 6) & 63] + lookup[63 & o];
                }
                function encodeChunk(o, r, e) {
                    for (var t, n = [], u = r; u < e; u += 3) (t = ((o[u] << 16) & 16711680) + ((o[u + 1] << 8) & 65280) + (255 & o[u + 2])), n.push(tripletToBase64(t));
                    return n.join("");
                }
                function fromByteArray(o) {
                    for (var r, e = o.length, t = e % 3, n = [], u = 0, p = e - t; u < p; u += 16383) n.push(encodeChunk(o, u, u + 16383 > p ? p : u + 16383));
                    return (
                        1 === t ? ((r = o[e - 1]), n.push(lookup[r >> 2] + lookup[(r << 4) & 63] + "==")) : 2 === t && ((r = (o[e - 2] << 8) + o[e - 1]), n.push(lookup[r >> 10] + lookup[(r >> 4) & 63] + lookup[(r << 2) & 63] + "=")),
                        n.join("")
                    );
                }
                (revLookup["-".charCodeAt(0)] = 62), (revLookup["_".charCodeAt(0)] = 63);
            },
            {},
        ],
        184: [
            function (require, module, exports) {
                (function (Buffer) {
                    (function () {
                        "use strict";
                        var base64 = require("base64-js"),
                            ieee754 = require("ieee754");
                        (exports.Buffer = Buffer), (exports.SlowBuffer = SlowBuffer), (exports.INSPECT_MAX_BYTES = 50);
                        var K_MAX_LENGTH = 2147483647;
                        function typedArraySupport() {
                            try {
                                var e = new Uint8Array(1);
                                return (
                                    (e.__proto__ = {
                                        __proto__: Uint8Array.prototype,
                                        foo: function () {
                                            return 42;
                                        },
                                    }),
                                    42 === e.foo()
                                );
                            } catch (e) {
                                return !1;
                            }
                        }
                        function createBuffer(e) {
                            if (e > K_MAX_LENGTH) throw new RangeError('The value "' + e + '" is invalid for option "size"');
                            var t = new Uint8Array(e);
                            return (t.__proto__ = Buffer.prototype), t;
                        }
                        function Buffer(e, t, r) {
                            if ("number" == typeof e) {
                                if ("string" == typeof t) throw new TypeError('The "string" argument must be of type string. Received type number');
                                return allocUnsafe(e);
                            }
                            return from(e, t, r);
                        }
                        function from(e, t, r) {
                            if ("string" == typeof e) return fromString(e, t);
                            if (ArrayBuffer.isView(e)) return fromArrayLike(e);
                            if (null == e) throw TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof e);
                            if (isInstance(e, ArrayBuffer) || (e && isInstance(e.buffer, ArrayBuffer))) return fromArrayBuffer(e, t, r);
                            if ("number" == typeof e) throw new TypeError('The "value" argument must not be of type number. Received type number');
                            var n = e.valueOf && e.valueOf();
                            if (null != n && n !== e) return Buffer.from(n, t, r);
                            var f = fromObject(e);
                            if (f) return f;
                            if ("undefined" != typeof Symbol && null != Symbol.toPrimitive && "function" == typeof e[Symbol.toPrimitive]) return Buffer.from(e[Symbol.toPrimitive]("string"), t, r);
                            throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof e);
                        }
                        function assertSize(e) {
                            if ("number" != typeof e) throw new TypeError('"size" argument must be of type number');
                            if (e < 0) throw new RangeError('The value "' + e + '" is invalid for option "size"');
                        }
                        function alloc(e, t, r) {
                            return assertSize(e), e <= 0 ? createBuffer(e) : void 0 !== t ? ("string" == typeof r ? createBuffer(e).fill(t, r) : createBuffer(e).fill(t)) : createBuffer(e);
                        }
                        function allocUnsafe(e) {
                            return assertSize(e), createBuffer(e < 0 ? 0 : 0 | checked(e));
                        }
                        function fromString(e, t) {
                            if ((("string" == typeof t && "" !== t) || (t = "utf8"), !Buffer.isEncoding(t))) throw new TypeError("Unknown encoding: " + t);
                            var r = 0 | byteLength(e, t),
                                n = createBuffer(r),
                                f = n.write(e, t);
                            return f !== r && (n = n.slice(0, f)), n;
                        }
                        function fromArrayLike(e) {
                            for (var t = e.length < 0 ? 0 : 0 | checked(e.length), r = createBuffer(t), n = 0; n < t; n += 1) r[n] = 255 & e[n];
                            return r;
                        }
                        function fromArrayBuffer(e, t, r) {
                            if (t < 0 || e.byteLength < t) throw new RangeError('"offset" is outside of buffer bounds');
                            if (e.byteLength < t + (r || 0)) throw new RangeError('"length" is outside of buffer bounds');
                            var n;
                            return ((n = void 0 === t && void 0 === r ? new Uint8Array(e) : void 0 === r ? new Uint8Array(e, t) : new Uint8Array(e, t, r)).__proto__ = Buffer.prototype), n;
                        }
                        function fromObject(e) {
                            if (Buffer.isBuffer(e)) {
                                var t = 0 | checked(e.length),
                                    r = createBuffer(t);
                                return 0 === r.length ? r : (e.copy(r, 0, 0, t), r);
                            }
                            return void 0 !== e.length ? ("number" != typeof e.length || numberIsNaN(e.length) ? createBuffer(0) : fromArrayLike(e)) : "Buffer" === e.type && Array.isArray(e.data) ? fromArrayLike(e.data) : void 0;
                        }
                        function checked(e) {
                            if (e >= K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
                            return 0 | e;
                        }
                        function SlowBuffer(e) {
                            return +e != e && (e = 0), Buffer.alloc(+e);
                        }
                        function byteLength(e, t) {
                            if (Buffer.isBuffer(e)) return e.length;
                            if (ArrayBuffer.isView(e) || isInstance(e, ArrayBuffer)) return e.byteLength;
                            if ("string" != typeof e) throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof e);
                            var r = e.length,
                                n = arguments.length > 2 && !0 === arguments[2];
                            if (!n && 0 === r) return 0;
                            for (var f = !1; ; )
                                switch (t) {
                                    case "ascii":
                                    case "latin1":
                                    case "binary":
                                        return r;
                                    case "utf8":
                                    case "utf-8":
                                        return utf8ToBytes(e).length;
                                    case "ucs2":
                                    case "ucs-2":
                                    case "utf16le":
                                    case "utf-16le":
                                        return 2 * r;
                                    case "hex":
                                        return r >>> 1;
                                    case "base64":
                                        return base64ToBytes(e).length;
                                    default:
                                        if (f) return n ? -1 : utf8ToBytes(e).length;
                                        (t = ("" + t).toLowerCase()), (f = !0);
                                }
                        }
                        function slowToString(e, t, r) {
                            var n = !1;
                            if (((void 0 === t || t < 0) && (t = 0), t > this.length)) return "";
                            if (((void 0 === r || r > this.length) && (r = this.length), r <= 0)) return "";
                            if ((r >>>= 0) <= (t >>>= 0)) return "";
                            for (e || (e = "utf8"); ; )
                                switch (e) {
                                    case "hex":
                                        return hexSlice(this, t, r);
                                    case "utf8":
                                    case "utf-8":
                                        return utf8Slice(this, t, r);
                                    case "ascii":
                                        return asciiSlice(this, t, r);
                                    case "latin1":
                                    case "binary":
                                        return latin1Slice(this, t, r);
                                    case "base64":
                                        return base64Slice(this, t, r);
                                    case "ucs2":
                                    case "ucs-2":
                                    case "utf16le":
                                    case "utf-16le":
                                        return utf16leSlice(this, t, r);
                                    default:
                                        if (n) throw new TypeError("Unknown encoding: " + e);
                                        (e = (e + "").toLowerCase()), (n = !0);
                                }
                        }
                        function swap(e, t, r) {
                            var n = e[t];
                            (e[t] = e[r]), (e[r] = n);
                        }
                        function bidirectionalIndexOf(e, t, r, n, f) {
                            if (0 === e.length) return -1;
                            if (
                                ("string" == typeof r ? ((n = r), (r = 0)) : r > 2147483647 ? (r = 2147483647) : r < -2147483648 && (r = -2147483648),
                                numberIsNaN((r = +r)) && (r = f ? 0 : e.length - 1),
                                r < 0 && (r = e.length + r),
                                r >= e.length)
                            ) {
                                if (f) return -1;
                                r = e.length - 1;
                            } else if (r < 0) {
                                if (!f) return -1;
                                r = 0;
                            }
                            if (("string" == typeof t && (t = Buffer.from(t, n)), Buffer.isBuffer(t))) return 0 === t.length ? -1 : arrayIndexOf(e, t, r, n, f);
                            if ("number" == typeof t)
                                return (t &= 255), "function" == typeof Uint8Array.prototype.indexOf ? (f ? Uint8Array.prototype.indexOf.call(e, t, r) : Uint8Array.prototype.lastIndexOf.call(e, t, r)) : arrayIndexOf(e, [t], r, n, f);
                            throw new TypeError("val must be string, number or Buffer");
                        }
                        function arrayIndexOf(e, t, r, n, f) {
                            var i,
                                o = 1,
                                u = e.length,
                                s = t.length;
                            if (void 0 !== n && ("ucs2" === (n = String(n).toLowerCase()) || "ucs-2" === n || "utf16le" === n || "utf-16le" === n)) {
                                if (e.length < 2 || t.length < 2) return -1;
                                (o = 2), (u /= 2), (s /= 2), (r /= 2);
                            }
                            function a(e, t) {
                                return 1 === o ? e[t] : e.readUInt16BE(t * o);
                            }
                            if (f) {
                                var h = -1;
                                for (i = r; i < u; i++)
                                    if (a(e, i) === a(t, -1 === h ? 0 : i - h)) {
                                        if ((-1 === h && (h = i), i - h + 1 === s)) return h * o;
                                    } else -1 !== h && (i -= i - h), (h = -1);
                            } else
                                for (r + s > u && (r = u - s), i = r; i >= 0; i--) {
                                    for (var c = !0, l = 0; l < s; l++)
                                        if (a(e, i + l) !== a(t, l)) {
                                            c = !1;
                                            break;
                                        }
                                    if (c) return i;
                                }
                            return -1;
                        }
                        function hexWrite(e, t, r, n) {
                            r = Number(r) || 0;
                            var f = e.length - r;
                            n ? (n = Number(n)) > f && (n = f) : (n = f);
                            var i = t.length;
                            n > i / 2 && (n = i / 2);
                            for (var o = 0; o < n; ++o) {
                                var u = parseInt(t.substr(2 * o, 2), 16);
                                if (numberIsNaN(u)) return o;
                                e[r + o] = u;
                            }
                            return o;
                        }
                        function utf8Write(e, t, r, n) {
                            return blitBuffer(utf8ToBytes(t, e.length - r), e, r, n);
                        }
                        function asciiWrite(e, t, r, n) {
                            return blitBuffer(asciiToBytes(t), e, r, n);
                        }
                        function latin1Write(e, t, r, n) {
                            return asciiWrite(e, t, r, n);
                        }
                        function base64Write(e, t, r, n) {
                            return blitBuffer(base64ToBytes(t), e, r, n);
                        }
                        function ucs2Write(e, t, r, n) {
                            return blitBuffer(utf16leToBytes(t, e.length - r), e, r, n);
                        }
                        function base64Slice(e, t, r) {
                            return 0 === t && r === e.length ? base64.fromByteArray(e) : base64.fromByteArray(e.slice(t, r));
                        }
                        function utf8Slice(e, t, r) {
                            r = Math.min(e.length, r);
                            for (var n = [], f = t; f < r; ) {
                                var i,
                                    o,
                                    u,
                                    s,
                                    a = e[f],
                                    h = null,
                                    c = a > 239 ? 4 : a > 223 ? 3 : a > 191 ? 2 : 1;
                                if (f + c <= r)
                                    switch (c) {
                                        case 1:
                                            a < 128 && (h = a);
                                            break;
                                        case 2:
                                            128 == (192 & (i = e[f + 1])) && (s = ((31 & a) << 6) | (63 & i)) > 127 && (h = s);
                                            break;
                                        case 3:
                                            (i = e[f + 1]), (o = e[f + 2]), 128 == (192 & i) && 128 == (192 & o) && (s = ((15 & a) << 12) | ((63 & i) << 6) | (63 & o)) > 2047 && (s < 55296 || s > 57343) && (h = s);
                                            break;
                                        case 4:
                                            (i = e[f + 1]),
                                                (o = e[f + 2]),
                                                (u = e[f + 3]),
                                                128 == (192 & i) && 128 == (192 & o) && 128 == (192 & u) && (s = ((15 & a) << 18) | ((63 & i) << 12) | ((63 & o) << 6) | (63 & u)) > 65535 && s < 1114112 && (h = s);
                                    }
                                null === h ? ((h = 65533), (c = 1)) : h > 65535 && ((h -= 65536), n.push(((h >>> 10) & 1023) | 55296), (h = 56320 | (1023 & h))), n.push(h), (f += c);
                            }
                            return decodeCodePointsArray(n);
                        }
                        (exports.kMaxLength = K_MAX_LENGTH),
                            (Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()),
                            Buffer.TYPED_ARRAY_SUPPORT ||
                                "undefined" == typeof console ||
                                "function" != typeof console.error ||
                                console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),
                            Object.defineProperty(Buffer.prototype, "parent", {
                                enumerable: !0,
                                get: function () {
                                    if (Buffer.isBuffer(this)) return this.buffer;
                                },
                            }),
                            Object.defineProperty(Buffer.prototype, "offset", {
                                enumerable: !0,
                                get: function () {
                                    if (Buffer.isBuffer(this)) return this.byteOffset;
                                },
                            }),
                            "undefined" != typeof Symbol && null != Symbol.species && Buffer[Symbol.species] === Buffer && Object.defineProperty(Buffer, Symbol.species, { value: null, configurable: !0, enumerable: !1, writable: !1 }),
                            (Buffer.poolSize = 8192),
                            (Buffer.from = function (e, t, r) {
                                return from(e, t, r);
                            }),
                            (Buffer.prototype.__proto__ = Uint8Array.prototype),
                            (Buffer.__proto__ = Uint8Array),
                            (Buffer.alloc = function (e, t, r) {
                                return alloc(e, t, r);
                            }),
                            (Buffer.allocUnsafe = function (e) {
                                return allocUnsafe(e);
                            }),
                            (Buffer.allocUnsafeSlow = function (e) {
                                return allocUnsafe(e);
                            }),
                            (Buffer.isBuffer = function (e) {
                                return null != e && !0 === e._isBuffer && e !== Buffer.prototype;
                            }),
                            (Buffer.compare = function (e, t) {
                                if ((isInstance(e, Uint8Array) && (e = Buffer.from(e, e.offset, e.byteLength)), isInstance(t, Uint8Array) && (t = Buffer.from(t, t.offset, t.byteLength)), !Buffer.isBuffer(e) || !Buffer.isBuffer(t)))
                                    throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
                                if (e === t) return 0;
                                for (var r = e.length, n = t.length, f = 0, i = Math.min(r, n); f < i; ++f)
                                    if (e[f] !== t[f]) {
                                        (r = e[f]), (n = t[f]);
                                        break;
                                    }
                                return r < n ? -1 : n < r ? 1 : 0;
                            }),
                            (Buffer.isEncoding = function (e) {
                                switch (String(e).toLowerCase()) {
                                    case "hex":
                                    case "utf8":
                                    case "utf-8":
                                    case "ascii":
                                    case "latin1":
                                    case "binary":
                                    case "base64":
                                    case "ucs2":
                                    case "ucs-2":
                                    case "utf16le":
                                    case "utf-16le":
                                        return !0;
                                    default:
                                        return !1;
                                }
                            }),
                            (Buffer.concat = function (e, t) {
                                if (!Array.isArray(e)) throw new TypeError('"list" argument must be an Array of Buffers');
                                if (0 === e.length) return Buffer.alloc(0);
                                var r;
                                if (void 0 === t) for (t = 0, r = 0; r < e.length; ++r) t += e[r].length;
                                var n = Buffer.allocUnsafe(t),
                                    f = 0;
                                for (r = 0; r < e.length; ++r) {
                                    var i = e[r];
                                    if ((isInstance(i, Uint8Array) && (i = Buffer.from(i)), !Buffer.isBuffer(i))) throw new TypeError('"list" argument must be an Array of Buffers');
                                    i.copy(n, f), (f += i.length);
                                }
                                return n;
                            }),
                            (Buffer.byteLength = byteLength),
                            (Buffer.prototype._isBuffer = !0),
                            (Buffer.prototype.swap16 = function () {
                                var e = this.length;
                                if (e % 2 != 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
                                for (var t = 0; t < e; t += 2) swap(this, t, t + 1);
                                return this;
                            }),
                            (Buffer.prototype.swap32 = function () {
                                var e = this.length;
                                if (e % 4 != 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
                                for (var t = 0; t < e; t += 4) swap(this, t, t + 3), swap(this, t + 1, t + 2);
                                return this;
                            }),
                            (Buffer.prototype.swap64 = function () {
                                var e = this.length;
                                if (e % 8 != 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
                                for (var t = 0; t < e; t += 8) swap(this, t, t + 7), swap(this, t + 1, t + 6), swap(this, t + 2, t + 5), swap(this, t + 3, t + 4);
                                return this;
                            }),
                            (Buffer.prototype.toString = function () {
                                var e = this.length;
                                return 0 === e ? "" : 0 === arguments.length ? utf8Slice(this, 0, e) : slowToString.apply(this, arguments);
                            }),
                            (Buffer.prototype.toLocaleString = Buffer.prototype.toString),
                            (Buffer.prototype.equals = function (e) {
                                if (!Buffer.isBuffer(e)) throw new TypeError("Argument must be a Buffer");
                                return this === e || 0 === Buffer.compare(this, e);
                            }),
                            (Buffer.prototype.inspect = function () {
                                var e = "",
                                    t = exports.INSPECT_MAX_BYTES;
                                return (
                                    (e = this.toString("hex", 0, t)
                                        .replace(/(.{2})/g, "$1 ")
                                        .trim()),
                                    this.length > t && (e += " ... "),
                                    "<Buffer " + e + ">"
                                );
                            }),
                            (Buffer.prototype.compare = function (e, t, r, n, f) {
                                if ((isInstance(e, Uint8Array) && (e = Buffer.from(e, e.offset, e.byteLength)), !Buffer.isBuffer(e)))
                                    throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof e);
                                if ((void 0 === t && (t = 0), void 0 === r && (r = e ? e.length : 0), void 0 === n && (n = 0), void 0 === f && (f = this.length), t < 0 || r > e.length || n < 0 || f > this.length))
                                    throw new RangeError("out of range index");
                                if (n >= f && t >= r) return 0;
                                if (n >= f) return -1;
                                if (t >= r) return 1;
                                if (this === e) return 0;
                                for (var i = (f >>>= 0) - (n >>>= 0), o = (r >>>= 0) - (t >>>= 0), u = Math.min(i, o), s = this.slice(n, f), a = e.slice(t, r), h = 0; h < u; ++h)
                                    if (s[h] !== a[h]) {
                                        (i = s[h]), (o = a[h]);
                                        break;
                                    }
                                return i < o ? -1 : o < i ? 1 : 0;
                            }),
                            (Buffer.prototype.includes = function (e, t, r) {
                                return -1 !== this.indexOf(e, t, r);
                            }),
                            (Buffer.prototype.indexOf = function (e, t, r) {
                                return bidirectionalIndexOf(this, e, t, r, !0);
                            }),
                            (Buffer.prototype.lastIndexOf = function (e, t, r) {
                                return bidirectionalIndexOf(this, e, t, r, !1);
                            }),
                            (Buffer.prototype.write = function (e, t, r, n) {
                                if (void 0 === t) (n = "utf8"), (r = this.length), (t = 0);
                                else if (void 0 === r && "string" == typeof t) (n = t), (r = this.length), (t = 0);
                                else {
                                    if (!isFinite(t)) throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
                                    (t >>>= 0), isFinite(r) ? ((r >>>= 0), void 0 === n && (n = "utf8")) : ((n = r), (r = void 0));
                                }
                                var f = this.length - t;
                                if (((void 0 === r || r > f) && (r = f), (e.length > 0 && (r < 0 || t < 0)) || t > this.length)) throw new RangeError("Attempt to write outside buffer bounds");
                                n || (n = "utf8");
                                for (var i = !1; ; )
                                    switch (n) {
                                        case "hex":
                                            return hexWrite(this, e, t, r);
                                        case "utf8":
                                        case "utf-8":
                                            return utf8Write(this, e, t, r);
                                        case "ascii":
                                            return asciiWrite(this, e, t, r);
                                        case "latin1":
                                        case "binary":
                                            return latin1Write(this, e, t, r);
                                        case "base64":
                                            return base64Write(this, e, t, r);
                                        case "ucs2":
                                        case "ucs-2":
                                        case "utf16le":
                                        case "utf-16le":
                                            return ucs2Write(this, e, t, r);
                                        default:
                                            if (i) throw new TypeError("Unknown encoding: " + n);
                                            (n = ("" + n).toLowerCase()), (i = !0);
                                    }
                            }),
                            (Buffer.prototype.toJSON = function () {
                                return { type: "Buffer", data: Array.prototype.slice.call(this._arr || this, 0) };
                            });
                        var MAX_ARGUMENTS_LENGTH = 4096;
                        function decodeCodePointsArray(e) {
                            var t = e.length;
                            if (t <= MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, e);
                            for (var r = "", n = 0; n < t; ) r += String.fromCharCode.apply(String, e.slice(n, (n += MAX_ARGUMENTS_LENGTH)));
                            return r;
                        }
                        function asciiSlice(e, t, r) {
                            var n = "";
                            r = Math.min(e.length, r);
                            for (var f = t; f < r; ++f) n += String.fromCharCode(127 & e[f]);
                            return n;
                        }
                        function latin1Slice(e, t, r) {
                            var n = "";
                            r = Math.min(e.length, r);
                            for (var f = t; f < r; ++f) n += String.fromCharCode(e[f]);
                            return n;
                        }
                        function hexSlice(e, t, r) {
                            var n = e.length;
                            (!t || t < 0) && (t = 0), (!r || r < 0 || r > n) && (r = n);
                            for (var f = "", i = t; i < r; ++i) f += toHex(e[i]);
                            return f;
                        }
                        function utf16leSlice(e, t, r) {
                            for (var n = e.slice(t, r), f = "", i = 0; i < n.length; i += 2) f += String.fromCharCode(n[i] + 256 * n[i + 1]);
                            return f;
                        }
                        function checkOffset(e, t, r) {
                            if (e % 1 != 0 || e < 0) throw new RangeError("offset is not uint");
                            if (e + t > r) throw new RangeError("Trying to access beyond buffer length");
                        }
                        function checkInt(e, t, r, n, f, i) {
                            if (!Buffer.isBuffer(e)) throw new TypeError('"buffer" argument must be a Buffer instance');
                            if (t > f || t < i) throw new RangeError('"value" argument is out of bounds');
                            if (r + n > e.length) throw new RangeError("Index out of range");
                        }
                        function checkIEEE754(e, t, r, n, f, i) {
                            if (r + n > e.length) throw new RangeError("Index out of range");
                            if (r < 0) throw new RangeError("Index out of range");
                        }
                        function writeFloat(e, t, r, n, f) {
                            return (t = +t), (r >>>= 0), f || checkIEEE754(e, t, r, 4, 3.4028234663852886e38, -3.4028234663852886e38), ieee754.write(e, t, r, n, 23, 4), r + 4;
                        }
                        function writeDouble(e, t, r, n, f) {
                            return (t = +t), (r >>>= 0), f || checkIEEE754(e, t, r, 8, 1.7976931348623157e308, -1.7976931348623157e308), ieee754.write(e, t, r, n, 52, 8), r + 8;
                        }
                        (Buffer.prototype.slice = function (e, t) {
                            var r = this.length;
                            (e = ~~e) < 0 ? (e += r) < 0 && (e = 0) : e > r && (e = r), (t = void 0 === t ? r : ~~t) < 0 ? (t += r) < 0 && (t = 0) : t > r && (t = r), t < e && (t = e);
                            var n = this.subarray(e, t);
                            return (n.__proto__ = Buffer.prototype), n;
                        }),
                            (Buffer.prototype.readUIntLE = function (e, t, r) {
                                (e >>>= 0), (t >>>= 0), r || checkOffset(e, t, this.length);
                                for (var n = this[e], f = 1, i = 0; ++i < t && (f *= 256); ) n += this[e + i] * f;
                                return n;
                            }),
                            (Buffer.prototype.readUIntBE = function (e, t, r) {
                                (e >>>= 0), (t >>>= 0), r || checkOffset(e, t, this.length);
                                for (var n = this[e + --t], f = 1; t > 0 && (f *= 256); ) n += this[e + --t] * f;
                                return n;
                            }),
                            (Buffer.prototype.readUInt8 = function (e, t) {
                                return (e >>>= 0), t || checkOffset(e, 1, this.length), this[e];
                            }),
                            (Buffer.prototype.readUInt16LE = function (e, t) {
                                return (e >>>= 0), t || checkOffset(e, 2, this.length), this[e] | (this[e + 1] << 8);
                            }),
                            (Buffer.prototype.readUInt16BE = function (e, t) {
                                return (e >>>= 0), t || checkOffset(e, 2, this.length), (this[e] << 8) | this[e + 1];
                            }),
                            (Buffer.prototype.readUInt32LE = function (e, t) {
                                return (e >>>= 0), t || checkOffset(e, 4, this.length), (this[e] | (this[e + 1] << 8) | (this[e + 2] << 16)) + 16777216 * this[e + 3];
                            }),
                            (Buffer.prototype.readUInt32BE = function (e, t) {
                                return (e >>>= 0), t || checkOffset(e, 4, this.length), 16777216 * this[e] + ((this[e + 1] << 16) | (this[e + 2] << 8) | this[e + 3]);
                            }),
                            (Buffer.prototype.readIntLE = function (e, t, r) {
                                (e >>>= 0), (t >>>= 0), r || checkOffset(e, t, this.length);
                                for (var n = this[e], f = 1, i = 0; ++i < t && (f *= 256); ) n += this[e + i] * f;
                                return n >= (f *= 128) && (n -= Math.pow(2, 8 * t)), n;
                            }),
                            (Buffer.prototype.readIntBE = function (e, t, r) {
                                (e >>>= 0), (t >>>= 0), r || checkOffset(e, t, this.length);
                                for (var n = t, f = 1, i = this[e + --n]; n > 0 && (f *= 256); ) i += this[e + --n] * f;
                                return i >= (f *= 128) && (i -= Math.pow(2, 8 * t)), i;
                            }),
                            (Buffer.prototype.readInt8 = function (e, t) {
                                return (e >>>= 0), t || checkOffset(e, 1, this.length), 128 & this[e] ? -1 * (255 - this[e] + 1) : this[e];
                            }),
                            (Buffer.prototype.readInt16LE = function (e, t) {
                                (e >>>= 0), t || checkOffset(e, 2, this.length);
                                var r = this[e] | (this[e + 1] << 8);
                                return 32768 & r ? 4294901760 | r : r;
                            }),
                            (Buffer.prototype.readInt16BE = function (e, t) {
                                (e >>>= 0), t || checkOffset(e, 2, this.length);
                                var r = this[e + 1] | (this[e] << 8);
                                return 32768 & r ? 4294901760 | r : r;
                            }),
                            (Buffer.prototype.readInt32LE = function (e, t) {
                                return (e >>>= 0), t || checkOffset(e, 4, this.length), this[e] | (this[e + 1] << 8) | (this[e + 2] << 16) | (this[e + 3] << 24);
                            }),
                            (Buffer.prototype.readInt32BE = function (e, t) {
                                return (e >>>= 0), t || checkOffset(e, 4, this.length), (this[e] << 24) | (this[e + 1] << 16) | (this[e + 2] << 8) | this[e + 3];
                            }),
                            (Buffer.prototype.readFloatLE = function (e, t) {
                                return (e >>>= 0), t || checkOffset(e, 4, this.length), ieee754.read(this, e, !0, 23, 4);
                            }),
                            (Buffer.prototype.readFloatBE = function (e, t) {
                                return (e >>>= 0), t || checkOffset(e, 4, this.length), ieee754.read(this, e, !1, 23, 4);
                            }),
                            (Buffer.prototype.readDoubleLE = function (e, t) {
                                return (e >>>= 0), t || checkOffset(e, 8, this.length), ieee754.read(this, e, !0, 52, 8);
                            }),
                            (Buffer.prototype.readDoubleBE = function (e, t) {
                                return (e >>>= 0), t || checkOffset(e, 8, this.length), ieee754.read(this, e, !1, 52, 8);
                            }),
                            (Buffer.prototype.writeUIntLE = function (e, t, r, n) {
                                ((e = +e), (t >>>= 0), (r >>>= 0), n) || checkInt(this, e, t, r, Math.pow(2, 8 * r) - 1, 0);
                                var f = 1,
                                    i = 0;
                                for (this[t] = 255 & e; ++i < r && (f *= 256); ) this[t + i] = (e / f) & 255;
                                return t + r;
                            }),
                            (Buffer.prototype.writeUIntBE = function (e, t, r, n) {
                                ((e = +e), (t >>>= 0), (r >>>= 0), n) || checkInt(this, e, t, r, Math.pow(2, 8 * r) - 1, 0);
                                var f = r - 1,
                                    i = 1;
                                for (this[t + f] = 255 & e; --f >= 0 && (i *= 256); ) this[t + f] = (e / i) & 255;
                                return t + r;
                            }),
                            (Buffer.prototype.writeUInt8 = function (e, t, r) {
                                return (e = +e), (t >>>= 0), r || checkInt(this, e, t, 1, 255, 0), (this[t] = 255 & e), t + 1;
                            }),
                            (Buffer.prototype.writeUInt16LE = function (e, t, r) {
                                return (e = +e), (t >>>= 0), r || checkInt(this, e, t, 2, 65535, 0), (this[t] = 255 & e), (this[t + 1] = e >>> 8), t + 2;
                            }),
                            (Buffer.prototype.writeUInt16BE = function (e, t, r) {
                                return (e = +e), (t >>>= 0), r || checkInt(this, e, t, 2, 65535, 0), (this[t] = e >>> 8), (this[t + 1] = 255 & e), t + 2;
                            }),
                            (Buffer.prototype.writeUInt32LE = function (e, t, r) {
                                return (e = +e), (t >>>= 0), r || checkInt(this, e, t, 4, 4294967295, 0), (this[t + 3] = e >>> 24), (this[t + 2] = e >>> 16), (this[t + 1] = e >>> 8), (this[t] = 255 & e), t + 4;
                            }),
                            (Buffer.prototype.writeUInt32BE = function (e, t, r) {
                                return (e = +e), (t >>>= 0), r || checkInt(this, e, t, 4, 4294967295, 0), (this[t] = e >>> 24), (this[t + 1] = e >>> 16), (this[t + 2] = e >>> 8), (this[t + 3] = 255 & e), t + 4;
                            }),
                            (Buffer.prototype.writeIntLE = function (e, t, r, n) {
                                if (((e = +e), (t >>>= 0), !n)) {
                                    var f = Math.pow(2, 8 * r - 1);
                                    checkInt(this, e, t, r, f - 1, -f);
                                }
                                var i = 0,
                                    o = 1,
                                    u = 0;
                                for (this[t] = 255 & e; ++i < r && (o *= 256); ) e < 0 && 0 === u && 0 !== this[t + i - 1] && (u = 1), (this[t + i] = (((e / o) >> 0) - u) & 255);
                                return t + r;
                            }),
                            (Buffer.prototype.writeIntBE = function (e, t, r, n) {
                                if (((e = +e), (t >>>= 0), !n)) {
                                    var f = Math.pow(2, 8 * r - 1);
                                    checkInt(this, e, t, r, f - 1, -f);
                                }
                                var i = r - 1,
                                    o = 1,
                                    u = 0;
                                for (this[t + i] = 255 & e; --i >= 0 && (o *= 256); ) e < 0 && 0 === u && 0 !== this[t + i + 1] && (u = 1), (this[t + i] = (((e / o) >> 0) - u) & 255);
                                return t + r;
                            }),
                            (Buffer.prototype.writeInt8 = function (e, t, r) {
                                return (e = +e), (t >>>= 0), r || checkInt(this, e, t, 1, 127, -128), e < 0 && (e = 255 + e + 1), (this[t] = 255 & e), t + 1;
                            }),
                            (Buffer.prototype.writeInt16LE = function (e, t, r) {
                                return (e = +e), (t >>>= 0), r || checkInt(this, e, t, 2, 32767, -32768), (this[t] = 255 & e), (this[t + 1] = e >>> 8), t + 2;
                            }),
                            (Buffer.prototype.writeInt16BE = function (e, t, r) {
                                return (e = +e), (t >>>= 0), r || checkInt(this, e, t, 2, 32767, -32768), (this[t] = e >>> 8), (this[t + 1] = 255 & e), t + 2;
                            }),
                            (Buffer.prototype.writeInt32LE = function (e, t, r) {
                                return (e = +e), (t >>>= 0), r || checkInt(this, e, t, 4, 2147483647, -2147483648), (this[t] = 255 & e), (this[t + 1] = e >>> 8), (this[t + 2] = e >>> 16), (this[t + 3] = e >>> 24), t + 4;
                            }),
                            (Buffer.prototype.writeInt32BE = function (e, t, r) {
                                return (
                                    (e = +e),
                                    (t >>>= 0),
                                    r || checkInt(this, e, t, 4, 2147483647, -2147483648),
                                    e < 0 && (e = 4294967295 + e + 1),
                                    (this[t] = e >>> 24),
                                    (this[t + 1] = e >>> 16),
                                    (this[t + 2] = e >>> 8),
                                    (this[t + 3] = 255 & e),
                                    t + 4
                                );
                            }),
                            (Buffer.prototype.writeFloatLE = function (e, t, r) {
                                return writeFloat(this, e, t, !0, r);
                            }),
                            (Buffer.prototype.writeFloatBE = function (e, t, r) {
                                return writeFloat(this, e, t, !1, r);
                            }),
                            (Buffer.prototype.writeDoubleLE = function (e, t, r) {
                                return writeDouble(this, e, t, !0, r);
                            }),
                            (Buffer.prototype.writeDoubleBE = function (e, t, r) {
                                return writeDouble(this, e, t, !1, r);
                            }),
                            (Buffer.prototype.copy = function (e, t, r, n) {
                                if (!Buffer.isBuffer(e)) throw new TypeError("argument should be a Buffer");
                                if ((r || (r = 0), n || 0 === n || (n = this.length), t >= e.length && (t = e.length), t || (t = 0), n > 0 && n < r && (n = r), n === r)) return 0;
                                if (0 === e.length || 0 === this.length) return 0;
                                if (t < 0) throw new RangeError("targetStart out of bounds");
                                if (r < 0 || r >= this.length) throw new RangeError("Index out of range");
                                if (n < 0) throw new RangeError("sourceEnd out of bounds");
                                n > this.length && (n = this.length), e.length - t < n - r && (n = e.length - t + r);
                                var f = n - r;
                                if (this === e && "function" == typeof Uint8Array.prototype.copyWithin) this.copyWithin(t, r, n);
                                else if (this === e && r < t && t < n) for (var i = f - 1; i >= 0; --i) e[i + t] = this[i + r];
                                else Uint8Array.prototype.set.call(e, this.subarray(r, n), t);
                                return f;
                            }),
                            (Buffer.prototype.fill = function (e, t, r, n) {
                                if ("string" == typeof e) {
                                    if (("string" == typeof t ? ((n = t), (t = 0), (r = this.length)) : "string" == typeof r && ((n = r), (r = this.length)), void 0 !== n && "string" != typeof n))
                                        throw new TypeError("encoding must be a string");
                                    if ("string" == typeof n && !Buffer.isEncoding(n)) throw new TypeError("Unknown encoding: " + n);
                                    if (1 === e.length) {
                                        var f = e.charCodeAt(0);
                                        (("utf8" === n && f < 128) || "latin1" === n) && (e = f);
                                    }
                                } else "number" == typeof e && (e &= 255);
                                if (t < 0 || this.length < t || this.length < r) throw new RangeError("Out of range index");
                                if (r <= t) return this;
                                var i;
                                if (((t >>>= 0), (r = void 0 === r ? this.length : r >>> 0), e || (e = 0), "number" == typeof e)) for (i = t; i < r; ++i) this[i] = e;
                                else {
                                    var o = Buffer.isBuffer(e) ? e : Buffer.from(e, n),
                                        u = o.length;
                                    if (0 === u) throw new TypeError('The value "' + e + '" is invalid for argument "value"');
                                    for (i = 0; i < r - t; ++i) this[i + t] = o[i % u];
                                }
                                return this;
                            });
                        var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
                        function base64clean(e) {
                            if ((e = (e = e.split("=")[0]).trim().replace(INVALID_BASE64_RE, "")).length < 2) return "";
                            for (; e.length % 4 != 0; ) e += "=";
                            return e;
                        }
                        function toHex(e) {
                            return e < 16 ? "0" + e.toString(16) : e.toString(16);
                        }
                        function utf8ToBytes(e, t) {
                            var r;
                            t = t || 1 / 0;
                            for (var n = e.length, f = null, i = [], o = 0; o < n; ++o) {
                                if ((r = e.charCodeAt(o)) > 55295 && r < 57344) {
                                    if (!f) {
                                        if (r > 56319) {
                                            (t -= 3) > -1 && i.push(239, 191, 189);
                                            continue;
                                        }
                                        if (o + 1 === n) {
                                            (t -= 3) > -1 && i.push(239, 191, 189);
                                            continue;
                                        }
                                        f = r;
                                        continue;
                                    }
                                    if (r < 56320) {
                                        (t -= 3) > -1 && i.push(239, 191, 189), (f = r);
                                        continue;
                                    }
                                    r = 65536 + (((f - 55296) << 10) | (r - 56320));
                                } else f && (t -= 3) > -1 && i.push(239, 191, 189);
                                if (((f = null), r < 128)) {
                                    if ((t -= 1) < 0) break;
                                    i.push(r);
                                } else if (r < 2048) {
                                    if ((t -= 2) < 0) break;
                                    i.push((r >> 6) | 192, (63 & r) | 128);
                                } else if (r < 65536) {
                                    if ((t -= 3) < 0) break;
                                    i.push((r >> 12) | 224, ((r >> 6) & 63) | 128, (63 & r) | 128);
                                } else {
                                    if (!(r < 1114112)) throw new Error("Invalid code point");
                                    if ((t -= 4) < 0) break;
                                    i.push((r >> 18) | 240, ((r >> 12) & 63) | 128, ((r >> 6) & 63) | 128, (63 & r) | 128);
                                }
                            }
                            return i;
                        }
                        function asciiToBytes(e) {
                            for (var t = [], r = 0; r < e.length; ++r) t.push(255 & e.charCodeAt(r));
                            return t;
                        }
                        function utf16leToBytes(e, t) {
                            for (var r, n, f, i = [], o = 0; o < e.length && !((t -= 2) < 0); ++o) (n = (r = e.charCodeAt(o)) >> 8), (f = r % 256), i.push(f), i.push(n);
                            return i;
                        }
                        function base64ToBytes(e) {
                            return base64.toByteArray(base64clean(e));
                        }
                        function blitBuffer(e, t, r, n) {
                            for (var f = 0; f < n && !(f + r >= t.length || f >= e.length); ++f) t[f + r] = e[f];
                            return f;
                        }
                        function isInstance(e, t) {
                            return e instanceof t || (null != e && null != e.constructor && null != e.constructor.name && e.constructor.name === t.name);
                        }
                        function numberIsNaN(e) {
                            return e != e;
                        }
                    }.call(this));
                }.call(this, require("buffer").Buffer));
            },
            { "base64-js": 183, buffer: 184, ieee754: 185 },
        ],
        185: [
            function (require, module, exports) {
                (exports.read = function (a, o, t, r, h) {
                    var M,
                        p,
                        w = 8 * h - r - 1,
                        f = (1 << w) - 1,
                        e = f >> 1,
                        i = -7,
                        N = t ? h - 1 : 0,
                        n = t ? -1 : 1,
                        s = a[o + N];
                    for (N += n, M = s & ((1 << -i) - 1), s >>= -i, i += w; i > 0; M = 256 * M + a[o + N], N += n, i -= 8);
                    for (p = M & ((1 << -i) - 1), M >>= -i, i += r; i > 0; p = 256 * p + a[o + N], N += n, i -= 8);
                    if (0 === M) M = 1 - e;
                    else {
                        if (M === f) return p ? NaN : (1 / 0) * (s ? -1 : 1);
                        (p += Math.pow(2, r)), (M -= e);
                    }
                    return (s ? -1 : 1) * p * Math.pow(2, M - r);
                }),
                    (exports.write = function (a, o, t, r, h, M) {
                        var p,
                            w,
                            f,
                            e = 8 * M - h - 1,
                            i = (1 << e) - 1,
                            N = i >> 1,
                            n = 23 === h ? Math.pow(2, -24) - Math.pow(2, -77) : 0,
                            s = r ? 0 : M - 1,
                            u = r ? 1 : -1,
                            l = o < 0 || (0 === o && 1 / o < 0) ? 1 : 0;
                        for (
                            o = Math.abs(o),
                                isNaN(o) || o === 1 / 0
                                    ? ((w = isNaN(o) ? 1 : 0), (p = i))
                                    : ((p = Math.floor(Math.log(o) / Math.LN2)),
                                      o * (f = Math.pow(2, -p)) < 1 && (p--, (f *= 2)),
                                      (o += p + N >= 1 ? n / f : n * Math.pow(2, 1 - N)) * f >= 2 && (p++, (f /= 2)),
                                      p + N >= i ? ((w = 0), (p = i)) : p + N >= 1 ? ((w = (o * f - 1) * Math.pow(2, h)), (p += N)) : ((w = o * Math.pow(2, N - 1) * Math.pow(2, h)), (p = 0)));
                            h >= 8;
                            a[t + s] = 255 & w, s += u, w /= 256, h -= 8
                        );
                        for (p = (p << h) | w, e += h; e > 0; a[t + s] = 255 & p, s += u, p /= 256, e -= 8);
                        a[t + s - u] |= 128 * l;
                    });
            },
            {},
        ],
        186: [
            function (require, module, exports) {
                var cachedSetTimeout,
                    cachedClearTimeout,
                    process = (module.exports = {});
                function defaultSetTimout() {
                    throw new Error("setTimeout has not been defined");
                }
                function defaultClearTimeout() {
                    throw new Error("clearTimeout has not been defined");
                }
                function runTimeout(e) {
                    if (cachedSetTimeout === setTimeout) return setTimeout(e, 0);
                    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) return (cachedSetTimeout = setTimeout), setTimeout(e, 0);
                    try {
                        return cachedSetTimeout(e, 0);
                    } catch (t) {
                        try {
                            return cachedSetTimeout.call(null, e, 0);
                        } catch (t) {
                            return cachedSetTimeout.call(this, e, 0);
                        }
                    }
                }
                function runClearTimeout(e) {
                    if (cachedClearTimeout === clearTimeout) return clearTimeout(e);
                    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) return (cachedClearTimeout = clearTimeout), clearTimeout(e);
                    try {
                        return cachedClearTimeout(e);
                    } catch (t) {
                        try {
                            return cachedClearTimeout.call(null, e);
                        } catch (t) {
                            return cachedClearTimeout.call(this, e);
                        }
                    }
                }
                !(function () {
                    try {
                        cachedSetTimeout = "function" == typeof setTimeout ? setTimeout : defaultSetTimout;
                    } catch (e) {
                        cachedSetTimeout = defaultSetTimout;
                    }
                    try {
                        cachedClearTimeout = "function" == typeof clearTimeout ? clearTimeout : defaultClearTimeout;
                    } catch (e) {
                        cachedClearTimeout = defaultClearTimeout;
                    }
                })();
                var currentQueue,
                    queue = [],
                    draining = !1,
                    queueIndex = -1;
                function cleanUpNextTick() {
                    draining && currentQueue && ((draining = !1), currentQueue.length ? (queue = currentQueue.concat(queue)) : (queueIndex = -1), queue.length && drainQueue());
                }
                function drainQueue() {
                    if (!draining) {
                        var e = runTimeout(cleanUpNextTick);
                        draining = !0;
                        for (var t = queue.length; t; ) {
                            for (currentQueue = queue, queue = []; ++queueIndex < t; ) currentQueue && currentQueue[queueIndex].run();
                            (queueIndex = -1), (t = queue.length);
                        }
                        (currentQueue = null), (draining = !1), runClearTimeout(e);
                    }
                }
                function Item(e, t) {
                    (this.fun = e), (this.array = t);
                }
                function noop() {}
                (process.nextTick = function (e) {
                    var t = new Array(arguments.length - 1);
                    if (arguments.length > 1) for (var r = 1; r < arguments.length; r++) t[r - 1] = arguments[r];
                    queue.push(new Item(e, t)), 1 !== queue.length || draining || runTimeout(drainQueue);
                }),
                    (Item.prototype.run = function () {
                        this.fun.apply(null, this.array);
                    }),
                    (process.title = "browser"),
                    (process.browser = !0),
                    (process.env = {}),
                    (process.argv = []),
                    (process.version = ""),
                    (process.versions = {}),
                    (process.on = noop),
                    (process.addListener = noop),
                    (process.once = noop),
                    (process.off = noop),
                    (process.removeListener = noop),
                    (process.removeAllListeners = noop),
                    (process.emit = noop),
                    (process.prependListener = noop),
                    (process.prependOnceListener = noop),
                    (process.listeners = function (e) {
                        return [];
                    }),
                    (process.binding = function (e) {
                        throw new Error("process.binding is not supported");
                    }),
                    (process.cwd = function () {
                        return "/";
                    }),
                    (process.chdir = function (e) {
                        throw new Error("process.chdir is not supported");
                    }),
                    (process.umask = function () {
                        return 0;
                    });
            },
            {},
        ],
        187: [
            function (require, module, exports) {
                !(function () {
                    var o = "0123456789abcdef",
                        r = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
                        e = [];
                    e.length = 256;
                    for (var t = 0; t < 256; t++) e[t] = o[t >> 4] + o[15 & t];
                    var a = [];
                    a.length = 128;
                    for (t = 0; t < r.length; ++t) a[r.charCodeAt(t)] = t;
                    var h = [];
                    for (t = 0; t < 16; t++) h[o.charCodeAt(t)] = t;
                    for (t = 0; t < 6; t++) h["ABCDEF".charCodeAt(t)] = 10 + t;
                    var d = {
                        toHex: function (o) {
                            if (22 !== o.length) return null;
                            var r,
                                t,
                                h,
                                d,
                                c,
                                A = 2.3283064365386963e-10,
                                C = 4294967296,
                                f = 238328;
                            return (
                                (r =
                                    56800235584 * a[o.charCodeAt(0)] + 916132832 * a[o.charCodeAt(1)] + 14776336 * a[o.charCodeAt(2)] + 238328 * a[o.charCodeAt(3)] + 3844 * a[o.charCodeAt(4)] + 62 * a[o.charCodeAt(5)] + a[o.charCodeAt(6)]),
                                (r = (r -= (t = (r * A) | 0) * C) * f + (c = 3844 * a[o.charCodeAt(7)] + 62 * a[o.charCodeAt(8)] + a[o.charCodeAt(9)])),
                                (r -= (c = (r * A) | 0) * C),
                                (t = t * f + c),
                                (r = r * f + (c = 3844 * a[o.charCodeAt(10)] + 62 * a[o.charCodeAt(11)] + a[o.charCodeAt(12)])),
                                (r -= (c = (r * A) | 0) * C),
                                (t = t * f + c),
                                (t -= (c = (t * A) | 0) * C),
                                (h = c),
                                (r = r * f + (c = 3844 * a[o.charCodeAt(13)] + 62 * a[o.charCodeAt(14)] + a[o.charCodeAt(15)])),
                                (r -= (c = (r * A) | 0) * C),
                                (t = t * f + c),
                                (t -= (c = (t * A) | 0) * C),
                                (h = h * f + c),
                                (r = r * f + (c = 3844 * a[o.charCodeAt(16)] + 62 * a[o.charCodeAt(17)] + a[o.charCodeAt(18)])),
                                (r -= (c = (r * A) | 0) * C),
                                (t = t * f + c),
                                (t -= (c = (t * A) | 0) * C),
                                (h = h * f + c),
                                (h -= (c = (h * A) | 0) * C),
                                (d = c),
                                (r = r * f + (c = 3844 * a[o.charCodeAt(19)] + 62 * a[o.charCodeAt(20)] + a[o.charCodeAt(21)])),
                                (r -= (c = (r * A) | 0) * C),
                                (t = t * f + c),
                                (t -= (c = (t * A) | 0) * C),
                                (h = h * f + c),
                                (h -= (c = (h * A) | 0) * C),
                                (d = d * f + c),
                                (d -= (c = (d * A) | 0) * C),
                                c
                                    ? null
                                    : e[d >>> 24] +
                                      e[(d >>> 16) & 255] +
                                      e[(d >>> 8) & 255] +
                                      e[255 & d] +
                                      e[h >>> 24] +
                                      e[(h >>> 16) & 255] +
                                      e[(h >>> 8) & 255] +
                                      e[255 & h] +
                                      e[t >>> 24] +
                                      e[(t >>> 16) & 255] +
                                      e[(t >>> 8) & 255] +
                                      e[255 & t] +
                                      e[r >>> 24] +
                                      e[(r >>> 16) & 255] +
                                      e[(r >>> 8) & 255] +
                                      e[255 & r]
                            );
                        },
                        fromHex: function (o) {
                            var e,
                                t = 0,
                                a = 0,
                                d = 0;
                            for (e = 0; e < 10; e++) d = 16 * d + h[o.charCodeAt(e)];
                            for (e = 0; e < 11; e++) a = 16 * a + h[o.charCodeAt(e + 10)];
                            for (e = 0; e < 11; e++) t = 16 * t + h[o.charCodeAt(e + 21)];
                            if (isNaN(t + a + d)) return null;
                            var c,
                                A = 17592186044416,
                                C = "";
                            for (e = 0; e < 7; ++e) (c = ((c = ((c = d) - 62 * (d = Math.floor(c * (1 / 62)))) * A + a) - 62 * (a = Math.floor(c * (1 / 62)))) * A + t), (t = Math.floor(c * (1 / 62))), (C = r[c - 62 * t] + C);
                            for (a += d * A; e < 15; ++e) (c = ((c = a) - 62 * (a = Math.floor(c * (1 / 62)))) * A + t), (t = Math.floor(c * (1 / 62))), (C = r[c - 62 * t] + C);
                            for (t += a * A; e < 21; ++e) (c = t), (t = Math.floor(c * (1 / 62))), (C = r[c - 62 * t] + C);
                            return r[t] + C;
                        },
                        HEX256: e,
                        ID16: h,
                        ID62: a,
                    };
                    "undefined" != typeof module && void 0 !== module.exports ? (module.exports = d) : (window.Base62 = d);
                })();
            },
            {},
        ],
        188: [
            function (require, module, exports) {
                "use strict";
                var SplittedURI,
                    Base62 = require("./base62"),
                    URI_PREFIX = "spotify:",
                    PLAY_HTTP_PREFIX = "http://play.spotify.com/",
                    PLAY_HTTPS_PREFIX = "https://play.spotify.com/",
                    OPEN_HTTP_PREFIX = "http://open.spotify.com/",
                    OPEN_HTTPS_PREFIX = "https://open.spotify.com/",
                    PATH_PREFIX = "/",
                    ERROR_INVALID = new TypeError("Invalid Spotify URI!"),
                    ERROR_NOT_IMPLEMENTED = new TypeError("Not implemented!"),
                    Format = { URI: 0, URL: 1 },
                    _splitIntoComponents = function (e) {
                        var I,
                            t,
                            n,
                            R,
                            r = e.split("?");
                        if (r.length > 1) {
                            e = r.shift();
                            var o = (n = r.pop()).split("#");
                            o.length > 1 && ((n = o.shift()), (R = o.pop())), (n = decodeQueryString(n));
                        }
                        var U = e.split("#");
                        if ((U.length > 1 && ((e = U.shift()), (R = U.pop())), 0 === e.indexOf(URI_PREFIX))) (I = e.slice(URI_PREFIX.length).split(":")), (t = Format.URI);
                        else {
                            if (0 === (e = e.split("?")[0]).indexOf(PLAY_HTTP_PREFIX)) I = e.slice(PLAY_HTTP_PREFIX.length).split("/");
                            else if (0 === e.indexOf(PLAY_HTTPS_PREFIX)) I = e.slice(PLAY_HTTPS_PREFIX.length).split("/");
                            else if (0 === e.indexOf(OPEN_HTTP_PREFIX)) I = e.slice(OPEN_HTTP_PREFIX.length).split("/");
                            else if (0 === e.indexOf(OPEN_HTTPS_PREFIX)) I = e.slice(OPEN_HTTPS_PREFIX.length).split("/");
                            else {
                                if (0 !== e.indexOf(PATH_PREFIX)) throw ERROR_INVALID;
                                I = e.slice(PATH_PREFIX.length).split("/");
                            }
                            t = Format.URL;
                        }
                        return R && I.push(R), { format: t, components: I, query: n };
                    },
                    _encodeComponent = function (e, I) {
                        return (e = encodeURIComponent(e)), I === Format.URI && (e = e.replace(/%20/g, "+")), (e = (e = e.replace(/[!'()]/g, escape)).replace(/\*/g, "%2A"));
                    },
                    _decodeComponent = function (e, I) {
                        var t = I == Format.URI ? e.replace(/\+/g, "%20") : e;
                        return decodeURIComponent(t);
                    },
                    _getComponents = function (e, I) {
                        var t, n, R, r;
                        switch ((e.id && (t = e._base62Id), e.type)) {
                            case URI.Type.ALBUM:
                                return (n = [URI.Type.ALBUM, t]), e.disc && n.push(e.disc), n;
                            case URI.Type.AD:
                                return [URI.Type.AD, e._base62Id];
                            case URI.Type.ARTIST:
                                return [URI.Type.ARTIST, t];
                            case URI.Type.ARTIST_TOPLIST:
                                return [URI.Type.ARTIST, t, URI.Type.TOP, e.toplist];
                            case URI.Type.DAILY_MIX:
                                return [URI.Type.DAILY_MIX, t];
                            case URI.Type.SEARCH:
                                return [URI.Type.SEARCH, _encodeComponent(e.query, I)];
                            case URI.Type.TRACK:
                                return (e.context || e.play) && (t += encodeQueryString({ context: e.context, play: e.play })), e.anchor && (t += "#" + e.anchor), [URI.Type.TRACK, t];
                            case URI.Type.TRACKSET:
                                var o = [];
                                for (R = 0, r = e.tracks.length; R < r; R++) o.push(e.tracks[R]._base62Id);
                                return (o = [o.join(",")]), null !== e.index && o.push("#", e.index), [URI.Type.TRACKSET, _encodeComponent(e.name)].concat(o);
                            case URI.Type.FACEBOOK:
                                return [URI.Type.USER, URI.Type.FACEBOOK, e.uid];
                            case URI.Type.AUDIO_FILE:
                                return [URI.Type.AUDIO_FILE, e.extension, e._base62Id];
                            case URI.Type.FOLDER:
                                return [URI.Type.USER, _encodeComponent(e.username, I), URI.Type.FOLDER, e._base62Id];
                            case URI.Type.FOLLOWERS:
                                return [URI.Type.USER, _encodeComponent(e.username, I), URI.Type.FOLLOWERS];
                            case URI.Type.FOLLOWING:
                                return [URI.Type.USER, _encodeComponent(e.username, I), URI.Type.FOLLOWING];
                            case URI.Type.PLAYLIST:
                                return [URI.Type.USER, _encodeComponent(e.username, I), URI.Type.PLAYLIST, t];
                            case URI.Type.PLAYLIST_V2:
                                return [URI.Type.PLAYLIST, t];
                            case URI.Type.STARRED:
                                return [URI.Type.USER, _encodeComponent(e.username, I), URI.Type.STARRED];
                            case URI.Type.TEMP_PLAYLIST:
                                return [URI.Type.TEMP_PLAYLIST, e.origin, e.data];
                            case URI.Type.CONTEXT_GROUP:
                                return [URI.Type.CONTEXT_GROUP, e.origin, e.name];
                            case URI.Type.USER_TOPLIST:
                                return [URI.Type.USER, _encodeComponent(e.username, I), URI.Type.TOP, e.toplist];
                            case URI.Type.USER_TOP_TRACKS:
                                return [URI.Type.USER, _encodeComponent(e.username, I), URI.Type.TOPLIST];
                            case URI.Type.TOPLIST:
                                return [URI.Type.TOP, e.toplist].concat(e.global ? [URI.Type.GLOBAL] : ["country", e.country]);
                            case URI.Type.INBOX:
                                return [URI.Type.USER, _encodeComponent(e.username, I), URI.Type.INBOX];
                            case URI.Type.ROOTLIST:
                                return [URI.Type.USER, _encodeComponent(e.username, I), URI.Type.ROOTLIST];
                            case URI.Type.PUBLISHED_ROOTLIST:
                                return [URI.Type.USER, _encodeComponent(e.username, I), URI.Type.PUBLISHED_ROOTLIST];
                            case URI.Type.COLLECTION_TRACK_LIST:
                                return [URI.Type.USER, _encodeComponent(e.username, I), URI.Type.COLLECTION_TRACK_LIST, t];
                            case URI.Type.PROFILE:
                                return e.args && e.args.length > 0 ? [URI.Type.USER, _encodeComponent(e.username, I)].concat(e.args) : [URI.Type.USER, _encodeComponent(e.username, I)];
                            case URI.Type.LOCAL_ARTIST:
                                return [URI.Type.LOCAL, _encodeComponent(e.artist, I)];
                            case URI.Type.LOCAL_ALBUM:
                                return [URI.Type.LOCAL, _encodeComponent(e.artist, I), _encodeComponent(e.album, I)];
                            case URI.Type.LOCAL:
                                return [URI.Type.LOCAL, _encodeComponent(e.artist, I), _encodeComponent(e.album, I), _encodeComponent(e.track, I), e.duration];
                            case URI.Type.LIBRARY:
                                return [URI.Type.USER, _encodeComponent(e.username, I), URI.Type.LIBRARY].concat(e.category ? [e.category] : []);
                            case URI.Type.IMAGE:
                                return [URI.Type.IMAGE, e._base62Id];
                            case URI.Type.MOSAIC:
                                return (n = e.ids.slice(0)).unshift(URI.Type.MOSAIC), n;
                            case URI.Type.RADIO:
                                return [URI.Type.RADIO, e.args];
                            case URI.Type.SPECIAL:
                                for (n = [URI.Type.SPECIAL], R = 0, r = (U = e.args || []).length; R < r; ++R) n.push(_encodeComponent(U[R], I));
                                return n;
                            case URI.Type.STATION:
                                for (n = [URI.Type.STATION], R = 0, r = (U = e.args || []).length; R < r; R++) n.push(_encodeComponent(U[R], I));
                                return n;
                            case URI.Type.APPLICATION:
                                var U;
                                for (n = [URI.Type.APP, e._base62Id], R = 0, r = (U = e.args || []).length; R < r; ++R) n.push(_encodeComponent(U[R], I));
                                return n;
                            case URI.Type.COLLECTION_ALBUM:
                                return [URI.Type.USER, _encodeComponent(e.username, I), URI.Type.COLLECTION, URI.Type.ALBUM, t];
                            case URI.Type.COLLECTION_MISSING_ALBUM:
                                return [URI.Type.USER, _encodeComponent(e.username, I), URI.Type.COLLECTION, URI.Type.ALBUM, t, "missing"];
                            case URI.Type.COLLECTION_ARTIST:
                                return [URI.Type.USER, _encodeComponent(e.username, I), URI.Type.COLLECTION, URI.Type.ARTIST, t];
                            case URI.Type.COLLECTION:
                                return [URI.Type.USER, _encodeComponent(e.username, I), URI.Type.COLLECTION].concat(e.category ? [e.category] : []);
                            case URI.Type.EPISODE:
                                return (e.context || e.play) && (t += encodeQueryString({ context: e.context, play: e.play })), [URI.Type.EPISODE, t];
                            case URI.Type.SHOW:
                                return [URI.Type.SHOW, t];
                            case URI.Type.LIVE:
                                return [URI.Type.LIVE, t];
                            case URI.Type.CONCERT:
                                return [URI.Type.CONCERT, t];
                            case URI.Type.SOCIAL_SESSION:
                                return [URI.Type.SOCIAL_SESSION, t];
                            case URI.Type.INTERRUPTION:
                                return [URI.Type.INTERRUPTION, e.id];
                            default:
                                throw ERROR_INVALID;
                        }
                    },
                    encodeQueryString = function (e) {
                        var I = "?";
                        for (var t in e) e.hasOwnProperty(t) && void 0 !== e[t] && (I.length > 1 && (I += "&"), (I += t + "=" + encodeURIComponent(e[t])));
                        return I;
                    },
                    decodeQueryString = function (e) {
                        return e.split("&").reduce(function (e, I) {
                            return (e[(I = I.split("="))[0]] = decodeURIComponent(I[1])), e;
                        }, {});
                    },
                    _parseFromComponents = function (e, I, t) {
                        var n = 0;
                        t = t || {};
                        var R,
                            r,
                            o,
                            U = function () {
                                return e[n++];
                            },
                            p = function () {
                                var e = U();
                                if (!e || e.length > 22) throw ERROR_INVALID;
                                return e;
                            },
                            T = function () {
                                var e = U();
                                if (!e || 22 !== e.length) throw ERROR_INVALID;
                                return e;
                            },
                            i = function () {
                                return e.slice(n);
                            },
                            s = function () {
                                var t = I == Format.URI ? ":" : "/";
                                return e.slice(n).join(t);
                            },
                            u = U();
                        switch (u) {
                            case URI.Type.ALBUM:
                                return URI.albumURI(T(), parseInt(U(), 10));
                            case URI.Type.AD:
                                return URI.adURI(U());
                            case URI.Type.ARTIST:
                                return (R = T()), U() == URI.Type.TOP ? URI.artistToplistURI(R, U()) : URI.artistURI(R);
                            case URI.Type.AUDIO_FILE:
                                return URI.audioFileURI(U(), U());
                            case URI.Type.DAILY_MIX:
                                return URI.dailyMixURI(p());
                            case URI.Type.TEMP_PLAYLIST:
                                return URI.temporaryPlaylistURI(U(), s());
                            case URI.Type.PLAYLIST:
                                return URI.playlistV2URI(T());
                            case URI.Type.SEARCH:
                                return URI.searchURI(_decodeComponent(s(), I));
                            case URI.Type.TRACK:
                                return URI.trackURI(T(), U(), t.context, t.play);
                            case URI.Type.TRACKSET:
                                var a = _decodeComponent(U()),
                                    c = U(),
                                    y = U(),
                                    L = parseInt(U(), 10);
                                ("%23" !== y || isNaN(L)) && (L = null);
                                var l = [];
                                if (c)
                                    for (r = 0, o = (c = _decodeComponent(c).split(",")).length; r < o; r++) {
                                        var O = c[r];
                                        l.push(URI.trackURI(O));
                                    }
                                return URI.tracksetURI(l, a, L);
                            case URI.Type.CONTEXT_GROUP:
                                return URI.contextGroupURI(U(), U());
                            case URI.Type.TOP:
                                var f = U();
                                return U() == URI.Type.GLOBAL ? URI.toplistURI(f, null, !0) : URI.toplistURI(f, U(), !1);
                            case URI.Type.USER:
                                var A = _decodeComponent(U(), I),
                                    S = U();
                                if (A === URI.Type.FACEBOOK && S) return URI.facebookURI(parseInt(S, 10));
                                if (S)
                                    switch (S) {
                                        case URI.Type.PLAYLIST:
                                            return URI.playlistURI(A, T());
                                        case URI.Type.FOLDER:
                                            return URI.folderURI(A, p());
                                        case URI.Type.COLLECTION_TRACK_LIST:
                                            return URI.collectionTrackList(A, p());
                                        case URI.Type.COLLECTION:
                                            var C = U();
                                            switch (C) {
                                                case URI.Type.ALBUM:
                                                    return (R = p()), "missing" === U() ? URI.collectionMissingAlbumURI(A, R) : URI.collectionAlbumURI(A, R);
                                                case URI.Type.ARTIST:
                                                    return URI.collectionArtistURI(A, p());
                                                default:
                                                    return URI.collectionURI(A, C);
                                            }
                                        case URI.Type.STARRED:
                                            return URI.starredURI(A);
                                        case URI.Type.FOLLOWERS:
                                            return URI.followersURI(A);
                                        case URI.Type.FOLLOWING:
                                            return URI.followingURI(A);
                                        case URI.Type.TOP:
                                            return URI.userToplistURI(A, U());
                                        case URI.Type.INBOX:
                                            return URI.inboxURI(A);
                                        case URI.Type.ROOTLIST:
                                            return URI.rootlistURI(A);
                                        case URI.Type.PUBLISHED_ROOTLIST:
                                            return URI.publishedRootlistURI(A);
                                        case URI.Type.TOPLIST:
                                            return URI.userTopTracksURI(A);
                                        case URI.Type.LIBRARY:
                                            return URI.libraryURI(A, U());
                                    }
                                var m = i();
                                if (S && m.length > 0) return URI.profileURI(A, [S].concat(m));
                                if (S) return URI.profileURI(A, [S]);
                                if (A) return URI.profileURI(A);
                                throw ERROR_INVALID;
                            case URI.Type.LOCAL:
                                var E = U(),
                                    _ = E && _decodeComponent(E, I),
                                    d = U(),
                                    P = d && _decodeComponent(d, I),
                                    h = U(),
                                    g = h && _decodeComponent(h, I),
                                    N = U(),
                                    F = parseInt(N, 10);
                                return void 0 !== h ? URI.localURI(_, P, g, F) : void 0 !== d ? URI.localAlbumURI(_, P) : URI.localArtistURI(_);
                            case URI.Type.IMAGE:
                                return URI.imageURI(p());
                            case URI.Type.MOSAIC:
                                return URI.mosaicURI(e.slice(n));
                            case URI.Type.RADIO:
                                return URI.radioURI(s());
                            case URI.Type.SPECIAL:
                                for (r = 0, o = (w = i()).length; r < o; ++r) w[r] = _decodeComponent(w[r], I);
                                return URI.specialURI(w);
                            case URI.Type.STATION:
                                return URI.stationURI(i());
                            case URI.Type.EPISODE:
                                return URI.episodeURI(T(), t.context, t.play);
                            case URI.Type.SHOW:
                                return URI.showURI(T());
                            case URI.Type.LIVE:
                                return URI.liveURI(p());
                            case URI.Type.CONCERT:
                                return URI.concertURI(p());
                            case "":
                                break;
                            case URI.Type.SOCIAL_SESSION:
                                return URI.socialSessionURI(U());
                            case URI.Type.INTERRUPTION:
                                return URI.interruptionURI(U());
                            default:
                                R = u === URI.Type.APP ? U() : u;
                                var w,
                                    v = _decodeComponent(R, I);
                                if (_encodeComponent(v, I) !== R) break;
                                for (r = 0, o = (w = i()).length; r < o; ++r) w[r] = _decodeComponent(w[r], I);
                                return URI.applicationURI(v, w);
                        }
                        throw ERROR_INVALID;
                    };
                function URI(e, I) {
                    for (var t in ((this.type = e), I)) "function" != typeof I[t] && (this[t] = I[t]);
                }
                Object.defineProperty(URI.prototype, "id", {
                    get: function () {
                        return this._hexId || (this._hexId = this._base62Id ? URI.idToHex(this._base62Id) : void 0), this._hexId;
                    },
                    set: function (e) {
                        (this._base62Id = e ? URI.hexToId(e) : void 0), (this._hexId = void 0);
                    },
                    enumerable: !0,
                    configurable: !0,
                }),
                    (URI.prototype.toAppType = function () {
                        if (this.type == URI.Type.APPLICATION) return URI.applicationURI(this.id, this.args);
                        var e = _getComponents(this, Format.URL),
                            I = e.shift(),
                            t = e.length;
                        if (t) for (; t--; ) e[t] = _decodeComponent(e[t], Format.URL);
                        return this.type == URI.Type.RADIO && (e = e.shift().split(":")), URI.applicationURI(I, e);
                    }),
                    (URI.prototype.toRealType = function () {
                        return this.type == URI.Type.APPLICATION ? _parseFromComponents([this.id].concat(this.args), Format.URI) : new URI(null, this);
                    }),
                    (URI.prototype.toURI = function () {
                        return URI_PREFIX + _getComponents(this, Format.URI).join(":");
                    }),
                    (URI.prototype.toString = function () {
                        return this.toURI();
                    }),
                    (URI.prototype.toURLPath = function (e) {
                        var I = _getComponents(this, Format.URL);
                        I[0] === URI.Type.APP && I.shift();
                        var t = I[0] === URI.Type.TRACKSET,
                            n = I[0] === URI.Type.LOCAL;
                        if (!t && !n) {
                            for (var R = [], r = 0, o = I.length; r < o; r++) {
                                var U = I[r];
                                U && R.push(U);
                            }
                            I = R;
                        }
                        var p = I.join("/");
                        return e ? "/" + p : p;
                    }),
                    (URI.prototype.toPlayURL = function () {
                        return PLAY_HTTPS_PREFIX + this.toURLPath();
                    }),
                    (URI.prototype.toURL = function () {
                        return this.toPlayURL();
                    }),
                    (URI.prototype.toOpenURL = function () {
                        return OPEN_HTTPS_PREFIX + this.toURLPath();
                    }),
                    (URI.prototype.toSecurePlayURL = function () {
                        return this.toPlayURL();
                    }),
                    (URI.prototype.toSecureURL = function () {
                        return this.toPlayURL();
                    }),
                    (URI.prototype.toSecureOpenURL = function () {
                        return this.toOpenURL();
                    }),
                    (URI.prototype.idToByteString = function () {
                        var e = Base62.toHex(this._base62Id);
                        if (!e) {
                            for (var I = "", t = 0; t < 16; t++) I += String.fromCharCode(0);
                            return I;
                        }
                        var n = "";
                        for (t = 0; t < 32; t += 2) {
                            var R = (Base62.ID16[e.charCodeAt(t)] << 4) + Base62.ID16[e.charCodeAt(t + 1)];
                            n += String.fromCharCode(R);
                        }
                        return n;
                    }),
                    (URI.prototype.getPath = function () {
                        return this.toString().replace(/[#?].*/, "");
                    }),
                    (URI.prototype.getBase62Id = function () {
                        return this._base62Id;
                    }),
                    (URI.prototype.isSameIdentity = function (e) {
                        var I = URI.from(e);
                        if (!I) return !1;
                        if (this.toString() === e.toString()) return !0;
                        if ((this.type !== URI.Type.PLAYLIST && this.type !== URI.Type.PLAYLIST_V2) || (I.type !== URI.Type.PLAYLIST && I.type !== URI.Type.PLAYLIST_V2)) {
                            if (this.type === URI.Type.STATION && I.type === URI.Type.STATION) {
                                var t = _parseFromComponents(this.args, Format.URI);
                                return !!t && t.isSameIdentity(_parseFromComponents(I.args, Format.URI));
                            }
                            return !1;
                        }
                        return this.id === I.id;
                    }),
                    (URI.Type = {
                        EMPTY: "empty",
                        ALBUM: "album",
                        AD: "ad",
                        APP: "app",
                        APPLICATION: "application",
                        ARTIST: "artist",
                        ARTIST_TOPLIST: "artist-toplist",
                        AUDIO_FILE: "audiofile",
                        COLLECTION: "collection",
                        COLLECTION_ALBUM: "collection-album",
                        COLLECTION_MISSING_ALBUM: "collection-missing-album",
                        COLLECTION_ARTIST: "collection-artist",
                        CONTEXT_GROUP: "context-group",
                        DAILY_MIX: "dailymix",
                        EPISODE: "episode",
                        FACEBOOK: "facebook",
                        FOLDER: "folder",
                        FOLLOWERS: "followers",
                        FOLLOWING: "following",
                        GLOBAL: "global",
                        IMAGE: "image",
                        INBOX: "inbox",
                        INTERRUPTION: "interruption",
                        LOCAL_ARTIST: "local-artist",
                        LOCAL_ALBUM: "local-album",
                        LOCAL: "local",
                        LIBRARY: "library",
                        LIVE: "live",
                        MOSAIC: "mosaic",
                        PLAYLIST: "playlist",
                        PLAYLIST_V2: "playlist-v2",
                        PROFILE: "profile",
                        PUBLISHED_ROOTLIST: "published-rootlist",
                        RADIO: "radio",
                        ROOTLIST: "rootlist",
                        COLLECTION_TRACK_LIST: "collectiontracklist",
                        SEARCH: "search",
                        SHOW: "show",
                        SOCIAL_SESSION: "socialsession",
                        CONCERT: "concert",
                        SPECIAL: "special",
                        STARRED: "starred",
                        STATION: "station",
                        TEMP_PLAYLIST: "temp-playlist",
                        TOP: "top",
                        TOPLIST: "toplist",
                        TRACK: "track",
                        TRACKSET: "trackset",
                        USER: "user",
                        USER_TOPLIST: "user-toplist",
                        USER_TOP_TRACKS: "user-top-tracks",
                        USET_TOP_TRACKS: "user-top-tracks",
                    }),
                    (URI.fromString = function (e) {
                        var I = _splitIntoComponents(e);
                        return _parseFromComponents(I.components, I.format, I.query);
                    }),
                    (URI.from = function (e) {
                        try {
                            return e instanceof URI ? e : "object" == typeof e && e.type ? new URI(null, e) : URI.fromString(e.toString());
                        } catch (e) {
                            return null;
                        }
                    }),
                    (URI.fromByteString = function (e, I, t) {
                        for (; 16 != I.length; ) I = String.fromCharCode(0) + I;
                        for (var n = "", R = 0; R < I.length; R++) {
                            var r = I.charCodeAt(R);
                            n += Base62.HEX256[r];
                        }
                        var o = Base62.fromHex(n),
                            U = t || {};
                        return (U.id = o), new URI(e, U);
                    }),
                    (URI.clone = function (e) {
                        return e instanceof URI ? new URI(null, e) : null;
                    }),
                    (URI.getCanonical = function (e) {
                        return this.getCanonical(e);
                    }),
                    (URI.getCanonicalUsername = function (e) {
                        return _encodeComponent(e, Format.URI);
                    }),
                    (URI.getDisplayUsername = function (e) {
                        return _decodeComponent(e, Format.URI);
                    }),
                    (URI.idToHex = function (e) {
                        return 22 == e.length ? Base62.toHex(e) : e;
                    }),
                    (URI.hexToId = function (e) {
                        return 32 == e.length ? Base62.fromHex(e) : e;
                    }),
                    (URI.emptyURI = function () {
                        return new URI(URI.Type.EMPTY, {});
                    }),
                    (URI.albumURI = function (e, I) {
                        return new URI(URI.Type.ALBUM, { id: e, disc: I });
                    }),
                    (URI.adURI = function (e) {
                        return new URI(URI.Type.AD, { id: e });
                    }),
                    (URI.audioFileURI = function (e, I) {
                        return new URI(URI.Type.AUDIO_FILE, { id: I, extension: e });
                    }),
                    (URI.artistURI = function (e) {
                        return new URI(URI.Type.ARTIST, { id: e });
                    }),
                    (URI.artistToplistURI = function (e, I) {
                        return new URI(URI.Type.ARTIST_TOPLIST, { id: e, toplist: I });
                    }),
                    (URI.dailyMixURI = function (e) {
                        return new URI(URI.Type.DAILY_MIX, { id: e });
                    }),
                    (URI.searchURI = function (e) {
                        return new URI(URI.Type.SEARCH, { query: e });
                    }),
                    (URI.trackURI = function (e, I, t, n) {
                        return new URI(URI.Type.TRACK, { id: e, anchor: I, context: t ? URI.fromString(t) : t, play: n });
                    }),
                    (URI.tracksetURI = function (e, I, t) {
                        return new URI(URI.Type.TRACKSET, { tracks: e, name: I || "", index: isNaN(t) ? null : t });
                    }),
                    (URI.facebookURI = function (e) {
                        return new URI(URI.Type.FACEBOOK, { uid: e });
                    }),
                    (URI.followersURI = function (e) {
                        return new URI(URI.Type.FOLLOWERS, { username: e });
                    }),
                    (URI.followingURI = function (e) {
                        return new URI(URI.Type.FOLLOWING, { username: e });
                    }),
                    (URI.playlistURI = function (e, I) {
                        return new URI(URI.Type.PLAYLIST, { username: e, id: I });
                    }),
                    (URI.playlistV2URI = function (e) {
                        return new URI(URI.Type.PLAYLIST_V2, { id: e });
                    }),
                    (URI.folderURI = function (e, I) {
                        return new URI(URI.Type.FOLDER, { username: e, id: I });
                    }),
                    (URI.collectionTrackList = function (e, I) {
                        return new URI(URI.Type.COLLECTION_TRACK_LIST, { username: e, id: I });
                    }),
                    (URI.starredURI = function (e) {
                        return new URI(URI.Type.STARRED, { username: e });
                    }),
                    (URI.userToplistURI = function (e, I) {
                        return new URI(URI.Type.USER_TOPLIST, { username: e, toplist: I });
                    }),
                    (URI.userTopTracksURI = function (e) {
                        return new URI(URI.Type.USER_TOP_TRACKS, { username: e });
                    }),
                    (URI.toplistURI = function (e, I, t) {
                        return new URI(URI.Type.TOPLIST, { toplist: e, country: I, global: !!t });
                    }),
                    (URI.inboxURI = function (e) {
                        return new URI(URI.Type.INBOX, { username: e });
                    }),
                    (URI.rootlistURI = function (e) {
                        return new URI(URI.Type.ROOTLIST, { username: e });
                    }),
                    (URI.publishedRootlistURI = function (e) {
                        return new URI(URI.Type.PUBLISHED_ROOTLIST, { username: e });
                    }),
                    (URI.localArtistURI = function (e) {
                        return new URI(URI.Type.LOCAL_ARTIST, { artist: e });
                    }),
                    (URI.localAlbumURI = function (e, I) {
                        return new URI(URI.Type.LOCAL_ALBUM, { artist: e, album: I });
                    }),
                    (URI.localURI = function (e, I, t, n) {
                        return new URI(URI.Type.LOCAL, { artist: e, album: I, track: t, duration: n });
                    }),
                    (URI.libraryURI = function (e, I) {
                        return new URI(URI.Type.LIBRARY, { username: e, category: I });
                    }),
                    (URI.collectionURI = function (e, I) {
                        return new URI(URI.Type.COLLECTION, { username: e, category: I });
                    }),
                    (URI.temporaryPlaylistURI = function (e, I) {
                        return new URI(URI.Type.TEMP_PLAYLIST, { origin: e, data: I });
                    }),
                    (URI.contextGroupURI = function (e, I) {
                        return new URI(URI.Type.CONTEXT_GROUP, { origin: e, name: I });
                    }),
                    (URI.profileURI = function (e, I) {
                        return new URI(URI.Type.PROFILE, { username: e, args: I });
                    }),
                    (URI.imageURI = function (e) {
                        return new URI(URI.Type.IMAGE, { id: e });
                    }),
                    (URI.mosaicURI = function (e) {
                        return new URI(URI.Type.MOSAIC, { ids: e });
                    }),
                    (URI.radioURI = function (e) {
                        return (e = void 0 === e ? "" : e), new URI(URI.Type.RADIO, { args: e });
                    }),
                    (URI.specialURI = function (e) {
                        return (e = void 0 === e ? [] : e), new URI(URI.Type.SPECIAL, { args: e });
                    }),
                    (URI.stationURI = function (e) {
                        return (e = void 0 === e ? [] : e), new URI(URI.Type.STATION, { args: e });
                    }),
                    (URI.applicationURI = function (e, I) {
                        return (I = void 0 === I ? [] : I), new URI(URI.Type.APPLICATION, { id: e, args: I });
                    }),
                    (URI.collectionAlbumURI = function (e, I) {
                        return new URI(URI.Type.COLLECTION_ALBUM, { username: e, id: I });
                    }),
                    (URI.collectionMissingAlbumURI = function (e, I) {
                        return new URI(URI.Type.COLLECTION_MISSING_ALBUM, { username: e, id: I });
                    }),
                    (URI.collectionArtistURI = function (e, I) {
                        return new URI(URI.Type.COLLECTION_ARTIST, { username: e, id: I });
                    }),
                    (URI.episodeURI = function (e, I, t) {
                        return new URI(URI.Type.EPISODE, { id: e, context: I ? URI.fromString(I) : I, play: t });
                    }),
                    (URI.showURI = function (e) {
                        return new URI(URI.Type.SHOW, { id: e });
                    }),
                    (URI.liveURI = function (e) {
                        return new URI(URI.Type.LIVE, { id: e });
                    }),
                    (URI.concertURI = function (e) {
                        return new URI(URI.Type.CONCERT, { id: e });
                    }),
                    (URI.socialSessionURI = function (e) {
                        return new URI(URI.Type.SOCIAL_SESSION, { id: e });
                    }),
                    (URI.interruptionURI = function (e) {
                        return new URI(URI.Type.INTERRUPTION, { id: e });
                    }),
                    (URI.isAlbum = function (e) {
                        return (URI.from(e) || {}).type === URI.Type.ALBUM;
                    }),
                    (URI.isAd = function (e) {
                        return (URI.from(e) || {}).type === URI.Type.AD;
                    }),
                    (URI.isApplication = function (e) {
                        return (URI.from(e) || {}).type === URI.Type.APPLICATION;
                    }),
                    (URI.isArtist = function (e) {
                        return (URI.from(e) || {}).type === URI.Type.ARTIST;
                    }),
                    (URI.isCollection = function (e) {
                        return (URI.from(e) || {}).type === URI.Type.COLLECTION;
                    }),
                    (URI.isCollectionAlbum = function (e) {
                        return (URI.from(e) || {}).type === URI.Type.COLLECTION_ALBUM;
                    }),
                    (URI.isCollectionArtist = function (e) {
                        return (URI.from(e) || {}).type === URI.Type.COLLECTION_ARTIST;
                    }),
                    (URI.isDailyMix = function (e) {
                        return (URI.from(e) || {}).type === URI.Type.DAILY_MIX;
                    }),
                    (URI.isEpisode = function (e) {
                        return (URI.from(e) || {}).type === URI.Type.EPISODE;
                    }),
                    (URI.isFacebook = function (e) {
                        return (URI.from(e) || {}).type === URI.Type.FACEBOOK;
                    }),
                    (URI.isFolder = function (e) {
                        return (URI.from(e) || {}).type === URI.Type.FOLDER;
                    }),
                    (URI.isLocalArtist = function (e) {
                        return (URI.from(e) || {}).type === URI.Type.LOCAL_ARTIST;
                    }),
                    (URI.isLocalAlbum = function (e) {
                        return (URI.from(e) || {}).type === URI.Type.LOCAL_ALBUM;
                    }),
                    (URI.isLocalTrack = function (e) {
                        return (URI.from(e) || {}).type === URI.Type.LOCAL;
                    }),
                    (URI.isMosaic = function (e) {
                        return (URI.from(e) || {}).type === URI.Type.MOSAIC;
                    }),
                    (URI.isPlaylistV1 = function (e) {
                        return (URI.from(e) || {}).type === URI.Type.PLAYLIST;
                    }),
                    (URI.isPlaylistV2 = function (e) {
                        return (URI.from(e) || {}).type === URI.Type.PLAYLIST_V2;
                    }),
                    (URI.isRadio = function (e) {
                        return (URI.from(e) || {}).type === URI.Type.RADIO;
                    }),
                    (URI.isRootlist = function (e) {
                        return (URI.from(e) || {}).type === URI.Type.ROOTLIST;
                    }),
                    (URI.isSearch = function (e) {
                        return (URI.from(e) || {}).type === URI.Type.SEARCH;
                    }),
                    (URI.isShow = function (e) {
                        return (URI.from(e) || {}).type === URI.Type.SHOW;
                    }),
                    (URI.isLive = function (e) {
                        return (URI.from(e) || {}).type === URI.Type.LIVE;
                    }),
                    (URI.isConcert = function (e) {
                        return (URI.from(e) || {}).type === URI.Type.CONCERT;
                    }),
                    (URI.isStation = function (e) {
                        return (URI.from(e) || {}).type === URI.Type.STATION;
                    }),
                    (URI.isTrack = function (e) {
                        return (URI.from(e) || {}).type === URI.Type.TRACK;
                    }),
                    (URI.isProfile = function (e) {
                        return (URI.from(e) || {}).type === URI.Type.PROFILE;
                    }),
                    (URI.isPlaylistV1OrV2 = function (e) {
                        var I = URI.from(e);
                        return !!I && (I.type === URI.Type.PLAYLIST || I.type === URI.Type.PLAYLIST_V2);
                    }),
                    (URI.isSocialSession = function (e) {
                        return (URI.from(e) || {}).type === URI.Type.SOCIAL_SESSION;
                    }),
                    (URI.isInterruption = function (e) {
                        return (URI.from(e) || {}).type === URI.Type.INTERRUPTION;
                    }),
                    (module.exports = URI);
            },
            { "./base62": 187 },
        ],
        189: [
            function (require, module, exports) {
                (function (setImmediate, clearImmediate) {
                    (function () {
                        var nextTick = require("process/browser.js").nextTick,
                            apply = Function.prototype.apply,
                            slice = Array.prototype.slice,
                            immediateIds = {},
                            nextImmediateId = 0;
                        function Timeout(e, t) {
                            (this._id = e), (this._clearFn = t);
                        }
                        (exports.setTimeout = function () {
                            return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
                        }),
                            (exports.setInterval = function () {
                                return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
                            }),
                            (exports.clearTimeout = exports.clearInterval = function (e) {
                                e.close();
                            }),
                            (Timeout.prototype.unref = Timeout.prototype.ref = function () {}),
                            (Timeout.prototype.close = function () {
                                this._clearFn.call(window, this._id);
                            }),
                            (exports.enroll = function (e, t) {
                                clearTimeout(e._idleTimeoutId), (e._idleTimeout = t);
                            }),
                            (exports.unenroll = function (e) {
                                clearTimeout(e._idleTimeoutId), (e._idleTimeout = -1);
                            }),
                            (exports._unrefActive = exports.active = function (e) {
                                clearTimeout(e._idleTimeoutId);
                                var t = e._idleTimeout;
                                t >= 0 &&
                                    (e._idleTimeoutId = setTimeout(function () {
                                        e._onTimeout && e._onTimeout();
                                    }, t));
                            }),
                            (exports.setImmediate =
                                "function" == typeof setImmediate
                                    ? setImmediate
                                    : function (e) {
                                          var t = nextImmediateId++,
                                              i = !(arguments.length < 2) && slice.call(arguments, 1);
                                          return (
                                              (immediateIds[t] = !0),
                                              nextTick(function () {
                                                  immediateIds[t] && (i ? e.apply(null, i) : e.call(null), exports.clearImmediate(t));
                                              }),
                                              t
                                          );
                                      }),
                            (exports.clearImmediate =
                                "function" == typeof clearImmediate
                                    ? clearImmediate
                                    : function (e) {
                                          delete immediateIds[e];
                                      });
                    }.call(this));
                }.call(this, require("timers").setImmediate, require("timers").clearImmediate));
            },
            { "process/browser.js": 186, timers: 189 },
        ],
        190: [
            function (require, module, exports) {
                (function (global) {
                    (function () {
                        var __extends,
                            __assign,
                            __rest,
                            __decorate,
                            __param,
                            __metadata,
                            __awaiter,
                            __generator,
                            __exportStar,
                            __values,
                            __read,
                            __spread,
                            __spreadArrays,
                            __await,
                            __asyncGenerator,
                            __asyncDelegator,
                            __asyncValues,
                            __makeTemplateObject,
                            __importStar,
                            __importDefault,
                            __classPrivateFieldGet,
                            __classPrivateFieldSet,
                            __createBinding;
                        !(function (e) {
                            var t = "object" == typeof global ? global : "object" == typeof self ? self : "object" == typeof this ? this : {};
                            function r(e, r) {
                                return (
                                    e !== t && ("function" == typeof Object.create ? Object.defineProperty(e, "__esModule", { value: !0 }) : (e.__esModule = !0)),
                                    function (t, n) {
                                        return (e[t] = r ? r(t, n) : n);
                                    }
                                );
                            }
                            "function" == typeof define && define.amd
                                ? define("tslib", ["exports"], function (n) {
                                      e(r(t, r(n)));
                                  })
                                : "object" == typeof module && "object" == typeof module.exports
                                ? e(r(t, r(module.exports)))
                                : e(r(t));
                        })(function (e) {
                            var t =
                                Object.setPrototypeOf ||
                                ({ __proto__: [] } instanceof Array &&
                                    function (e, t) {
                                        e.__proto__ = t;
                                    }) ||
                                function (e, t) {
                                    for (var r in t) t.hasOwnProperty(r) && (e[r] = t[r]);
                                };
                            (__extends = function (e, r) {
                                function n() {
                                    this.constructor = e;
                                }
                                t(e, r), (e.prototype = null === r ? Object.create(r) : ((n.prototype = r.prototype), new n()));
                            }),
                                (__assign =
                                    Object.assign ||
                                    function (e) {
                                        for (var t, r = 1, n = arguments.length; r < n; r++) for (var o in (t = arguments[r])) Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
                                        return e;
                                    }),
                                (__rest = function (e, t) {
                                    var r = {};
                                    for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (r[n] = e[n]);
                                    if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
                                        var o = 0;
                                        for (n = Object.getOwnPropertySymbols(e); o < n.length; o++) t.indexOf(n[o]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[o]) && (r[n[o]] = e[n[o]]);
                                    }
                                    return r;
                                }),
                                (__decorate = function (e, t, r, n) {
                                    var o,
                                        a = arguments.length,
                                        _ = a < 3 ? t : null === n ? (n = Object.getOwnPropertyDescriptor(t, r)) : n;
                                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) _ = Reflect.decorate(e, t, r, n);
                                    else for (var i = e.length - 1; i >= 0; i--) (o = e[i]) && (_ = (a < 3 ? o(_) : a > 3 ? o(t, r, _) : o(t, r)) || _);
                                    return a > 3 && _ && Object.defineProperty(t, r, _), _;
                                }),
                                (__param = function (e, t) {
                                    return function (r, n) {
                                        t(r, n, e);
                                    };
                                }),
                                (__metadata = function (e, t) {
                                    if ("object" == typeof Reflect && "function" == typeof Reflect.metadata) return Reflect.metadata(e, t);
                                }),
                                (__awaiter = function (e, t, r, n) {
                                    return new (r || (r = Promise))(function (o, a) {
                                        function _(e) {
                                            try {
                                                c(n.next(e));
                                            } catch (e) {
                                                a(e);
                                            }
                                        }
                                        function i(e) {
                                            try {
                                                c(n.throw(e));
                                            } catch (e) {
                                                a(e);
                                            }
                                        }
                                        function c(e) {
                                            var t;
                                            e.done
                                                ? o(e.value)
                                                : ((t = e.value),
                                                  t instanceof r
                                                      ? t
                                                      : new r(function (e) {
                                                            e(t);
                                                        })).then(_, i);
                                        }
                                        c((n = n.apply(e, t || [])).next());
                                    });
                                }),
                                (__generator = function (e, t) {
                                    var r,
                                        n,
                                        o,
                                        a,
                                        _ = {
                                            label: 0,
                                            sent: function () {
                                                if (1 & o[0]) throw o[1];
                                                return o[1];
                                            },
                                            trys: [],
                                            ops: [],
                                        };
                                    return (
                                        (a = { next: i(0), throw: i(1), return: i(2) }),
                                        "function" == typeof Symbol &&
                                            (a[Symbol.iterator] = function () {
                                                return this;
                                            }),
                                        a
                                    );
                                    function i(a) {
                                        return function (i) {
                                            return (function (a) {
                                                if (r) throw new TypeError("Generator is already executing.");
                                                for (; _; )
                                                    try {
                                                        if (((r = 1), n && (o = 2 & a[0] ? n.return : a[0] ? n.throw || ((o = n.return) && o.call(n), 0) : n.next) && !(o = o.call(n, a[1])).done)) return o;
                                                        switch (((n = 0), o && (a = [2 & a[0], o.value]), a[0])) {
                                                            case 0:
                                                            case 1:
                                                                o = a;
                                                                break;
                                                            case 4:
                                                                return _.label++, { value: a[1], done: !1 };
                                                            case 5:
                                                                _.label++, (n = a[1]), (a = [0]);
                                                                continue;
                                                            case 7:
                                                                (a = _.ops.pop()), _.trys.pop();
                                                                continue;
                                                            default:
                                                                if (!(o = (o = _.trys).length > 0 && o[o.length - 1]) && (6 === a[0] || 2 === a[0])) {
                                                                    _ = 0;
                                                                    continue;
                                                                }
                                                                if (3 === a[0] && (!o || (a[1] > o[0] && a[1] < o[3]))) {
                                                                    _.label = a[1];
                                                                    break;
                                                                }
                                                                if (6 === a[0] && _.label < o[1]) {
                                                                    (_.label = o[1]), (o = a);
                                                                    break;
                                                                }
                                                                if (o && _.label < o[2]) {
                                                                    (_.label = o[2]), _.ops.push(a);
                                                                    break;
                                                                }
                                                                o[2] && _.ops.pop(), _.trys.pop();
                                                                continue;
                                                        }
                                                        a = t.call(e, _);
                                                    } catch (e) {
                                                        (a = [6, e]), (n = 0);
                                                    } finally {
                                                        r = o = 0;
                                                    }
                                                if (5 & a[0]) throw a[1];
                                                return { value: a[0] ? a[1] : void 0, done: !0 };
                                            })([a, i]);
                                        };
                                    }
                                }),
                                (__createBinding = function (e, t, r, n) {
                                    void 0 === n && (n = r), (e[n] = t[r]);
                                }),
                                (__exportStar = function (e, t) {
                                    for (var r in e) "default" === r || t.hasOwnProperty(r) || (t[r] = e[r]);
                                }),
                                (__values = function (e) {
                                    var t = "function" == typeof Symbol && Symbol.iterator,
                                        r = t && e[t],
                                        n = 0;
                                    if (r) return r.call(e);
                                    if (e && "number" == typeof e.length)
                                        return {
                                            next: function () {
                                                return e && n >= e.length && (e = void 0), { value: e && e[n++], done: !e };
                                            },
                                        };
                                    throw new TypeError(t ? "Object is not iterable." : "Symbol.iterator is not defined.");
                                }),
                                (__read = function (e, t) {
                                    var r = "function" == typeof Symbol && e[Symbol.iterator];
                                    if (!r) return e;
                                    var n,
                                        o,
                                        a = r.call(e),
                                        _ = [];
                                    try {
                                        for (; (void 0 === t || t-- > 0) && !(n = a.next()).done; ) _.push(n.value);
                                    } catch (e) {
                                        o = { error: e };
                                    } finally {
                                        try {
                                            n && !n.done && (r = a.return) && r.call(a);
                                        } finally {
                                            if (o) throw o.error;
                                        }
                                    }
                                    return _;
                                }),
                                (__spread = function () {
                                    for (var e = [], t = 0; t < arguments.length; t++) e = e.concat(__read(arguments[t]));
                                    return e;
                                }),
                                (__spreadArrays = function () {
                                    for (var e = 0, t = 0, r = arguments.length; t < r; t++) e += arguments[t].length;
                                    var n = Array(e),
                                        o = 0;
                                    for (t = 0; t < r; t++) for (var a = arguments[t], _ = 0, i = a.length; _ < i; _++, o++) n[o] = a[_];
                                    return n;
                                }),
                                (__await = function (e) {
                                    return this instanceof __await ? ((this.v = e), this) : new __await(e);
                                }),
                                (__asyncGenerator = function (e, t, r) {
                                    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
                                    var n,
                                        o = r.apply(e, t || []),
                                        a = [];
                                    return (
                                        (n = {}),
                                        _("next"),
                                        _("throw"),
                                        _("return"),
                                        (n[Symbol.asyncIterator] = function () {
                                            return this;
                                        }),
                                        n
                                    );
                                    function _(e) {
                                        o[e] &&
                                            (n[e] = function (t) {
                                                return new Promise(function (r, n) {
                                                    a.push([e, t, r, n]) > 1 || i(e, t);
                                                });
                                            });
                                    }
                                    function i(e, t) {
                                        try {
                                            (r = o[e](t)).value instanceof __await ? Promise.resolve(r.value.v).then(c, u) : l(a[0][2], r);
                                        } catch (e) {
                                            l(a[0][3], e);
                                        }
                                        var r;
                                    }
                                    function c(e) {
                                        i("next", e);
                                    }
                                    function u(e) {
                                        i("throw", e);
                                    }
                                    function l(e, t) {
                                        e(t), a.shift(), a.length && i(a[0][0], a[0][1]);
                                    }
                                }),
                                (__asyncDelegator = function (e) {
                                    var t, r;
                                    return (
                                        (t = {}),
                                        n("next"),
                                        n("throw", function (e) {
                                            throw e;
                                        }),
                                        n("return"),
                                        (t[Symbol.iterator] = function () {
                                            return this;
                                        }),
                                        t
                                    );
                                    function n(n, o) {
                                        t[n] = e[n]
                                            ? function (t) {
                                                  return (r = !r) ? { value: __await(e[n](t)), done: "return" === n } : o ? o(t) : t;
                                              }
                                            : o;
                                    }
                                }),
                                (__asyncValues = function (e) {
                                    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
                                    var t,
                                        r = e[Symbol.asyncIterator];
                                    return r
                                        ? r.call(e)
                                        : ((e = "function" == typeof __values ? __values(e) : e[Symbol.iterator]()),
                                          (t = {}),
                                          n("next"),
                                          n("throw"),
                                          n("return"),
                                          (t[Symbol.asyncIterator] = function () {
                                              return this;
                                          }),
                                          t);
                                    function n(r) {
                                        t[r] =
                                            e[r] &&
                                            function (t) {
                                                return new Promise(function (n, o) {
                                                    (function (e, t, r, n) {
                                                        Promise.resolve(n).then(function (t) {
                                                            e({ value: t, done: r });
                                                        }, t);
                                                    })(n, o, (t = e[r](t)).done, t.value);
                                                });
                                            };
                                    }
                                }),
                                (__makeTemplateObject = function (e, t) {
                                    return Object.defineProperty ? Object.defineProperty(e, "raw", { value: t }) : (e.raw = t), e;
                                }),
                                (__importStar = function (e) {
                                    if (e && e.__esModule) return e;
                                    var t = {};
                                    if (null != e) for (var r in e) Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);
                                    return (t.default = e), t;
                                }),
                                (__importDefault = function (e) {
                                    return e && e.__esModule ? e : { default: e };
                                }),
                                (__classPrivateFieldGet = function (e, t) {
                                    if (!t.has(e)) throw new TypeError("attempted to get private field on non-instance");
                                    return t.get(e);
                                }),
                                (__classPrivateFieldSet = function (e, t, r) {
                                    if (!t.has(e)) throw new TypeError("attempted to set private field on non-instance");
                                    return t.set(e, r), r;
                                }),
                                e("__extends", __extends),
                                e("__assign", __assign),
                                e("__rest", __rest),
                                e("__decorate", __decorate),
                                e("__param", __param),
                                e("__metadata", __metadata),
                                e("__awaiter", __awaiter),
                                e("__generator", __generator),
                                e("__exportStar", __exportStar),
                                e("__createBinding", __createBinding),
                                e("__values", __values),
                                e("__read", __read),
                                e("__spread", __spread),
                                e("__spreadArrays", __spreadArrays),
                                e("__await", __await),
                                e("__asyncGenerator", __asyncGenerator),
                                e("__asyncDelegator", __asyncDelegator),
                                e("__asyncValues", __asyncValues),
                                e("__makeTemplateObject", __makeTemplateObject),
                                e("__importStar", __importStar),
                                e("__importDefault", __importDefault),
                                e("__classPrivateFieldGet", __classPrivateFieldGet),
                                e("__classPrivateFieldSet", __classPrivateFieldSet);
                        });
                    }.call(this));
                }.call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {}));
            },
            {},
        ],
        191: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 });
                var errors_1 = require("../enums/errors"),
                    player_error_1 = require("../error/player_error"),
                    player_wrapper_1 = require("./player_wrapper");
                window.addEventListener("load", function () {
                    if (window.parent === window) throw new player_error_1.PlayerError(errors_1.Errors.MISSING_IFRAME, "Embedded player needs to be in an iframe");
                    player_wrapper_1.PlayerWrapper.create(window, window.parent).listen();
                });
            },
            { "../enums/errors": 193, "../error/player_error": 195, "./player_wrapper": 192 },
        ],
        192: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.PlayerWrapper = void 0);
                var streamer_1 = require("@spotify-internal/harmony/lib/streamer"),
                    harmony_1 = require("@spotify-internal/harmony"),
                    connection_observer_1 = require("@spotify-internal/transport/lib/_internal/connection_observer"),
                    client_1 = require("@spotify-internal/harmony/lib/client"),
                    transport_1 = require("@spotify-internal/transport"),
                    create_transport_1 = require("@spotify-internal/harmony/lib/utils/create_transport"),
                    messages_1 = require("../enums/messages"),
                    defer_1 = require("../shared/defer"),
                    messages_factory_1 = require("../shared/messages_factory"),
                    message_dispatcher_1 = require("../shared/message_dispatcher"),
                    PlayerWrapper = (function () {
                        function e(e, s) {
                            var t,
                                r,
                                n = this;
                            (this._lastState = null),
                                (this._client = null),
                                (this._streamer = null),
                                (this._transport = null),
                                (this._getTokenRequests = {}),
                                (this._messageHandlers =
                                    (((t = {})[messages_1.Messages.INIT] = this._onInit.bind(this)),
                                    (t[messages_1.Messages.CONNECT] = this._onConnect.bind(this)),
                                    (t[messages_1.Messages.DISCONNECT] = this._onDisconnect.bind(this)),
                                    (t[messages_1.Messages.TOKEN] = this._onToken.bind(this)),
                                    (t[messages_1.Messages.GET_CURRENT_STATE] = this._onGetCurrentState.bind(this)),
                                    (t[messages_1.Messages.GET_VOLUME] = this._onGetVolume.bind(this)),
                                    (t[messages_1.Messages.SET_VOLUME] = this._onSetVolume.bind(this)),
                                    (t[messages_1.Messages.SET_NAME] = this._onSetName.bind(this)),
                                    (t[messages_1.Messages.PAUSE] = this._onPause.bind(this)),
                                    (t[messages_1.Messages.RESUME] = this._onResume.bind(this)),
                                    (t[messages_1.Messages.TOGGLE_PLAY] = this._onTogglePlay.bind(this)),
                                    (t[messages_1.Messages.SEEK] = this._onSeek.bind(this)),
                                    (t[messages_1.Messages.PREV_TRACK] = this._onPrevTrack.bind(this)),
                                    (t[messages_1.Messages.NEXT_TRACK] = this._onNextTrack.bind(this)),
                                    t)),
                                (this._currentWindow = e),
                                (this._loaderWindow = s),
                                (this._msgDispatcher = message_dispatcher_1.MessageDispatcher.create()),
                                (this._getToken = this._getToken.bind(this)),
                                (this._onAuthError = this._onAuthError.bind(this)),
                                (this._onClientError = this._onClientError.bind(this)),
                                (this._onLocalPlayerEnabled = this._onLocalPlayerEnabled.bind(this)),
                                (this._onPlayerInitError = this._onPlayerInitError.bind(this)),
                                (this._onProductStateChanged = this._onProductStateChanged.bind(this)),
                                (this._onRegistrationError = this._onRegistrationError.bind(this)),
                                (this._onStateChanged = this._onStateChanged.bind(this)),
                                (this._verifyToken = this._verifyToken.bind(this)),
                                (this._handleMessages = this._handleMessages.bind(this)),
                                (this._checkStateChange =
                                    ((r = function (e, s) {
                                        if (e !== s && e && s && "object" == typeof e && "object" == typeof s) {
                                            var t = Object.keys(e),
                                                n = Object.keys(s);
                                            return (
                                                t.length === n.length &&
                                                t.every(function (t) {
                                                    return "timestamp" === t || r(e[t], s[t]);
                                                })
                                            );
                                        }
                                        return e === s;
                                    }),
                                    function (e) {
                                        return !r(n._lastState, e);
                                    }));
                        }
                        return (
                            (e.create = function (s, t) {
                                return new e(s, t);
                            }),
                            (e.prototype._onConnect = function (e, s) {
                                var t = this,
                                    r = this._transport;
                                r &&
                                    r.connect().then(function (e) {
                                        return t._sendMessage(messages_factory_1.messages.connected(e, s)), r.authenticate();
                                    });
                            }),
                            (e.prototype._getFlags = function () {
                                var e,
                                    s = null === (e = this._transport) || void 0 === e ? void 0 : e.request("@webgate/melody/v1/flags", { authorize: !0, responseType: "json" }),
                                    t = new Promise(function (e) {
                                        setTimeout(e, 1e3);
                                    });
                                return Promise.race([s, t])
                                    .then(function (e) {
                                        var s;
                                        return { useCloudPlayback: 200 === (null == e ? void 0 : e.status) && !!(null === (s = e.body) || void 0 === s ? void 0 : s.useCloudPlayback) };
                                    })
                                    .catch(function () {
                                        return { useCloudPlayback: !1 };
                                    });
                            }),
                            (e.prototype._onInit = function (e) {
                                var s = this;
                                this._transport = create_transport_1.createTransportForHarmony({ getToken: this._getToken, endpoints: { webgate: "https://api.spotify.com/v1" } });
                                var t = client_1.createHarmonyClient({ transport: this._transport, descriptor: { id: null, name: e.name, brand: "public_js-sdk", randomizeId: !0 } });
                                (this._client = t),
                                    this._getFlags().then(function (r) {
                                        var n, a;
                                        (s._streamer = streamer_1.createStreamerForClient(t, { initialVolume: e.volume, useCloudPlayback: r.useCloudPlayback })),
                                            "volume" in e &&
                                                s._streamer.once("registered", function () {
                                                    s._streamer && s._streamer.setVolume(e.volume);
                                                }),
                                            s._streamer.addListeners((((n = {}).registered = s._onLocalPlayerEnabled), (n.state_changed = s._onStateChanged), (n.player_initialization_failed = s._onPlayerInitError), n)),
                                            s._streamer.on("registration_error", s._onRegistrationError),
                                            t.addListeners(
                                                (((a = {})[harmony_1.HarmonyEvent.AUTHENTICATION_ERROR] = s._onAuthError),
                                                (a[harmony_1.HarmonyEvent.ERROR] = s._onClientError),
                                                (a[harmony_1.HarmonyEvent.PRODUCT_STATE_CHANGED] = s._onProductStateChanged),
                                                a)
                                            );
                                        var o = connection_observer_1.ConnectionObserver.create();
                                        o.on(transport_1.TransportEvent.CONNECTION_ONLINE, s._onLocalPlayerEnabled), o.on(transport_1.TransportEvent.CONNECTION_OFFLINE, s._onLocalPlayerDisabled);
                                    });
                            }),
                            (e.prototype._onToken = function (e) {
                                var s = e.ref,
                                    t = e.token;
                                this._getTokenRequests[s].resolve(t);
                            }),
                            (e.prototype._onGetCurrentState = function (e, s) {
                                var t = this;
                                this._streamer.getCurrentState().then(function (e) {
                                    t._sendMessage(messages_factory_1.messages.currentState(e, s));
                                });
                            }),
                            (e.prototype._onProductStateChanged = function () {
                                var e = this;
                                this._client.getProductState().then(function (s) {
                                    "1" === s.ads && (e._sendMessage(messages_factory_1.messages.accountError("This functionality is restricted to premium users only")), e._transport.disconnect());
                                });
                            }),
                            (e.prototype._onGetVolume = function (e, s) {
                                var t = this;
                                this._streamer.getVolume().then(function (e) {
                                    t._sendMessage(messages_factory_1.messages.volume(e, s));
                                });
                            }),
                            (e.prototype._onSetName = function (e) {
                                this._client.setName(e);
                            }),
                            (e.prototype._onSetVolume = function (e) {
                                this._streamer.setVolume(e);
                            }),
                            (e.prototype._onDisconnect = function () {
                                this._transport.disconnect();
                            }),
                            (e.prototype._onLocalPlayerEnabled = function () {
                                var e = this;
                                this._client.getClientDescriptor().then(function (s) {
                                    var t = s.id;
                                    e._sendMessage(messages_factory_1.messages.playerReady({ device_id: t }));
                                });
                            }),
                            (e.prototype._onLocalPlayerDisabled = function () {
                                var e = this;
                                this._client.getClientDescriptor().then(function (s) {
                                    var t = s.id;
                                    e._sendMessage(messages_factory_1.messages.playerNotReady({ device_id: t }));
                                });
                            }),
                            (e.prototype._onStateChanged = function (e) {
                                var s = e.data.state;
                                this._checkStateChange(s) && (this._sendMessage(messages_factory_1.messages.playerStateChanged(s)), (this._lastState = s));
                            }),
                            (e.prototype._getToken = function (e) {
                                var s = this._sendMessage(messages_factory_1.messages.getToken());
                                (this._getTokenRequests[s] = defer_1.defer()), this._getTokenRequests[s].promise.then(this._verifyToken).then(e);
                            }),
                            (e.prototype._verifyToken = function (e) {
                                var s = this;
                                return this._client
                                    ? this._client
                                          .request("@webgate/melody/v1/check_scope?scope=web-playback", { authorize: !1, headers: { Authorization: "Bearer " + e } })
                                          .then(function (t) {
                                              return 403 === t.status && s._sendMessage(messages_factory_1.messages.authError({ message: "Invalid token scopes." })), e;
                                          })
                                          .catch(function () {
                                              return e;
                                          })
                                    : Promise.resolve(e);
                            }),
                            (e.prototype._handleMessages = function (e, s, t) {
                                "function" == typeof this._messageHandlers[e] ? this._messageHandlers[e](s, t) : console.info("No handler for", e);
                            }),
                            (e.prototype._onAuthError = function () {
                                this._sendMessage(messages_factory_1.messages.authError({ message: "Authentication failed" }));
                            }),
                            (e.prototype._onPause = function () {
                                var e,
                                    s = this;
                                null === (e = this._streamer) ||
                                    void 0 === e ||
                                    e.pause().catch(function (e) {
                                        var t = e.message;
                                        s._sendMessage(messages_factory_1.messages.playbackError({ message: t }));
                                    });
                            }),
                            (e.prototype._onResume = function () {
                                var e = this;
                                this._streamer.resume().catch(function (s) {
                                    var t = s.message;
                                    e._sendMessage(messages_factory_1.messages.playbackError({ message: t }));
                                });
                            }),
                            (e.prototype._onTogglePlay = function () {
                                var e = this;
                                this._streamer.togglePlay().catch(function (s) {
                                    var t = s.message;
                                    e._sendMessage(messages_factory_1.messages.playbackError({ message: t }));
                                });
                            }),
                            (e.prototype._onSeek = function (e) {
                                var s = this;
                                this._streamer.seek(e).catch(function (e) {
                                    var t = e.message;
                                    s._sendMessage(messages_factory_1.messages.playbackError({ message: t }));
                                });
                            }),
                            (e.prototype._onPrevTrack = function (e) {
                                var s = this;
                                this._streamer.previousTrack(e).catch(function (e) {
                                    var t = e.message;
                                    s._sendMessage(messages_factory_1.messages.playbackError({ message: t }));
                                });
                            }),
                            (e.prototype._onNextTrack = function (e) {
                                var s = this;
                                this._streamer.nextTrack(e).catch(function (e) {
                                    var t = e.message;
                                    s._sendMessage(messages_factory_1.messages.playbackError({ message: t }));
                                });
                            }),
                            (e.prototype._onPlayerInitError = function () {
                                this._sendMessage(messages_factory_1.messages.playerInitError({ message: "Failed to initialize player" }));
                            }),
                            (e.prototype._onRegistrationError = function (e) {
                                e.data.error.code === harmony_1.HarmonyError.TP_REGISTRATION_FAILED_NON_PREMIUM && this._sendMessage(messages_factory_1.messages.accountError("This functionality is restricted to premium users only"));
                            }),
                            (e.prototype._onClientError = function (e) {
                                var s = e.data.source;
                                (s !== harmony_1.HarmonyErrorSource.HARMONY && s !== harmony_1.HarmonyErrorSource.PLAYBACK) || this._sendMessage(messages_factory_1.messages.playbackError({ message: "Playback error" }));
                            }),
                            (e.prototype._sendMessage = function (e) {
                                return this._msgDispatcher.send(this._loaderWindow, e);
                            }),
                            (e.prototype.listen = function () {
                                var e = this;
                                this._msgDispatcher.listen(this._currentWindow, this._handleMessages),
                                    this._currentWindow.addEventListener("beforeunload", function () {
                                        e._client && e._transport.disconnect();
                                    }),
                                    this._sendMessage(messages_factory_1.messages.embeddedLoaded());
                            }),
                            e
                        );
                    })();
                exports.PlayerWrapper = PlayerWrapper;
            },
            {
                "../enums/messages": 194,
                "../shared/defer": 196,
                "../shared/message_dispatcher": 197,
                "../shared/messages_factory": 198,
                "@spotify-internal/harmony": 104,
                "@spotify-internal/harmony/lib/client": 123,
                "@spotify-internal/harmony/lib/streamer": 131,
                "@spotify-internal/harmony/lib/utils/create_transport": 134,
                "@spotify-internal/transport": 162,
                "@spotify-internal/transport/lib/_internal/connection_observer": 173,
            },
        ],
        193: [
            function (require, module, exports) {
                "use strict";
                var Errors;
                Object.defineProperty(exports, "__esModule", { value: !0 }),
                    (exports.Errors = void 0),
                    (function (r) {
                        (r.INVALID_LISTENER = "INVALID_LISTENER"),
                            (r.INVALID_WEBPLAYBACK = "INVALID_WEBPLAYBACK"),
                            (r.NO_BODY = "NO_BODY"),
                            (r.NO_EVENT = "NO_EVENT"),
                            (r.INVALID_OAUTH = "INVALID_OAUTH"),
                            (r.MISSING_IFRAME = "MISSING_IFRAME");
                    })((Errors = exports.Errors || (exports.Errors = {})));
            },
            {},
        ],
        194: [
            function (require, module, exports) {
                "use strict";
                var Messages;
                Object.defineProperty(exports, "__esModule", { value: !0 }),
                    (exports.Messages = void 0),
                    (function (E) {
                        (E.SPOTIFY_MESSAGE = "SP_MESSAGE"),
                            (E.ACCOUNT_ERROR = "ACCOUNT_ERROR"),
                            (E.AUTH_ERROR = "AUTH_ERROR"),
                            (E.CONNECT = "CONNECT"),
                            (E.CONNECTED = "CONNECTED"),
                            (E.CURRENT_STATE = "CURRENT_STATE"),
                            (E.DISCONNECT = "DISCONNECT"),
                            (E.EVENT = "EVENT"),
                            (E.GET_CURRENT_STATE = "GET_CURRENT_STATE"),
                            (E.GET_TOKEN = "GET_TOKEN"),
                            (E.GET_VOLUME = "GET_VOLUME"),
                            (E.INIT = "INIT"),
                            (E.LOADED = "LOADED"),
                            (E.NEXT_TRACK = "NEXT_TRACK"),
                            (E.PAUSE = "PAUSE"),
                            (E.PLAYBACK_ERROR = "PLAYBACK_ERROR"),
                            (E.PLAYER_INIT_ERROR = "PLAYER_INIT_ERROR"),
                            (E.PLAYER_READY = "PLAYER_READY"),
                            (E.PLAYER_NOT_READY = "PLAYER_NOT_READY"),
                            (E.PLAYER_STATE_CHANGED = "PLAYER_STATE_CHANGED"),
                            (E.PREV_TRACK = "PREV_TRACK"),
                            (E.RESUME = "RESUME"),
                            (E.SEEK = "SEEK"),
                            (E.SET_NAME = "SET_NAME"),
                            (E.SET_VOLUME = "SET_VOLUME"),
                            (E.TOGGLE_PLAY = "TOGGLE_PLAY"),
                            (E.TOKEN = "TOKEN"),
                            (E.VOLUME = "VOLUME");
                    })((Messages = exports.Messages || (exports.Messages = {})));
            },
            {},
        ],
        195: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.PlayerError = void 0);
                var tslib_1 = require("tslib"),
                    PlayerError = (function (r) {
                        function e(e, t) {
                            var o = r.call(this, t) || this;
                            return (o.code = e), (o.message = t), (o.name = "AnthemError"), o;
                        }
                        return tslib_1.__extends(e, r), e;
                    })(Error);
                exports.PlayerError = PlayerError;
            },
            { tslib: 190 },
        ],
        196: [
            function (require, module, exports) {
                arguments[4][21][0].apply(exports, arguments);
            },
            { dup: 21 },
        ],
        197: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.MessageDispatcher = void 0);
                var messages_1 = require("../enums/messages"),
                    MessageDispatcher = (function () {
                        function e() {
                            (this._seq = 0), (this._onMessageCallback = function () {}), (this._receiveMessage = this._receiveMessage.bind(this));
                        }
                        return (
                            (e.create = function () {
                                return new e();
                            }),
                            (e.prototype._addMessageId = function (e) {
                                return (e.seq = this._seq++), e;
                            }),
                            (e.prototype._receiveMessage = function (e) {
                                if (e.data) {
                                    var s = e.data,
                                        t = s.type,
                                        a = s.body,
                                        i = s.seq;
                                    t === messages_1.Messages.SPOTIFY_MESSAGE && (null == a ? void 0 : a.topic) && this._onMessageCallback(a.topic, a.data, i);
                                }
                            }),
                            (e.prototype.listen = function (e, s) {
                                (this._onMessageCallback = s), e.addEventListener("message", this._receiveMessage);
                            }),
                            (e.prototype.stopListening = function (e) {
                                e.removeEventListener("message", this._receiveMessage);
                            }),
                            (e.prototype.send = function (e, s, t) {
                                void 0 === t && (t = "*");
                                var a = this._addMessageId(s);
                                return e.postMessage(a, t), a.seq;
                            }),
                            e
                        );
                    })();
                exports.MessageDispatcher = MessageDispatcher;
            },
            { "../enums/messages": 194 },
        ],
        198: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.messages = void 0);
                var messages_1 = require("../enums/messages"),
                    MessagesFactory = (function () {
                        function e() {}
                        return (
                            (e.create = function () {
                                return new e();
                            }),
                            (e.prototype._createEventMessage = function (e, s) {
                                return this._createMessage(messages_1.Messages.EVENT, { name: e, eventData: s });
                            }),
                            (e.prototype._createMessage = function (e, s) {
                                return { type: messages_1.Messages.SPOTIFY_MESSAGE, body: { topic: e, data: s ? JSON.parse(JSON.stringify(s)) : void 0 } };
                            }),
                            (e.prototype.accountError = function (e) {
                                return this._createEventMessage(messages_1.Messages.ACCOUNT_ERROR, { message: e });
                            }),
                            (e.prototype.authError = function (e) {
                                return this._createEventMessage(messages_1.Messages.AUTH_ERROR, e);
                            }),
                            (e.prototype.playbackError = function (e) {
                                return this._createEventMessage(messages_1.Messages.PLAYBACK_ERROR, e);
                            }),
                            (e.prototype.playerReady = function (e) {
                                return this._createEventMessage(messages_1.Messages.PLAYER_READY, e);
                            }),
                            (e.prototype.playerNotReady = function (e) {
                                return this._createEventMessage(messages_1.Messages.PLAYER_NOT_READY, e);
                            }),
                            (e.prototype.connect = function () {
                                return this._createMessage(messages_1.Messages.CONNECT);
                            }),
                            (e.prototype.connected = function (e, s) {
                                return this._createMessage(messages_1.Messages.CONNECTED, { connected: e, ref: s });
                            }),
                            (e.prototype.disconnect = function () {
                                return this._createMessage(messages_1.Messages.DISCONNECT);
                            }),
                            (e.prototype.init = function (e) {
                                return this._createMessage(messages_1.Messages.INIT, e);
                            }),
                            (e.prototype.playerInitError = function (e) {
                                return this._createEventMessage(messages_1.Messages.PLAYER_INIT_ERROR, e);
                            }),
                            (e.prototype.getToken = function () {
                                return this._createMessage(messages_1.Messages.GET_TOKEN);
                            }),
                            (e.prototype.token = function (e, s) {
                                return this._createMessage(messages_1.Messages.TOKEN, { token: e, ref: s });
                            }),
                            (e.prototype.pause = function () {
                                return this._createMessage(messages_1.Messages.PAUSE);
                            }),
                            (e.prototype.resume = function () {
                                return this._createMessage(messages_1.Messages.RESUME);
                            }),
                            (e.prototype.togglePlay = function () {
                                return this._createMessage(messages_1.Messages.TOGGLE_PLAY);
                            }),
                            (e.prototype.seek = function (e) {
                                return this._createMessage(messages_1.Messages.SEEK, e);
                            }),
                            (e.prototype.nextTrack = function (e) {
                                return this._createMessage(messages_1.Messages.NEXT_TRACK, e);
                            }),
                            (e.prototype.previousTrack = function (e) {
                                return this._createMessage(messages_1.Messages.PREV_TRACK, e);
                            }),
                            (e.prototype.getCurrentState = function () {
                                return this._createMessage(messages_1.Messages.GET_CURRENT_STATE);
                            }),
                            (e.prototype.currentState = function (e, s) {
                                return this._createMessage(messages_1.Messages.CURRENT_STATE, { state: e, ref: s });
                            }),
                            (e.prototype.playerStateChanged = function (e) {
                                return this._createEventMessage(messages_1.Messages.PLAYER_STATE_CHANGED, e);
                            }),
                            (e.prototype.getVolume = function () {
                                return this._createMessage(messages_1.Messages.GET_VOLUME);
                            }),
                            (e.prototype.volume = function (e, s) {
                                return this._createMessage(messages_1.Messages.VOLUME, { volume: e, ref: s });
                            }),
                            (e.prototype.setVolume = function (e) {
                                return this._createMessage(messages_1.Messages.SET_VOLUME, e);
                            }),
                            (e.prototype.setName = function (e) {
                                return this._createMessage(messages_1.Messages.SET_NAME, e);
                            }),
                            (e.prototype.embeddedLoaded = function () {
                                return this._createMessage(messages_1.Messages.LOADED);
                            }),
                            e
                        );
                    })();
                exports.messages = MessagesFactory.create();
            },
            { "../enums/messages": 194 },
        ],
    },
    {},
    [191]
);
